
4am.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cec  08004cb8  08004cb8  00005cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a4  080079a4  00009190  2**0
                  CONTENTS
  4 .ARM          00000000  080079a4  080079a4  00009190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079a4  080079a4  00009190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a4  080079a4  000089a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a8  080079a8  000089a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080079ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000190  08007b3c  00009190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000970  08007b3c  00009970  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b417  00000000  00000000  000091b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002404  00000000  00000000  000145d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  000169d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017b8a  00000000  00000000  00017500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000caa5  00000000  00000000  0002f08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008791b  00000000  00000000  0003bb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c344a  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000838  00000000  00000000  000c348d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003590  00000000  00000000  000c3cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c7258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ca0 	.word	0x08004ca0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	08004ca0 	.word	0x08004ca0

0800014c <init_Bullets>:
 };

struct  bullet Bullets[MAXBULLETS];
struct enemyBullets evilBullets[MAXENEMYBULLETS];

void init_Bullets(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAXBULLETS ; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e019      	b.n	800018c <init_Bullets+0x40>
		Bullets[i].x = 0;
 8000158:	4a11      	ldr	r2, [pc, #68]	@ (80001a0 <init_Bullets+0x54>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		Bullets[i].y = 0;
 8000162:	4a0f      	ldr	r2, [pc, #60]	@ (80001a0 <init_Bullets+0x54>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	009b      	lsls	r3, r3, #2
 8000168:	4413      	add	r3, r2
 800016a:	2200      	movs	r2, #0
 800016c:	705a      	strb	r2, [r3, #1]
		Bullets[i].speed = 0;
 800016e:	4a0c      	ldr	r2, [pc, #48]	@ (80001a0 <init_Bullets+0x54>)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	4413      	add	r3, r2
 8000176:	2200      	movs	r2, #0
 8000178:	709a      	strb	r2, [r3, #2]
		Bullets[i].isActive = 0;
 800017a:	4a09      	ldr	r2, [pc, #36]	@ (80001a0 <init_Bullets+0x54>)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	009b      	lsls	r3, r3, #2
 8000180:	4413      	add	r3, r2
 8000182:	2200      	movs	r2, #0
 8000184:	70da      	strb	r2, [r3, #3]
	for(int i = 0 ; i < MAXBULLETS ; i++){
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	3301      	adds	r3, #1
 800018a:	607b      	str	r3, [r7, #4]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000190:	dde2      	ble.n	8000158 <init_Bullets+0xc>
	};
}
 8000192:	bf00      	nop
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000520 	.word	0x20000520

080001a4 <init_enemyBullets>:
void init_enemyBullets(){
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAXENEMYBULLETS ; i++){
 80001aa:	2300      	movs	r3, #0
 80001ac:	607b      	str	r3, [r7, #4]
 80001ae:	e02e      	b.n	800020e <init_enemyBullets+0x6a>
		evilBullets[i].x = 0;
 80001b0:	491b      	ldr	r1, [pc, #108]	@ (8000220 <init_enemyBullets+0x7c>)
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	4613      	mov	r3, r2
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	4413      	add	r3, r2
 80001ba:	440b      	add	r3, r1
 80001bc:	2200      	movs	r2, #0
 80001be:	701a      	strb	r2, [r3, #0]
		evilBullets[i].y = 0;
 80001c0:	4917      	ldr	r1, [pc, #92]	@ (8000220 <init_enemyBullets+0x7c>)
 80001c2:	687a      	ldr	r2, [r7, #4]
 80001c4:	4613      	mov	r3, r2
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	4413      	add	r3, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	3301      	adds	r3, #1
 80001ce:	2200      	movs	r2, #0
 80001d0:	701a      	strb	r2, [r3, #0]
		evilBullets[i].dx= 0;
 80001d2:	4913      	ldr	r1, [pc, #76]	@ (8000220 <init_enemyBullets+0x7c>)
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	4613      	mov	r3, r2
 80001d8:	009b      	lsls	r3, r3, #2
 80001da:	4413      	add	r3, r2
 80001dc:	440b      	add	r3, r1
 80001de:	3302      	adds	r3, #2
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]
		evilBullets[i].dy = 0;
 80001e4:	490e      	ldr	r1, [pc, #56]	@ (8000220 <init_enemyBullets+0x7c>)
 80001e6:	687a      	ldr	r2, [r7, #4]
 80001e8:	4613      	mov	r3, r2
 80001ea:	009b      	lsls	r3, r3, #2
 80001ec:	4413      	add	r3, r2
 80001ee:	440b      	add	r3, r1
 80001f0:	3303      	adds	r3, #3
 80001f2:	2200      	movs	r2, #0
 80001f4:	701a      	strb	r2, [r3, #0]
		evilBullets[i].isActive= 0;
 80001f6:	490a      	ldr	r1, [pc, #40]	@ (8000220 <init_enemyBullets+0x7c>)
 80001f8:	687a      	ldr	r2, [r7, #4]
 80001fa:	4613      	mov	r3, r2
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	4413      	add	r3, r2
 8000200:	440b      	add	r3, r1
 8000202:	3304      	adds	r3, #4
 8000204:	2200      	movs	r2, #0
 8000206:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < MAXENEMYBULLETS ; i++){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3301      	adds	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2b31      	cmp	r3, #49	@ 0x31
 8000212:	ddcd      	ble.n	80001b0 <init_enemyBullets+0xc>
	}
}
 8000214:	bf00      	nop
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	20000720 	.word	0x20000720

08000224 <killEnemy>:
//	EXTI->PR |= EXTI_PR_PR4;
//
//}
uint8_t enemiesAlive = 20;

void killEnemy(struct enemy* enemy){
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af02      	add	r7, sp, #8
 800022a:	6078      	str	r0, [r7, #4]
	enemy->isDying = 1;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2201      	movs	r2, #1
 8000230:	70da      	strb	r2, [r3, #3]
	enemy->ticksSinceLastChange = 0;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2200      	movs	r2, #0
 8000236:	71da      	strb	r2, [r3, #7]
	ST7735_DrawImage(enemy->x , enemy->y , 8 , 8 , enemy_ship_dying2);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	785b      	ldrb	r3, [r3, #1]
 8000242:	4619      	mov	r1, r3
 8000244:	4b04      	ldr	r3, [pc, #16]	@ (8000258 <killEnemy+0x34>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	2308      	movs	r3, #8
 800024a:	2208      	movs	r2, #8
 800024c:	f001 fde1 	bl	8001e12 <ST7735_DrawImage>



}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	080077ac 	.word	0x080077ac

0800025c <calculateCollisions>:
void calculateCollisions(){
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAXBULLETS ; i++){
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	e07e      	b.n	8000366 <calculateCollisions+0x10a>
		if(Bullets[i].isActive == 0){
 8000268:	4a43      	ldr	r2, [pc, #268]	@ (8000378 <calculateCollisions+0x11c>)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	4413      	add	r3, r2
 8000270:	78db      	ldrb	r3, [r3, #3]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d07c      	beq.n	8000370 <calculateCollisions+0x114>
			return;
		}

		for(int j = 0 ; j <20 ; j++){
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
 800027a:	e06e      	b.n	800035a <calculateCollisions+0xfe>
			if(enemyList[j].isAlive == 0 || enemyList[j].isDying == 1){
 800027c:	493f      	ldr	r1, [pc, #252]	@ (800037c <calculateCollisions+0x120>)
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	4613      	mov	r3, r2
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4413      	add	r3, r2
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	440b      	add	r3, r1
 800028a:	3302      	adds	r3, #2
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d05f      	beq.n	8000352 <calculateCollisions+0xf6>
 8000292:	493a      	ldr	r1, [pc, #232]	@ (800037c <calculateCollisions+0x120>)
 8000294:	68ba      	ldr	r2, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	4413      	add	r3, r2
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	440b      	add	r3, r1
 80002a0:	3303      	adds	r3, #3
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d054      	beq.n	8000352 <calculateCollisions+0xf6>
				continue;
			}

			int8_t disp_x = enemyList[j].x-Bullets[i].x;
 80002a8:	4934      	ldr	r1, [pc, #208]	@ (800037c <calculateCollisions+0x120>)
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	4613      	mov	r3, r2
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	4413      	add	r3, r2
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	440b      	add	r3, r1
 80002b6:	781a      	ldrb	r2, [r3, #0]
 80002b8:	492f      	ldr	r1, [pc, #188]	@ (8000378 <calculateCollisions+0x11c>)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 80002c0:	1ad3      	subs	r3, r2, r3
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	71fb      	strb	r3, [r7, #7]
			int8_t disp_y = enemyList[j].y-Bullets[i].y;
 80002c6:	492d      	ldr	r1, [pc, #180]	@ (800037c <calculateCollisions+0x120>)
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	4613      	mov	r3, r2
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	4413      	add	r3, r2
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	440b      	add	r3, r1
 80002d4:	3301      	adds	r3, #1
 80002d6:	781a      	ldrb	r2, [r3, #0]
 80002d8:	4927      	ldr	r1, [pc, #156]	@ (8000378 <calculateCollisions+0x11c>)
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	440b      	add	r3, r1
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	1ad3      	subs	r3, r2, r3
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	71bb      	strb	r3, [r7, #6]
			disp_x = abs(disp_x);
 80002e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	bfb8      	it	lt
 80002f0:	425b      	neglt	r3, r3
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	71fb      	strb	r3, [r7, #7]
			disp_y = abs(disp_y);
 80002f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	bfb8      	it	lt
 80002fe:	425b      	neglt	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	71bb      	strb	r3, [r7, #6]

			if(disp_x < 8 && disp_y < 8){
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b07      	cmp	r3, #7
 800030a:	dc23      	bgt.n	8000354 <calculateCollisions+0xf8>
 800030c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000310:	2b07      	cmp	r3, #7
 8000312:	dc1f      	bgt.n	8000354 <calculateCollisions+0xf8>
				killEnemy(&enemyList[j]);
 8000314:	68ba      	ldr	r2, [r7, #8]
 8000316:	4613      	mov	r3, r2
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	4413      	add	r3, r2
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	4a17      	ldr	r2, [pc, #92]	@ (800037c <calculateCollisions+0x120>)
 8000320:	4413      	add	r3, r2
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff7e 	bl	8000224 <killEnemy>
				Bullets[i].isActive = 0;
 8000328:	4a13      	ldr	r2, [pc, #76]	@ (8000378 <calculateCollisions+0x11c>)
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	4413      	add	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	70da      	strb	r2, [r3, #3]
				ST7735_DrawPixel(Bullets[i].x , Bullets[i].y , 0x0000);
 8000334:	4a10      	ldr	r2, [pc, #64]	@ (8000378 <calculateCollisions+0x11c>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800033c:	4618      	mov	r0, r3
 800033e:	4a0e      	ldr	r2, [pc, #56]	@ (8000378 <calculateCollisions+0x11c>)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	785b      	ldrb	r3, [r3, #1]
 8000348:	2200      	movs	r2, #0
 800034a:	4619      	mov	r1, r3
 800034c:	f001 fbd4 	bl	8001af8 <ST7735_DrawPixel>
				break;
 8000350:	e006      	b.n	8000360 <calculateCollisions+0x104>
				continue;
 8000352:	bf00      	nop
		for(int j = 0 ; j <20 ; j++){
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	3301      	adds	r3, #1
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	2b13      	cmp	r3, #19
 800035e:	dd8d      	ble.n	800027c <calculateCollisions+0x20>
	for(int i = 0 ; i < MAXBULLETS ; i++){
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	3301      	adds	r3, #1
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	2b7f      	cmp	r3, #127	@ 0x7f
 800036a:	f77f af7d 	ble.w	8000268 <calculateCollisions+0xc>
 800036e:	e000      	b.n	8000372 <calculateCollisions+0x116>
			return;
 8000370:	bf00      	nop
			}
		}

	}
}
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000520 	.word	0x20000520
 800037c:	20000018 	.word	0x20000018

08000380 <update_Bullets>:
uint16_t playerBulletColour = 0xFFFF;
uint16_t EnemyBulletColour = 0xFFFF;

void update_Bullets(){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAXBULLETS ; i++){
 8000386:	2300      	movs	r3, #0
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	e059      	b.n	8000440 <update_Bullets+0xc0>
		if(!Bullets[i].isActive){
 800038c:	4a73      	ldr	r2, [pc, #460]	@ (800055c <update_Bullets+0x1dc>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	4413      	add	r3, r2
 8000394:	78db      	ldrb	r3, [r3, #3]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d04e      	beq.n	8000438 <update_Bullets+0xb8>
			continue;
		}

		if(Bullets[i].y >= 128){
 800039a:	4a70      	ldr	r2, [pc, #448]	@ (800055c <update_Bullets+0x1dc>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	4413      	add	r3, r2
 80003a2:	785b      	ldrb	r3, [r3, #1]
 80003a4:	b25b      	sxtb	r3, r3
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	da13      	bge.n	80003d2 <update_Bullets+0x52>
			Bullets[i].isActive = 0;
 80003aa:	4a6c      	ldr	r2, [pc, #432]	@ (800055c <update_Bullets+0x1dc>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	4413      	add	r3, r2
 80003b2:	2200      	movs	r2, #0
 80003b4:	70da      	strb	r2, [r3, #3]
			ST7735_DrawPixel(Bullets[i].x , Bullets[i].y , 0x0000);
 80003b6:	4a69      	ldr	r2, [pc, #420]	@ (800055c <update_Bullets+0x1dc>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80003be:	4618      	mov	r0, r3
 80003c0:	4a66      	ldr	r2, [pc, #408]	@ (800055c <update_Bullets+0x1dc>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	785b      	ldrb	r3, [r3, #1]
 80003ca:	2200      	movs	r2, #0
 80003cc:	4619      	mov	r1, r3
 80003ce:	f001 fb93 	bl	8001af8 <ST7735_DrawPixel>
		}

		ST7735_DrawPixel(Bullets[i].x , Bullets[i].y , 0x0000);
 80003d2:	4a62      	ldr	r2, [pc, #392]	@ (800055c <update_Bullets+0x1dc>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80003da:	4618      	mov	r0, r3
 80003dc:	4a5f      	ldr	r2, [pc, #380]	@ (800055c <update_Bullets+0x1dc>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4413      	add	r3, r2
 80003e4:	785b      	ldrb	r3, [r3, #1]
 80003e6:	2200      	movs	r2, #0
 80003e8:	4619      	mov	r1, r3
 80003ea:	f001 fb85 	bl	8001af8 <ST7735_DrawPixel>
		Bullets[i].y -= Bullets[i].speed;
 80003ee:	4a5b      	ldr	r2, [pc, #364]	@ (800055c <update_Bullets+0x1dc>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	4413      	add	r3, r2
 80003f6:	785a      	ldrb	r2, [r3, #1]
 80003f8:	4958      	ldr	r1, [pc, #352]	@ (800055c <update_Bullets+0x1dc>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	440b      	add	r3, r1
 8000400:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	1ad3      	subs	r3, r2, r3
 8000408:	b2d9      	uxtb	r1, r3
 800040a:	4a54      	ldr	r2, [pc, #336]	@ (800055c <update_Bullets+0x1dc>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	4413      	add	r3, r2
 8000412:	460a      	mov	r2, r1
 8000414:	705a      	strb	r2, [r3, #1]
		ST7735_DrawPixel(Bullets[i].x , Bullets[i].y , playerBulletColour);
 8000416:	4a51      	ldr	r2, [pc, #324]	@ (800055c <update_Bullets+0x1dc>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800041e:	4618      	mov	r0, r3
 8000420:	4a4e      	ldr	r2, [pc, #312]	@ (800055c <update_Bullets+0x1dc>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	785b      	ldrb	r3, [r3, #1]
 800042a:	4619      	mov	r1, r3
 800042c:	4b4c      	ldr	r3, [pc, #304]	@ (8000560 <update_Bullets+0x1e0>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	461a      	mov	r2, r3
 8000432:	f001 fb61 	bl	8001af8 <ST7735_DrawPixel>
 8000436:	e000      	b.n	800043a <update_Bullets+0xba>
			continue;
 8000438:	bf00      	nop
	for(int i = 0 ; i < MAXBULLETS ; i++){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	3301      	adds	r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2b7f      	cmp	r3, #127	@ 0x7f
 8000444:	dda2      	ble.n	800038c <update_Bullets+0xc>
	}

	for(int i = 0 ; i < MAXENEMYBULLETS ; i++){
 8000446:	2300      	movs	r3, #0
 8000448:	603b      	str	r3, [r7, #0]
 800044a:	e07d      	b.n	8000548 <update_Bullets+0x1c8>
		if(!evilBullets[i].isActive){
 800044c:	4945      	ldr	r1, [pc, #276]	@ (8000564 <update_Bullets+0x1e4>)
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	4613      	mov	r3, r2
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	4413      	add	r3, r2
 8000456:	440b      	add	r3, r1
 8000458:	3304      	adds	r3, #4
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d06f      	beq.n	8000540 <update_Bullets+0x1c0>
			continue;
		}
		if(evilBullets[i].y >= 128){
 8000460:	4940      	ldr	r1, [pc, #256]	@ (8000564 <update_Bullets+0x1e4>)
 8000462:	683a      	ldr	r2, [r7, #0]
 8000464:	4613      	mov	r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	4413      	add	r3, r2
 800046a:	440b      	add	r3, r1
 800046c:	3301      	adds	r3, #1
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	b25b      	sxtb	r3, r3
 8000472:	2b00      	cmp	r3, #0
 8000474:	da1c      	bge.n	80004b0 <update_Bullets+0x130>
			evilBullets[i].isActive = 0;
 8000476:	493b      	ldr	r1, [pc, #236]	@ (8000564 <update_Bullets+0x1e4>)
 8000478:	683a      	ldr	r2, [r7, #0]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	440b      	add	r3, r1
 8000482:	3304      	adds	r3, #4
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
			ST7735_DrawPixel(evilBullets[i].x , evilBullets[i].y , 0x0000);
 8000488:	4936      	ldr	r1, [pc, #216]	@ (8000564 <update_Bullets+0x1e4>)
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	4613      	mov	r3, r2
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	4413      	add	r3, r2
 8000492:	440b      	add	r3, r1
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	4618      	mov	r0, r3
 8000498:	4932      	ldr	r1, [pc, #200]	@ (8000564 <update_Bullets+0x1e4>)
 800049a:	683a      	ldr	r2, [r7, #0]
 800049c:	4613      	mov	r3, r2
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	4413      	add	r3, r2
 80004a2:	440b      	add	r3, r1
 80004a4:	3301      	adds	r3, #1
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2200      	movs	r2, #0
 80004aa:	4619      	mov	r1, r3
 80004ac:	f001 fb24 	bl	8001af8 <ST7735_DrawPixel>
		}

		ST7735_DrawPixel(evilBullets[i].x , evilBullets[i].y , 0x0000);
 80004b0:	492c      	ldr	r1, [pc, #176]	@ (8000564 <update_Bullets+0x1e4>)
 80004b2:	683a      	ldr	r2, [r7, #0]
 80004b4:	4613      	mov	r3, r2
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	4413      	add	r3, r2
 80004ba:	440b      	add	r3, r1
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	4618      	mov	r0, r3
 80004c0:	4928      	ldr	r1, [pc, #160]	@ (8000564 <update_Bullets+0x1e4>)
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	4613      	mov	r3, r2
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4413      	add	r3, r2
 80004ca:	440b      	add	r3, r1
 80004cc:	3301      	adds	r3, #1
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2200      	movs	r2, #0
 80004d2:	4619      	mov	r1, r3
 80004d4:	f001 fb10 	bl	8001af8 <ST7735_DrawPixel>
		evilBullets[i].y -= evilBullets[i].dy;
 80004d8:	4922      	ldr	r1, [pc, #136]	@ (8000564 <update_Bullets+0x1e4>)
 80004da:	683a      	ldr	r2, [r7, #0]
 80004dc:	4613      	mov	r3, r2
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	4413      	add	r3, r2
 80004e2:	440b      	add	r3, r1
 80004e4:	3301      	adds	r3, #1
 80004e6:	7819      	ldrb	r1, [r3, #0]
 80004e8:	481e      	ldr	r0, [pc, #120]	@ (8000564 <update_Bullets+0x1e4>)
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	4613      	mov	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	4403      	add	r3, r0
 80004f4:	3303      	adds	r3, #3
 80004f6:	f993 3000 	ldrsb.w	r3, [r3]
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	1acb      	subs	r3, r1, r3
 80004fe:	b2d8      	uxtb	r0, r3
 8000500:	4918      	ldr	r1, [pc, #96]	@ (8000564 <update_Bullets+0x1e4>)
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	4613      	mov	r3, r2
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4413      	add	r3, r2
 800050a:	440b      	add	r3, r1
 800050c:	3301      	adds	r3, #1
 800050e:	4602      	mov	r2, r0
 8000510:	701a      	strb	r2, [r3, #0]
		ST7735_DrawPixel(evilBullets[i].x , evilBullets[i].y , EnemyBulletColour);
 8000512:	4914      	ldr	r1, [pc, #80]	@ (8000564 <update_Bullets+0x1e4>)
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	4613      	mov	r3, r2
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	4413      	add	r3, r2
 800051c:	440b      	add	r3, r1
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	4910      	ldr	r1, [pc, #64]	@ (8000564 <update_Bullets+0x1e4>)
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	4613      	mov	r3, r2
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	4413      	add	r3, r2
 800052c:	440b      	add	r3, r1
 800052e:	3301      	adds	r3, #1
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <update_Bullets+0x1e8>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	f001 fadd 	bl	8001af8 <ST7735_DrawPixel>
 800053e:	e000      	b.n	8000542 <update_Bullets+0x1c2>
			continue;
 8000540:	bf00      	nop
	for(int i = 0 ; i < MAXENEMYBULLETS ; i++){
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2b31      	cmp	r3, #49	@ 0x31
 800054c:	f77f af7e 	ble.w	800044c <update_Bullets+0xcc>

	}
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000520 	.word	0x20000520
 8000560:	2000011c 	.word	0x2000011c
 8000564:	20000720 	.word	0x20000720
 8000568:	2000011e 	.word	0x2000011e

0800056c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0

		return;

	}*/

	for (int i = 0; i < MAXBULLETS; i++) {
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	e028      	b.n	80005ca <EXTI2_IRQHandler+0x5e>
	            if (!Bullets[i].isActive) {
 8000578:	4a1b      	ldr	r2, [pc, #108]	@ (80005e8 <EXTI2_IRQHandler+0x7c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4413      	add	r3, r2
 8000580:	78db      	ldrb	r3, [r3, #3]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d11e      	bne.n	80005c4 <EXTI2_IRQHandler+0x58>
	                Bullets[i].x = playerObj.x+5;
 8000586:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <EXTI2_IRQHandler+0x80>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	3305      	adds	r3, #5
 800058c:	b2d9      	uxtb	r1, r3
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <EXTI2_IRQHandler+0x7c>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	                Bullets[i].y = playerObj.y+1;
 8000596:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <EXTI2_IRQHandler+0x80>)
 8000598:	785b      	ldrb	r3, [r3, #1]
 800059a:	3301      	adds	r3, #1
 800059c:	b2d9      	uxtb	r1, r3
 800059e:	4a12      	ldr	r2, [pc, #72]	@ (80005e8 <EXTI2_IRQHandler+0x7c>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	4413      	add	r3, r2
 80005a6:	460a      	mov	r2, r1
 80005a8:	705a      	strb	r2, [r3, #1]
	                Bullets[i].speed = 4;
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <EXTI2_IRQHandler+0x7c>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	2204      	movs	r2, #4
 80005b4:	709a      	strb	r2, [r3, #2]
	                Bullets[i].isActive = 1;
 80005b6:	4a0c      	ldr	r2, [pc, #48]	@ (80005e8 <EXTI2_IRQHandler+0x7c>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	4413      	add	r3, r2
 80005be:	2201      	movs	r2, #1
 80005c0:	70da      	strb	r2, [r3, #3]
	                break;
 80005c2:	e005      	b.n	80005d0 <EXTI2_IRQHandler+0x64>
	for (int i = 0; i < MAXBULLETS; i++) {
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3301      	adds	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80005ce:	ddd3      	ble.n	8000578 <EXTI2_IRQHandler+0xc>
	            }
	}

	EXTI->PR |= EXTI_PR_PR3;
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <EXTI2_IRQHandler+0x84>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a06      	ldr	r2, [pc, #24]	@ (80005f0 <EXTI2_IRQHandler+0x84>)
 80005d6:	f043 0308 	orr.w	r3, r3, #8
 80005da:	6153      	str	r3, [r2, #20]

}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000520 	.word	0x20000520
 80005ec:	20000114 	.word	0x20000114
 80005f0:	40010400 	.word	0x40010400

080005f4 <updateEnemyStates>:
//	ST7735_DrawImage(playerObj.x , playerObj.y , 9 , 9 , player_ship_flat);
//	EXTI->PR |= EXTI_PR_PR1;
//
//}
uint8_t deathAnimationTicks = 20;
void updateEnemyStates(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 20 ; i++){
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	e105      	b.n	800080c <updateEnemyStates+0x218>
		if(enemyList[i].isAlive == 0){
 8000600:	4987      	ldr	r1, [pc, #540]	@ (8000820 <updateEnemyStates+0x22c>)
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	440b      	add	r3, r1
 800060e:	3302      	adds	r3, #2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	f000 80f0 	beq.w	80007f8 <updateEnemyStates+0x204>
			continue;
		}else if(enemyList[i].isDying == 1){
 8000618:	4981      	ldr	r1, [pc, #516]	@ (8000820 <updateEnemyStates+0x22c>)
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	440b      	add	r3, r1
 8000626:	3303      	adds	r3, #3
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d146      	bne.n	80006bc <updateEnemyStates+0xc8>
			if(!(enemyList[i].ticksSinceLastChange == deathAnimationTicks)) continue;
 800062e:	497c      	ldr	r1, [pc, #496]	@ (8000820 <updateEnemyStates+0x22c>)
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4613      	mov	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	440b      	add	r3, r1
 800063c:	3307      	adds	r3, #7
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	4b78      	ldr	r3, [pc, #480]	@ (8000824 <updateEnemyStates+0x230>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	429a      	cmp	r2, r3
 8000646:	f040 80d9 	bne.w	80007fc <updateEnemyStates+0x208>
			enemyList[i].isDying++ ;
 800064a:	4975      	ldr	r1, [pc, #468]	@ (8000820 <updateEnemyStates+0x22c>)
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	4613      	mov	r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	440b      	add	r3, r1
 8000658:	3303      	adds	r3, #3
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b2d8      	uxtb	r0, r3
 8000660:	496f      	ldr	r1, [pc, #444]	@ (8000820 <updateEnemyStates+0x22c>)
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	4613      	mov	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	440b      	add	r3, r1
 800066e:	3303      	adds	r3, #3
 8000670:	4602      	mov	r2, r0
 8000672:	701a      	strb	r2, [r3, #0]
			ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_dying2);
 8000674:	496a      	ldr	r1, [pc, #424]	@ (8000820 <updateEnemyStates+0x22c>)
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	4613      	mov	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4413      	add	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	440b      	add	r3, r1
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	4966      	ldr	r1, [pc, #408]	@ (8000820 <updateEnemyStates+0x22c>)
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4613      	mov	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4413      	add	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	440b      	add	r3, r1
 8000694:	3301      	adds	r3, #1
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	4b63      	ldr	r3, [pc, #396]	@ (8000828 <updateEnemyStates+0x234>)
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2308      	movs	r3, #8
 80006a0:	2208      	movs	r2, #8
 80006a2:	f001 fbb6 	bl	8001e12 <ST7735_DrawImage>
			enemyList[i].ticksSinceLastChange = 0;
 80006a6:	495e      	ldr	r1, [pc, #376]	@ (8000820 <updateEnemyStates+0x22c>)
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4613      	mov	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	440b      	add	r3, r1
 80006b4:	3307      	adds	r3, #7
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e0a4      	b.n	8000806 <updateEnemyStates+0x212>
		}else if(enemyList[i].isDying == 2){
 80006bc:	4958      	ldr	r1, [pc, #352]	@ (8000820 <updateEnemyStates+0x22c>)
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4613      	mov	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	440b      	add	r3, r1
 80006ca:	3303      	adds	r3, #3
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d146      	bne.n	8000760 <updateEnemyStates+0x16c>
			if(!(enemyList[i].ticksSinceLastChange == deathAnimationTicks)) continue;
 80006d2:	4953      	ldr	r1, [pc, #332]	@ (8000820 <updateEnemyStates+0x22c>)
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4613      	mov	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	440b      	add	r3, r1
 80006e0:	3307      	adds	r3, #7
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	4b4f      	ldr	r3, [pc, #316]	@ (8000824 <updateEnemyStates+0x230>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	f040 8089 	bne.w	8000800 <updateEnemyStates+0x20c>
			enemyList[i].isDying++ ;
 80006ee:	494c      	ldr	r1, [pc, #304]	@ (8000820 <updateEnemyStates+0x22c>)
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4613      	mov	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	440b      	add	r3, r1
 80006fc:	3303      	adds	r3, #3
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	b2d8      	uxtb	r0, r3
 8000704:	4946      	ldr	r1, [pc, #280]	@ (8000820 <updateEnemyStates+0x22c>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	440b      	add	r3, r1
 8000712:	3303      	adds	r3, #3
 8000714:	4602      	mov	r2, r0
 8000716:	701a      	strb	r2, [r3, #0]
			ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_dying2);
 8000718:	4941      	ldr	r1, [pc, #260]	@ (8000820 <updateEnemyStates+0x22c>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	440b      	add	r3, r1
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	493d      	ldr	r1, [pc, #244]	@ (8000820 <updateEnemyStates+0x22c>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	440b      	add	r3, r1
 8000738:	3301      	adds	r3, #1
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	4b3a      	ldr	r3, [pc, #232]	@ (8000828 <updateEnemyStates+0x234>)
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2308      	movs	r3, #8
 8000744:	2208      	movs	r2, #8
 8000746:	f001 fb64 	bl	8001e12 <ST7735_DrawImage>
			enemyList[i].ticksSinceLastChange = 0;
 800074a:	4935      	ldr	r1, [pc, #212]	@ (8000820 <updateEnemyStates+0x22c>)
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	440b      	add	r3, r1
 8000758:	3307      	adds	r3, #7
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	e052      	b.n	8000806 <updateEnemyStates+0x212>
		}else if(enemyList[i].isDying == 3){
 8000760:	492f      	ldr	r1, [pc, #188]	@ (8000820 <updateEnemyStates+0x22c>)
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	4613      	mov	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	440b      	add	r3, r1
 800076e:	3303      	adds	r3, #3
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b03      	cmp	r3, #3
 8000774:	d147      	bne.n	8000806 <updateEnemyStates+0x212>
			if(!(enemyList[i].ticksSinceLastChange == deathAnimationTicks)) continue;
 8000776:	492a      	ldr	r1, [pc, #168]	@ (8000820 <updateEnemyStates+0x22c>)
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	440b      	add	r3, r1
 8000784:	3307      	adds	r3, #7
 8000786:	781a      	ldrb	r2, [r3, #0]
 8000788:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <updateEnemyStates+0x230>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	429a      	cmp	r2, r3
 800078e:	d139      	bne.n	8000804 <updateEnemyStates+0x210>
			enemyList[i].isAlive = 0;
 8000790:	4923      	ldr	r1, [pc, #140]	@ (8000820 <updateEnemyStates+0x22c>)
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4613      	mov	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	440b      	add	r3, r1
 800079e:	3302      	adds	r3, #2
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
			enemyList[i].isDying = 0;
 80007a4:	491e      	ldr	r1, [pc, #120]	@ (8000820 <updateEnemyStates+0x22c>)
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	440b      	add	r3, r1
 80007b2:	3303      	adds	r3, #3
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
			enemiesAlive--;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <updateEnemyStates+0x238>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	3b01      	subs	r3, #1
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <updateEnemyStates+0x238>)
 80007c2:	701a      	strb	r2, [r3, #0]
			ST7735_FillRectangleFast(enemyList[i].x , enemyList[i].y , 8 , 8 , 0x0000);
 80007c4:	4916      	ldr	r1, [pc, #88]	@ (8000820 <updateEnemyStates+0x22c>)
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	4613      	mov	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	440b      	add	r3, r1
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	4912      	ldr	r1, [pc, #72]	@ (8000820 <updateEnemyStates+0x22c>)
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	440b      	add	r3, r1
 80007e4:	3301      	adds	r3, #1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	2300      	movs	r3, #0
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2308      	movs	r3, #8
 80007f0:	2208      	movs	r2, #8
 80007f2:	f001 fa77 	bl	8001ce4 <ST7735_FillRectangleFast>
 80007f6:	e006      	b.n	8000806 <updateEnemyStates+0x212>
			continue;
 80007f8:	bf00      	nop
 80007fa:	e004      	b.n	8000806 <updateEnemyStates+0x212>
			if(!(enemyList[i].ticksSinceLastChange == deathAnimationTicks)) continue;
 80007fc:	bf00      	nop
 80007fe:	e002      	b.n	8000806 <updateEnemyStates+0x212>
			if(!(enemyList[i].ticksSinceLastChange == deathAnimationTicks)) continue;
 8000800:	bf00      	nop
 8000802:	e000      	b.n	8000806 <updateEnemyStates+0x212>
			if(!(enemyList[i].ticksSinceLastChange == deathAnimationTicks)) continue;
 8000804:	bf00      	nop
	for(int i = 0 ; i < 20 ; i++){
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3301      	adds	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b13      	cmp	r3, #19
 8000810:	f77f aef6 	ble.w	8000600 <updateEnemyStates+0xc>
		}
	}
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000018 	.word	0x20000018
 8000824:	20000120 	.word	0x20000120
 8000828:	080077ac 	.word	0x080077ac
 800082c:	2000011a 	.word	0x2000011a

08000830 <updatePlayerSpeed>:

void updatePlayerSpeed(){
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
	int8_t speed = GPIOA->IDR;
 8000836:	4b2e      	ldr	r3, [pc, #184]	@ (80008f0 <updatePlayerSpeed+0xc0>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	71fb      	strb	r3, [r7, #7]
	if((speed & 0x1B )== 0){
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 031b 	and.w	r3, r3, #27
 8000842:	2b00      	cmp	r3, #0
 8000844:	d106      	bne.n	8000854 <updatePlayerSpeed+0x24>
		playerObj.dx = 0;
 8000846:	4b2b      	ldr	r3, [pc, #172]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 8000848:	2200      	movs	r2, #0
 800084a:	709a      	strb	r2, [r3, #2]
		playerObj.dy = 0;
 800084c:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 800084e:	2200      	movs	r2, #0
 8000850:	70da      	strb	r2, [r3, #3]
		return;
 8000852:	e049      	b.n	80008e8 <updatePlayerSpeed+0xb8>
	}

	if(playerObj.dx == 0x2) speed &= ~(0x09);
 8000854:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 8000856:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d103      	bne.n	8000866 <updatePlayerSpeed+0x36>
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f023 0309 	bic.w	r3, r3, #9
 8000864:	71fb      	strb	r3, [r7, #7]
	if(playerObj.dy == 0x2) speed &= ~(0x11);
 8000866:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 8000868:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d103      	bne.n	8000878 <updatePlayerSpeed+0x48>
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f023 0311 	bic.w	r3, r3, #17
 8000876:	71fb      	strb	r3, [r7, #7]


	if(speed & DOWN_Pin) playerObj.dy++;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d008      	beq.n	8000894 <updatePlayerSpeed+0x64>
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 8000884:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	3301      	adds	r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	b25a      	sxtb	r2, r3
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 8000892:	70da      	strb	r2, [r3, #3]
	if(speed & UP_Pin) playerObj.dy--;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	2b00      	cmp	r3, #0
 800089c:	d008      	beq.n	80008b0 <updatePlayerSpeed+0x80>
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 80008a0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	3b01      	subs	r3, #1
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	b25a      	sxtb	r2, r3
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 80008ae:	70da      	strb	r2, [r3, #3]
	if(speed & LEFT_Pin) playerObj.dx--;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d008      	beq.n	80008cc <updatePlayerSpeed+0x9c>
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 80008bc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	3b01      	subs	r3, #1
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	b25a      	sxtb	r2, r3
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 80008ca:	709a      	strb	r2, [r3, #2]
	if(speed & RIGHT_Pin) playerObj.dx++;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d008      	beq.n	80008e8 <updatePlayerSpeed+0xb8>
 80008d6:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 80008d8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	3301      	adds	r3, #1
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	b25a      	sxtb	r2, r3
 80008e4:	4b03      	ldr	r3, [pc, #12]	@ (80008f4 <updatePlayerSpeed+0xc4>)
 80008e6:	709a      	strb	r2, [r3, #2]
}
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40010800 	.word	0x40010800
 80008f4:	20000114 	.word	0x20000114

080008f8 <checkIfOutOfBounds>:


int checkIfOutOfBounds(){
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
	uint8_t futureX = playerObj.x + playerObj.dx;
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <checkIfOutOfBounds+0x48>)
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <checkIfOutOfBounds+0x48>)
 8000904:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4413      	add	r3, r2
 800090c:	71fb      	strb	r3, [r7, #7]
	uint8_t futureY = playerObj.y + playerObj.dy;
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <checkIfOutOfBounds+0x48>)
 8000910:	785a      	ldrb	r2, [r3, #1]
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <checkIfOutOfBounds+0x48>)
 8000914:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4413      	add	r3, r2
 800091c:	71bb      	strb	r3, [r7, #6]

	if(futureX >= 117) {
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b74      	cmp	r3, #116	@ 0x74
 8000922:	d901      	bls.n	8000928 <checkIfOutOfBounds+0x30>
		return 1;
 8000924:	2301      	movs	r3, #1
 8000926:	e005      	b.n	8000934 <checkIfOutOfBounds+0x3c>
	}
	else  if(futureY >= 116){
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	2b73      	cmp	r3, #115	@ 0x73
 800092c:	d901      	bls.n	8000932 <checkIfOutOfBounds+0x3a>
		return 1;
 800092e:	2301      	movs	r3, #1
 8000930:	e000      	b.n	8000934 <checkIfOutOfBounds+0x3c>
	}else{
		return 0;
 8000932:	2300      	movs	r3, #0
	}

}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000114 	.word	0x20000114

08000944 <updatePlayerPosition>:

void updatePlayerPosition(){
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af02      	add	r7, sp, #8
	ST7735_FillRectangleFast(playerObj.x , playerObj.y , 12 , 11 , 0x0000);
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <updatePlayerPosition+0x74>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <updatePlayerPosition+0x74>)
 8000952:	785b      	ldrb	r3, [r3, #1]
 8000954:	4619      	mov	r1, r3
 8000956:	2300      	movs	r3, #0
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	230b      	movs	r3, #11
 800095c:	220c      	movs	r2, #12
 800095e:	f001 f9c1 	bl	8001ce4 <ST7735_FillRectangleFast>

	uint8_t outofBounds = checkIfOutOfBounds();
 8000962:	f7ff ffc9 	bl	80008f8 <checkIfOutOfBounds>
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]

	if(!outofBounds){
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d113      	bne.n	8000998 <updatePlayerPosition+0x54>
		playerObj.x += playerObj.dx ;
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <updatePlayerPosition+0x74>)
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <updatePlayerPosition+0x74>)
 8000976:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4413      	add	r3, r2
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <updatePlayerPosition+0x74>)
 8000982:	701a      	strb	r2, [r3, #0]
		playerObj.y += playerObj.dy ;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <updatePlayerPosition+0x74>)
 8000986:	785a      	ldrb	r2, [r3, #1]
 8000988:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <updatePlayerPosition+0x74>)
 800098a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4413      	add	r3, r2
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <updatePlayerPosition+0x74>)
 8000996:	705a      	strb	r2, [r3, #1]
	}


	ST7735_DrawImage(playerObj.x , playerObj.y , 12 , 11 , player_ship_flat);
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <updatePlayerPosition+0x74>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <updatePlayerPosition+0x74>)
 80009a0:	785b      	ldrb	r3, [r3, #1]
 80009a2:	4619      	mov	r1, r3
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <updatePlayerPosition+0x78>)
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	230b      	movs	r3, #11
 80009aa:	220c      	movs	r2, #12
 80009ac:	f001 fa31 	bl	8001e12 <ST7735_DrawImage>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000114 	.word	0x20000114
 80009bc:	080075a4 	.word	0x080075a4

080009c0 <createEnemyBullets>:
  */


uint8_t tickSpeed = 50;

void createEnemyBullets(uint8_t patternIteration){
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]

	for(int k = 0; k < 5 ; k++){
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e088      	b.n	8000ae2 <createEnemyBullets+0x122>
		if(enemyList[attackPattern[patternIteration][k]].isAlive && !(enemyList[attackPattern[patternIteration][k]].isDying))
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	4949      	ldr	r1, [pc, #292]	@ (8000af8 <createEnemyBullets+0x138>)
 80009d4:	4613      	mov	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	18ca      	adds	r2, r1, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4619      	mov	r1, r3
 80009e4:	4a45      	ldr	r2, [pc, #276]	@ (8000afc <createEnemyBullets+0x13c>)
 80009e6:	460b      	mov	r3, r1
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	440b      	add	r3, r1
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	4413      	add	r3, r2
 80009f0:	3302      	adds	r3, #2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d071      	beq.n	8000adc <createEnemyBullets+0x11c>
 80009f8:	79fa      	ldrb	r2, [r7, #7]
 80009fa:	493f      	ldr	r1, [pc, #252]	@ (8000af8 <createEnemyBullets+0x138>)
 80009fc:	4613      	mov	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	18ca      	adds	r2, r1, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8000afc <createEnemyBullets+0x13c>)
 8000a0e:	460b      	mov	r3, r1
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	3303      	adds	r3, #3
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d15d      	bne.n	8000adc <createEnemyBullets+0x11c>
		for (int i = 0; i < MAXENEMYBULLETS; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	e057      	b.n	8000ad6 <createEnemyBullets+0x116>
		            if (!(evilBullets[i].isActive)) {
 8000a26:	4936      	ldr	r1, [pc, #216]	@ (8000b00 <createEnemyBullets+0x140>)
 8000a28:	68ba      	ldr	r2, [r7, #8]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	3304      	adds	r3, #4
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d14a      	bne.n	8000ad0 <createEnemyBullets+0x110>
		                evilBullets[i].x = enemyList[attackPattern[patternIteration][k]].x+4;
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	492e      	ldr	r1, [pc, #184]	@ (8000af8 <createEnemyBullets+0x138>)
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	18ca      	adds	r2, r1, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000afc <createEnemyBullets+0x13c>)
 8000a50:	460b      	mov	r3, r1
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	440b      	add	r3, r1
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	b2d8      	uxtb	r0, r3
 8000a60:	4927      	ldr	r1, [pc, #156]	@ (8000b00 <createEnemyBullets+0x140>)
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	701a      	strb	r2, [r3, #0]
		                evilBullets[i].y = enemyList[attackPattern[patternIteration][k]].y+9;
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	4921      	ldr	r1, [pc, #132]	@ (8000af8 <createEnemyBullets+0x138>)
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	18ca      	adds	r2, r1, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4619      	mov	r1, r3
 8000a84:	4a1d      	ldr	r2, [pc, #116]	@ (8000afc <createEnemyBullets+0x13c>)
 8000a86:	460b      	mov	r3, r1
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	3301      	adds	r3, #1
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	3309      	adds	r3, #9
 8000a96:	b2d8      	uxtb	r0, r3
 8000a98:	4919      	ldr	r1, [pc, #100]	@ (8000b00 <createEnemyBullets+0x140>)
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	701a      	strb	r2, [r3, #0]
		                evilBullets[i].dy = -2;
 8000aaa:	4915      	ldr	r1, [pc, #84]	@ (8000b00 <createEnemyBullets+0x140>)
 8000aac:	68ba      	ldr	r2, [r7, #8]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	3303      	adds	r3, #3
 8000ab8:	22fe      	movs	r2, #254	@ 0xfe
 8000aba:	701a      	strb	r2, [r3, #0]
		                evilBullets[i].isActive = 1;
 8000abc:	4910      	ldr	r1, [pc, #64]	@ (8000b00 <createEnemyBullets+0x140>)
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4413      	add	r3, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
		                break;
 8000ace:	e005      	b.n	8000adc <createEnemyBullets+0x11c>
		for (int i = 0; i < MAXENEMYBULLETS; i++) {
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	2b31      	cmp	r3, #49	@ 0x31
 8000ada:	dda4      	ble.n	8000a26 <createEnemyBullets+0x66>
	for(int k = 0; k < 5 ; k++){
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	f77f af73 	ble.w	80009d0 <createEnemyBullets+0x10>
		            }
		}
	}

}
 8000aea:	bf00      	nop
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200000e0 	.word	0x200000e0
 8000afc:	20000018 	.word	0x20000018
 8000b00:	20000720 	.word	0x20000720

08000b04 <generateNewSpeeds>:
uint8_t negativeMask = 0x80;
void generateNewSpeeds(struct enemy* enemy) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    // Random small values between -3 and +3
    int8_t delx = (rand() % 7) - 3;
 8000b0c:	f003 f998 	bl	8003e40 <rand>
 8000b10:	4602      	mov	r2, r0
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <generateNewSpeeds+0x64>)
 8000b14:	fb83 1302 	smull	r1, r3, r3, r2
 8000b18:	4413      	add	r3, r2
 8000b1a:	1099      	asrs	r1, r3, #2
 8000b1c:	17d3      	asrs	r3, r2, #31
 8000b1e:	1ac9      	subs	r1, r1, r3
 8000b20:	460b      	mov	r3, r1
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	1a5b      	subs	r3, r3, r1
 8000b26:	1ad1      	subs	r1, r2, r3
 8000b28:	b2cb      	uxtb	r3, r1
 8000b2a:	3b03      	subs	r3, #3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73fb      	strb	r3, [r7, #15]
    int8_t dely = (rand() % 7) - 3;
 8000b30:	f003 f986 	bl	8003e40 <rand>
 8000b34:	4602      	mov	r2, r0
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <generateNewSpeeds+0x64>)
 8000b38:	fb83 1302 	smull	r1, r3, r3, r2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	1099      	asrs	r1, r3, #2
 8000b40:	17d3      	asrs	r3, r2, #31
 8000b42:	1ac9      	subs	r1, r1, r3
 8000b44:	460b      	mov	r3, r1
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	1ad1      	subs	r1, r2, r3
 8000b4c:	b2cb      	uxtb	r3, r1
 8000b4e:	3b03      	subs	r3, #3
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	73bb      	strb	r3, [r7, #14]

    enemy->dx = delx;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7bfa      	ldrb	r2, [r7, #15]
 8000b58:	721a      	strb	r2, [r3, #8]
    enemy->dy = dely;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7bba      	ldrb	r2, [r7, #14]
 8000b5e:	725a      	strb	r2, [r3, #9]
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	92492493 	.word	0x92492493

08000b6c <updateEnemyAnimations>:

void updateEnemyAnimations(){ //Change enemy animations and also their speeds
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
	  for(int i = 0 ; i < 20 ; i++){
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	e058      	b.n	8000c2a <updateEnemyAnimations+0xbe>
		  if(enemyList[i].isAlive == 0 || enemyList[i].isDying != 0){
 8000b78:	4930      	ldr	r1, [pc, #192]	@ (8000c3c <updateEnemyAnimations+0xd0>)
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	440b      	add	r3, r1
 8000b86:	3302      	adds	r3, #2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d049      	beq.n	8000c22 <updateEnemyAnimations+0xb6>
 8000b8e:	492b      	ldr	r1, [pc, #172]	@ (8000c3c <updateEnemyAnimations+0xd0>)
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d13e      	bne.n	8000c22 <updateEnemyAnimations+0xb6>
			  continue;
		  }

		  if(enemyList[i].ticksSinceLastChange == enemyList[i].ticksUntilSpriteChange){
 8000ba4:	4925      	ldr	r1, [pc, #148]	@ (8000c3c <updateEnemyAnimations+0xd0>)
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3307      	adds	r3, #7
 8000bb4:	7819      	ldrb	r1, [r3, #0]
 8000bb6:	4821      	ldr	r0, [pc, #132]	@ (8000c3c <updateEnemyAnimations+0xd0>)
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4403      	add	r3, r0
 8000bc4:	3306      	adds	r3, #6
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	d12b      	bne.n	8000c24 <updateEnemyAnimations+0xb8>
			  enemyList[i].sprite ^= 1;
 8000bcc:	491b      	ldr	r1, [pc, #108]	@ (8000c3c <updateEnemyAnimations+0xd0>)
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	440b      	add	r3, r1
 8000bda:	3305      	adds	r3, #5
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	f083 0301 	eor.w	r3, r3, #1
 8000be2:	b2d8      	uxtb	r0, r3
 8000be4:	4915      	ldr	r1, [pc, #84]	@ (8000c3c <updateEnemyAnimations+0xd0>)
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	440b      	add	r3, r1
 8000bf2:	3305      	adds	r3, #5
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	701a      	strb	r2, [r3, #0]

			  generateNewSpeeds(&enemyList[i]);
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <updateEnemyAnimations+0xd0>)
 8000c04:	4413      	add	r3, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff7c 	bl	8000b04 <generateNewSpeeds>
			  enemyList[i].ticksSinceLastChange = 0;
 8000c0c:	490b      	ldr	r1, [pc, #44]	@ (8000c3c <updateEnemyAnimations+0xd0>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	440b      	add	r3, r1
 8000c1a:	3307      	adds	r3, #7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e000      	b.n	8000c24 <updateEnemyAnimations+0xb8>
			  continue;
 8000c22:	bf00      	nop
	  for(int i = 0 ; i < 20 ; i++){
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3301      	adds	r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b13      	cmp	r3, #19
 8000c2e:	dda3      	ble.n	8000b78 <updateEnemyAnimations+0xc>
		  }

	  }
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000018 	.word	0x20000018

08000c40 <incrementTicksSinceLastAnimationChange>:

void incrementTicksSinceLastAnimationChange(){
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < 20 ; i++){
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	e017      	b.n	8000c7c <incrementTicksSinceLastAnimationChange+0x3c>
		enemyList[i].ticksSinceLastChange++;
 8000c4c:	4910      	ldr	r1, [pc, #64]	@ (8000c90 <incrementTicksSinceLastAnimationChange+0x50>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	440b      	add	r3, r1
 8000c5a:	3307      	adds	r3, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b2d8      	uxtb	r0, r3
 8000c62:	490b      	ldr	r1, [pc, #44]	@ (8000c90 <incrementTicksSinceLastAnimationChange+0x50>)
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	440b      	add	r3, r1
 8000c70:	3307      	adds	r3, #7
 8000c72:	4602      	mov	r2, r0
 8000c74:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 20 ; i++){
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b13      	cmp	r3, #19
 8000c80:	dde4      	ble.n	8000c4c <incrementTicksSinceLastAnimationChange+0xc>
	}
}
 8000c82:	bf00      	nop
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000018 	.word	0x20000018

08000c94 <enemyCollisionAvoidance>:

uint8_t threshold = 8;
void enemyCollisionAvoidance(struct enemy* enemy , int i ){ //i is the index of the enmey in the enemylist array
 8000c94:	b480      	push	{r7}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
		uint8_t currentEnemyX = enemy->x;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	73fb      	strb	r3, [r7, #15]
		uint8_t currentEnemyY = enemy->y;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	785b      	ldrb	r3, [r3, #1]
 8000ca8:	73bb      	strb	r3, [r7, #14]
		uint8_t conflict = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	75fb      	strb	r3, [r7, #23]

		uint8_t futureEnemyX = currentEnemyX + enemy->dx;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	4413      	add	r3, r2
 8000cba:	737b      	strb	r3, [r7, #13]
		uint8_t futureEnemyY = currentEnemyY + enemy->dy;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	733b      	strb	r3, [r7, #12]

		for(int k = 0 ; k < 20 ; k++){
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	e031      	b.n	8000d34 <enemyCollisionAvoidance+0xa0>
			if(k == i) continue;
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d029      	beq.n	8000d2c <enemyCollisionAvoidance+0x98>

			uint8_t delx = abs(futureEnemyX-enemyList[k].x);
 8000cd8:	7b79      	ldrb	r1, [r7, #13]
 8000cda:	481f      	ldr	r0, [pc, #124]	@ (8000d58 <enemyCollisionAvoidance+0xc4>)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4403      	add	r3, r0
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	1acb      	subs	r3, r1, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	bfb8      	it	lt
 8000cf0:	425b      	neglt	r3, r3
 8000cf2:	72fb      	strb	r3, [r7, #11]
			uint8_t dely = abs(futureEnemyY-enemyList[k].y);
 8000cf4:	7b39      	ldrb	r1, [r7, #12]
 8000cf6:	4818      	ldr	r0, [pc, #96]	@ (8000d58 <enemyCollisionAvoidance+0xc4>)
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4403      	add	r3, r0
 8000d04:	3301      	adds	r3, #1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	1acb      	subs	r3, r1, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bfb8      	it	lt
 8000d0e:	425b      	neglt	r3, r3
 8000d10:	72bb      	strb	r3, [r7, #10]

			if((delx < threshold ) && (dely < threshold ) ){
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <enemyCollisionAvoidance+0xc8>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	7afa      	ldrb	r2, [r7, #11]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d208      	bcs.n	8000d2e <enemyCollisionAvoidance+0x9a>
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <enemyCollisionAvoidance+0xc8>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	7aba      	ldrb	r2, [r7, #10]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d203      	bcs.n	8000d2e <enemyCollisionAvoidance+0x9a>
				conflict = 1 ;
 8000d26:	2301      	movs	r3, #1
 8000d28:	75fb      	strb	r3, [r7, #23]
				break ; //return early without modification if overlap found
 8000d2a:	e006      	b.n	8000d3a <enemyCollisionAvoidance+0xa6>
			if(k == i) continue;
 8000d2c:	bf00      	nop
		for(int k = 0 ; k < 20 ; k++){
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	3301      	adds	r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	2b13      	cmp	r3, #19
 8000d38:	ddca      	ble.n	8000cd0 <enemyCollisionAvoidance+0x3c>



		}

		if(!conflict){
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d105      	bne.n	8000d4c <enemyCollisionAvoidance+0xb8>
			enemy->x = futureEnemyX;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7b7a      	ldrb	r2, [r7, #13]
 8000d44:	701a      	strb	r2, [r3, #0]
			enemy->y = futureEnemyY;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7b3a      	ldrb	r2, [r7, #12]
 8000d4a:	705a      	strb	r2, [r3, #1]
		}


}
 8000d4c:	bf00      	nop
 8000d4e:	371c      	adds	r7, #28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000018 	.word	0x20000018
 8000d5c:	20000122 	.word	0x20000122

08000d60 <enemyOutOfBounds>:
uint8_t movementTicks = 2;

int enemyOutOfBounds(struct enemy* enemy){
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	uint8_t futureX = enemy->x + enemy->dx;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	73fb      	strb	r3, [r7, #15]
	uint8_t futureY = enemy->y + enemy->dy;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	785a      	ldrb	r2, [r3, #1]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4413      	add	r3, r2
 8000d86:	73bb      	strb	r3, [r7, #14]

	if(futureX >= 120) {
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	2b77      	cmp	r3, #119	@ 0x77
 8000d8c:	d901      	bls.n	8000d92 <enemyOutOfBounds+0x32>
		return 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e005      	b.n	8000d9e <enemyOutOfBounds+0x3e>
	}
	else  if(futureY >= 120){
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	2b77      	cmp	r3, #119	@ 0x77
 8000d96:	d901      	bls.n	8000d9c <enemyOutOfBounds+0x3c>
		return 1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <enemyOutOfBounds+0x3e>
	}else{
		return 0;
 8000d9c:	2300      	movs	r3, #0
	}
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <updateEnemyPositions>:
void updateEnemyPositions(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 20 ; i++){
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	e0af      	b.n	8000f14 <updateEnemyPositions+0x16c>
		if(enemyList[i].isAlive == 0 || enemyList[i].isDying != 0){
 8000db4:	495c      	ldr	r1, [pc, #368]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	440b      	add	r3, r1
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 80a0 	beq.w	8000f0c <updateEnemyPositions+0x164>
 8000dcc:	4956      	ldr	r1, [pc, #344]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	440b      	add	r3, r1
 8000dda:	3303      	adds	r3, #3
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8094 	bne.w	8000f0c <updateEnemyPositions+0x164>
			continue;
		}

		if(!enemyList[i].ticksSinceLastChange%movementTicks && !enemyList[i].ticksSinceLastChange){
 8000de4:	4950      	ldr	r1, [pc, #320]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	440b      	add	r3, r1
 8000df2:	3307      	adds	r3, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf0c      	ite	eq
 8000dfa:	2301      	moveq	r3, #1
 8000dfc:	2300      	movne	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4a4a      	ldr	r2, [pc, #296]	@ (8000f2c <updateEnemyPositions+0x184>)
 8000e02:	7812      	ldrb	r2, [r2, #0]
 8000e04:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e08:	fb01 f202 	mul.w	r2, r1, r2
 8000e0c:	1a9b      	subs	r3, r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d07d      	beq.n	8000f0e <updateEnemyPositions+0x166>
 8000e12:	4945      	ldr	r1, [pc, #276]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	440b      	add	r3, r1
 8000e20:	3307      	adds	r3, #7
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d172      	bne.n	8000f0e <updateEnemyPositions+0x166>

			uint8_t outOfBounds = enemyOutOfBounds(&enemyList[i]);
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4a3d      	ldr	r2, [pc, #244]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000e34:	4413      	add	r3, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff92 	bl	8000d60 <enemyOutOfBounds>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	70fb      	strb	r3, [r7, #3]

			ST7735_FillRectangleFast(enemyList[i].x , enemyList[i].y , 8 , 8 , 0x0000);
 8000e40:	4939      	ldr	r1, [pc, #228]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	440b      	add	r3, r1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	4935      	ldr	r1, [pc, #212]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	440b      	add	r3, r1
 8000e60:	3301      	adds	r3, #1
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	2300      	movs	r3, #0
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	f000 ff39 	bl	8001ce4 <ST7735_FillRectangleFast>


			if(!outOfBounds) enemyCollisionAvoidance(&enemyList[i] , i);
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10a      	bne.n	8000e8e <updateEnemyPositions+0xe6>
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4a29      	ldr	r2, [pc, #164]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000e84:	4413      	add	r3, r2
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff03 	bl	8000c94 <enemyCollisionAvoidance>

			 if(!enemyList[i].sprite){
 8000e8e:	4926      	ldr	r1, [pc, #152]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3305      	adds	r3, #5
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d119      	bne.n	8000ed8 <updateEnemyPositions+0x130>
				  ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_flat1);
 8000ea4:	4920      	ldr	r1, [pc, #128]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	440b      	add	r3, r1
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	491c      	ldr	r1, [pc, #112]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <updateEnemyPositions+0x188>)
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2308      	movs	r3, #8
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	f000 ff9e 	bl	8001e12 <ST7735_DrawImage>
 8000ed6:	e01a      	b.n	8000f0e <updateEnemyPositions+0x166>
			 }else{
				  ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_flat2);
 8000ed8:	4913      	ldr	r1, [pc, #76]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4613      	mov	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	440b      	add	r3, r1
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	490f      	ldr	r1, [pc, #60]	@ (8000f28 <updateEnemyPositions+0x180>)
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3301      	adds	r3, #1
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <updateEnemyPositions+0x18c>)
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2308      	movs	r3, #8
 8000f04:	2208      	movs	r2, #8
 8000f06:	f000 ff84 	bl	8001e12 <ST7735_DrawImage>
 8000f0a:	e000      	b.n	8000f0e <updateEnemyPositions+0x166>
			continue;
 8000f0c:	bf00      	nop
	for(int i = 0 ; i < 20 ; i++){
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3301      	adds	r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b13      	cmp	r3, #19
 8000f18:	f77f af4c 	ble.w	8000db4 <updateEnemyPositions+0xc>


		}

	}
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000018 	.word	0x20000018
 8000f2c:	20000123 	.word	0x20000123
 8000f30:	080076ac 	.word	0x080076ac
 8000f34:	0800772c 	.word	0x0800772c

08000f38 <gameOverScreen>:
uint8_t gameState = 0 ;
void gameOverScreen(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16
	uint8_t y_upper = 64;
 8000f3e:	2340      	movs	r3, #64	@ 0x40
 8000f40:	71fb      	strb	r3, [r7, #7]
	uint8_t y_lower = 63;
 8000f42:	233f      	movs	r3, #63	@ 0x3f
 8000f44:	71bb      	strb	r3, [r7, #6]
	for(int i = 0; i < 20 ; i++ ){
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	e020      	b.n	8000f8e <gameOverScreen+0x56>
		ST7735_FillRectangleFast(0 , y_upper , 128 , 1 , 0x0000);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	b299      	uxth	r1, r3
 8000f50:	2300      	movs	r3, #0
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2301      	movs	r3, #1
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f000 fec3 	bl	8001ce4 <ST7735_FillRectangleFast>
		HAL_Delay(100);
 8000f5e:	2064      	movs	r0, #100	@ 0x64
 8000f60:	f001 f9e4 	bl	800232c <HAL_Delay>
		ST7735_FillRectangleFast(0 , y_lower , 128 , 1 , 0x0000);
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	b299      	uxth	r1, r3
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	2280      	movs	r2, #128	@ 0x80
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 feb7 	bl	8001ce4 <ST7735_FillRectangleFast>
		HAL_Delay(100);
 8000f76:	2064      	movs	r0, #100	@ 0x64
 8000f78:	f001 f9d8 	bl	800232c <HAL_Delay>

		y_upper--;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	71fb      	strb	r3, [r7, #7]
		y_lower++;
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	3301      	adds	r3, #1
 8000f86:	71bb      	strb	r3, [r7, #6]
	for(int i = 0; i < 20 ; i++ ){
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b13      	cmp	r3, #19
 8000f92:	dddb      	ble.n	8000f4c <gameOverScreen+0x14>


	}

	ST7735_WriteString(22 , 52 , "GAME OVER" , Font_11x18 , 0xb000 , 0x0000);
 8000f94:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <gameOverScreen+0xcc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	9202      	str	r2, [sp, #8]
 8000f9a:	f44f 4230 	mov.w	r2, #45056	@ 0xb000
 8000f9e:	9201      	str	r2, [sp, #4]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	9200      	str	r2, [sp, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a18      	ldr	r2, [pc, #96]	@ (8001008 <gameOverScreen+0xd0>)
 8000fa8:	2134      	movs	r1, #52	@ 0x34
 8000faa:	2016      	movs	r0, #22
 8000fac:	f000 fe4f 	bl	8001c4e <ST7735_WriteString>

	HAL_Delay(5000);
 8000fb0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000fb4:	f001 f9ba 	bl	800232c <HAL_Delay>

	ST7735_FillScreenFast(0x0000);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 ff19 	bl	8001df0 <ST7735_FillScreenFast>
	ST7735_WriteString(9 , 64 , "Press any button" , Font_7x10 , 0xFFFF , 0x0000);
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <gameOverScreen+0xd4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	9202      	str	r2, [sp, #8]
 8000fc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fc8:	9201      	str	r2, [sp, #4]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	9200      	str	r2, [sp, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8001010 <gameOverScreen+0xd8>)
 8000fd2:	2140      	movs	r1, #64	@ 0x40
 8000fd4:	2009      	movs	r0, #9
 8000fd6:	f000 fe3a 	bl	8001c4e <ST7735_WriteString>
	ST7735_WriteString(22 , 74 , "to continue" , Font_7x10 , 0xFFFF , 0x0000);
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <gameOverScreen+0xd4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	9202      	str	r2, [sp, #8]
 8000fe0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fe4:	9201      	str	r2, [sp, #4]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	9200      	str	r2, [sp, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a09      	ldr	r2, [pc, #36]	@ (8001014 <gameOverScreen+0xdc>)
 8000fee:	214a      	movs	r1, #74	@ 0x4a
 8000ff0:	2016      	movs	r0, #22
 8000ff2:	f000 fe2c 	bl	8001c4e <ST7735_WriteString>

	gameState = 0;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <gameOverScreen+0xe0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000008 	.word	0x20000008
 8001008:	08004cb8 	.word	0x08004cb8
 800100c:	20000000 	.word	0x20000000
 8001010:	08004cc4 	.word	0x08004cc4
 8001014:	08004cd8 	.word	0x08004cd8
 8001018:	2000081a 	.word	0x2000081a

0800101c <playerCollisionLogic>:

uint8_t playerCollisionLogic(uint8_t delx , uint8_t dely){
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	460a      	mov	r2, r1
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	71bb      	strb	r3, [r7, #6]
	if(delx < 5 && dely >5){
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b04      	cmp	r3, #4
 8001030:	d804      	bhi.n	800103c <playerCollisionLogic+0x20>
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	2b05      	cmp	r3, #5
 8001036:	d901      	bls.n	800103c <playerCollisionLogic+0x20>
		return 1;
 8001038:	2301      	movs	r3, #1
 800103a:	e010      	b.n	800105e <playerCollisionLogic+0x42>
	}else if(delx > 5 && delx < 7){
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b05      	cmp	r3, #5
 8001040:	d904      	bls.n	800104c <playerCollisionLogic+0x30>
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b06      	cmp	r3, #6
 8001046:	d801      	bhi.n	800104c <playerCollisionLogic+0x30>
		return 1;
 8001048:	2301      	movs	r3, #1
 800104a:	e008      	b.n	800105e <playerCollisionLogic+0x42>
	}else if(delx > 7 && dely > 5){
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b07      	cmp	r3, #7
 8001050:	d904      	bls.n	800105c <playerCollisionLogic+0x40>
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	2b05      	cmp	r3, #5
 8001056:	d901      	bls.n	800105c <playerCollisionLogic+0x40>
		return 1;
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <playerCollisionLogic+0x42>
	}

	return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <calculatePlayerCollisions>:
void calculatePlayerCollisions(){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAXENEMYBULLETS ; i++){
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	e038      	b.n	80010e6 <calculatePlayerCollisions+0x7e>
		if(evilBullets[i].isActive == 0) continue;
 8001074:	4920      	ldr	r1, [pc, #128]	@ (80010f8 <calculatePlayerCollisions+0x90>)
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	440b      	add	r3, r1
 8001080:	3304      	adds	r3, #4
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d02a      	beq.n	80010de <calculatePlayerCollisions+0x76>


		uint8_t delx = evilBullets[i].x - playerObj.x;
 8001088:	491b      	ldr	r1, [pc, #108]	@ (80010f8 <calculatePlayerCollisions+0x90>)
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	440b      	add	r3, r1
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <calculatePlayerCollisions+0x94>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	70fb      	strb	r3, [r7, #3]
		uint8_t dely = evilBullets[i].y - playerObj.y;
 800109e:	4916      	ldr	r1, [pc, #88]	@ (80010f8 <calculatePlayerCollisions+0x90>)
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	3301      	adds	r3, #1
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <calculatePlayerCollisions+0x94>)
 80010b0:	785b      	ldrb	r3, [r3, #1]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	70bb      	strb	r3, [r7, #2]

		if(delx < 11 && dely < 12){
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	2b0a      	cmp	r3, #10
 80010ba:	d811      	bhi.n	80010e0 <calculatePlayerCollisions+0x78>
 80010bc:	78bb      	ldrb	r3, [r7, #2]
 80010be:	2b0b      	cmp	r3, #11
 80010c0:	d80e      	bhi.n	80010e0 <calculatePlayerCollisions+0x78>
			uint8_t isHit = playerCollisionLogic(delx , dely);
 80010c2:	78ba      	ldrb	r2, [r7, #2]
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffa7 	bl	800101c <playerCollisionLogic>
 80010ce:	4603      	mov	r3, r0
 80010d0:	707b      	strb	r3, [r7, #1]
			if(isHit){
 80010d2:	787b      	ldrb	r3, [r7, #1]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <calculatePlayerCollisions+0x78>
				gameOverScreen();
 80010d8:	f7ff ff2e 	bl	8000f38 <gameOverScreen>
 80010dc:	e000      	b.n	80010e0 <calculatePlayerCollisions+0x78>
		if(evilBullets[i].isActive == 0) continue;
 80010de:	bf00      	nop
	for(int i = 0 ; i < MAXENEMYBULLETS ; i++){
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b31      	cmp	r3, #49	@ 0x31
 80010ea:	ddc3      	ble.n	8001074 <calculatePlayerCollisions+0xc>
			}
		}
	}
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000720 	.word	0x20000720
 80010fc:	20000114 	.word	0x20000114

08001100 <checkForVictory>:

void checkForVictory(){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
	if(enemiesAlive == 0){
 8001106:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <checkForVictory+0xd4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d15e      	bne.n	80011cc <checkForVictory+0xcc>
		    uint8_t y_upper = 64;
 800110e:	2340      	movs	r3, #64	@ 0x40
 8001110:	71fb      	strb	r3, [r7, #7]
			uint8_t y_lower = 63;
 8001112:	233f      	movs	r3, #63	@ 0x3f
 8001114:	71bb      	strb	r3, [r7, #6]
			for(int i = 0; i < 20 ; i++ ){
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	e020      	b.n	800115e <checkForVictory+0x5e>
				ST7735_FillRectangleFast(0 , y_upper , 128 , 1 , 0x0000);
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	b299      	uxth	r1, r3
 8001120:	2300      	movs	r3, #0
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2280      	movs	r2, #128	@ 0x80
 8001128:	2000      	movs	r0, #0
 800112a:	f000 fddb 	bl	8001ce4 <ST7735_FillRectangleFast>
				HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	@ 0x64
 8001130:	f001 f8fc 	bl	800232c <HAL_Delay>
				ST7735_FillRectangleFast(0 , y_lower , 128 , 1 , 0x0000);
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	b299      	uxth	r1, r3
 8001138:	2300      	movs	r3, #0
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	2280      	movs	r2, #128	@ 0x80
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fdcf 	bl	8001ce4 <ST7735_FillRectangleFast>
				HAL_Delay(100);
 8001146:	2064      	movs	r0, #100	@ 0x64
 8001148:	f001 f8f0 	bl	800232c <HAL_Delay>

				y_upper--;
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	3b01      	subs	r3, #1
 8001150:	71fb      	strb	r3, [r7, #7]
				y_lower++;
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	3301      	adds	r3, #1
 8001156:	71bb      	strb	r3, [r7, #6]
			for(int i = 0; i < 20 ; i++ ){
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2b13      	cmp	r3, #19
 8001162:	dddb      	ble.n	800111c <checkForVictory+0x1c>


			}

			ST7735_WriteString(22 , 52 , "YOU WIN" , Font_11x18 , 0xffc0 , 0x0000);
 8001164:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <checkForVictory+0xd8>)
 8001166:	2200      	movs	r2, #0
 8001168:	9202      	str	r2, [sp, #8]
 800116a:	f64f 72c0 	movw	r2, #65472	@ 0xffc0
 800116e:	9201      	str	r2, [sp, #4]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	9200      	str	r2, [sp, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a19      	ldr	r2, [pc, #100]	@ (80011dc <checkForVictory+0xdc>)
 8001178:	2134      	movs	r1, #52	@ 0x34
 800117a:	2016      	movs	r0, #22
 800117c:	f000 fd67 	bl	8001c4e <ST7735_WriteString>

			HAL_Delay(5000);
 8001180:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001184:	f001 f8d2 	bl	800232c <HAL_Delay>

			ST7735_FillScreenFast(0x0000);
 8001188:	2000      	movs	r0, #0
 800118a:	f000 fe31 	bl	8001df0 <ST7735_FillScreenFast>
			ST7735_WriteString(9 , 64 , "Press any button" , Font_7x10 , 0xFFFF , 0x0000);
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <checkForVictory+0xe0>)
 8001190:	2200      	movs	r2, #0
 8001192:	9202      	str	r2, [sp, #8]
 8001194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001198:	9201      	str	r2, [sp, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	9200      	str	r2, [sp, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <checkForVictory+0xe4>)
 80011a2:	2140      	movs	r1, #64	@ 0x40
 80011a4:	2009      	movs	r0, #9
 80011a6:	f000 fd52 	bl	8001c4e <ST7735_WriteString>
			ST7735_WriteString(22 , 74 , "to continue" , Font_7x10 , 0xFFFF , 0x0000);
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <checkForVictory+0xe0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	9202      	str	r2, [sp, #8]
 80011b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b4:	9201      	str	r2, [sp, #4]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	9200      	str	r2, [sp, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <checkForVictory+0xe8>)
 80011be:	214a      	movs	r1, #74	@ 0x4a
 80011c0:	2016      	movs	r0, #22
 80011c2:	f000 fd44 	bl	8001c4e <ST7735_WriteString>

			gameState = 0;
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <checkForVictory+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
	}
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2000011a 	.word	0x2000011a
 80011d8:	20000008 	.word	0x20000008
 80011dc:	08004ce4 	.word	0x08004ce4
 80011e0:	20000000 	.word	0x20000000
 80011e4:	08004cc4 	.word	0x08004cc4
 80011e8:	08004cd8 	.word	0x08004cd8
 80011ec:	2000081a 	.word	0x2000081a

080011f0 <killAll>:

void killAll(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	for(int i = 0 ; i  < 20 ; i++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	e00c      	b.n	8001216 <killAll+0x26>
		killEnemy(&enemyList[i]);
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4a08      	ldr	r2, [pc, #32]	@ (8001228 <killAll+0x38>)
 8001208:	4413      	add	r3, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f80a 	bl	8000224 <killEnemy>
	for(int i = 0 ; i  < 20 ; i++){
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3301      	adds	r3, #1
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b13      	cmp	r3, #19
 800121a:	ddef      	ble.n	80011fc <killAll+0xc>
	}
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000018 	.word	0x20000018

0800122c <checkForCheats>:

void checkForCheats(void){
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	if((GPIOA->IDR & 0x001F) == 0x001F){
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <checkForCheats+0x18>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	2b1f      	cmp	r3, #31
 800123a:	d101      	bne.n	8001240 <checkForCheats+0x14>
		killAll();
 800123c:	f7ff ffd8 	bl	80011f0 <killAll>
	}
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40010800 	.word	0x40010800

08001248 <main>:

 //0 is the screen , 1 means its in play , 2 means you died
uint8_t ticksForAttack = 30;
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f001 f80b 	bl	8002268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f9bb 	bl	80015cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f000 fa91 	bl	800177c <MX_GPIO_Init>
  MX_DMA_Init();
 800125a:	f000 fa71 	bl	8001740 <MX_DMA_Init>
  MX_SPI2_Init();
 800125e:	f000 fa15 	bl	800168c <MX_SPI2_Init>
  MX_USB_PCD_Init();
 8001262:	f000 fa4b 	bl	80016fc <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8001266:	f000 fc2d 	bl	8001ac4 <ST7735_Init>
  ST7735_FillScreenFast(0x0000);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 fdc0 	bl	8001df0 <ST7735_FillScreenFast>
  ST7735_WriteString(56 , 64 , "EDW Project" , Font_16x26 , 0x4323 , 0x0000);
 8001270:	4bae      	ldr	r3, [pc, #696]	@ (800152c <main+0x2e4>)
 8001272:	2200      	movs	r2, #0
 8001274:	9202      	str	r2, [sp, #8]
 8001276:	f244 3223 	movw	r2, #17187	@ 0x4323
 800127a:	9201      	str	r2, [sp, #4]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	9200      	str	r2, [sp, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4aab      	ldr	r2, [pc, #684]	@ (8001530 <main+0x2e8>)
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	2038      	movs	r0, #56	@ 0x38
 8001288:	f000 fce1 	bl	8001c4e <ST7735_WriteString>
  HAL_Delay(3000);
 800128c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001290:	f001 f84c 	bl	800232c <HAL_Delay>
  ST7735_FillScreenFast(0x0000);
 8001294:	2000      	movs	r0, #0
 8001296:	f000 fdab 	bl	8001df0 <ST7735_FillScreenFast>
  ST7735_WriteString(2,2, "Contributers:" , Font_7x10 , 0x3245 , 0x0000);
 800129a:	4ba6      	ldr	r3, [pc, #664]	@ (8001534 <main+0x2ec>)
 800129c:	2200      	movs	r2, #0
 800129e:	9202      	str	r2, [sp, #8]
 80012a0:	f243 2245 	movw	r2, #12869	@ 0x3245
 80012a4:	9201      	str	r2, [sp, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	9200      	str	r2, [sp, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4aa2      	ldr	r2, [pc, #648]	@ (8001538 <main+0x2f0>)
 80012ae:	2102      	movs	r1, #2
 80012b0:	2002      	movs	r0, #2
 80012b2:	f000 fccc 	bl	8001c4e <ST7735_WriteString>
  ST7735_WriteString(2 , 22 ,"Inderpreet Singh" , Font_7x10 , 0xAE89 , 0x0000);
 80012b6:	4b9f      	ldr	r3, [pc, #636]	@ (8001534 <main+0x2ec>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	9202      	str	r2, [sp, #8]
 80012bc:	f64a 6289 	movw	r2, #44681	@ 0xae89
 80012c0:	9201      	str	r2, [sp, #4]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	9200      	str	r2, [sp, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a9c      	ldr	r2, [pc, #624]	@ (800153c <main+0x2f4>)
 80012ca:	2116      	movs	r1, #22
 80012cc:	2002      	movs	r0, #2
 80012ce:	f000 fcbe 	bl	8001c4e <ST7735_WriteString>
  ST7735_WriteString(10 , 32 ,"Design &" , Font_7x10 , 0xAE89 , 0x0000);
 80012d2:	4b98      	ldr	r3, [pc, #608]	@ (8001534 <main+0x2ec>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	9202      	str	r2, [sp, #8]
 80012d8:	f64a 6289 	movw	r2, #44681	@ 0xae89
 80012dc:	9201      	str	r2, [sp, #4]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	9200      	str	r2, [sp, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a96      	ldr	r2, [pc, #600]	@ (8001540 <main+0x2f8>)
 80012e6:	2120      	movs	r1, #32
 80012e8:	200a      	movs	r0, #10
 80012ea:	f000 fcb0 	bl	8001c4e <ST7735_WriteString>
  ST7735_WriteString(10 , 42 ,"Programming" , Font_7x10 , 0xAE89 , 0x0000);
 80012ee:	4b91      	ldr	r3, [pc, #580]	@ (8001534 <main+0x2ec>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	9202      	str	r2, [sp, #8]
 80012f4:	f64a 6289 	movw	r2, #44681	@ 0xae89
 80012f8:	9201      	str	r2, [sp, #4]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	9200      	str	r2, [sp, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a90      	ldr	r2, [pc, #576]	@ (8001544 <main+0x2fc>)
 8001302:	212a      	movs	r1, #42	@ 0x2a
 8001304:	200a      	movs	r0, #10
 8001306:	f000 fca2 	bl	8001c4e <ST7735_WriteString>
  ST7735_WriteString(2 , 52 ,"Yash Dharia" , Font_7x10 , 0xAE89 , 0x0000);
 800130a:	4b8a      	ldr	r3, [pc, #552]	@ (8001534 <main+0x2ec>)
 800130c:	2200      	movs	r2, #0
 800130e:	9202      	str	r2, [sp, #8]
 8001310:	f64a 6289 	movw	r2, #44681	@ 0xae89
 8001314:	9201      	str	r2, [sp, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	9200      	str	r2, [sp, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a8a      	ldr	r2, [pc, #552]	@ (8001548 <main+0x300>)
 800131e:	2134      	movs	r1, #52	@ 0x34
 8001320:	2002      	movs	r0, #2
 8001322:	f000 fc94 	bl	8001c4e <ST7735_WriteString>
  ST7735_WriteString(10 , 62 ,"Enclosure Design" , Font_7x10 , 0xAE89 , 0x0000);
 8001326:	4b83      	ldr	r3, [pc, #524]	@ (8001534 <main+0x2ec>)
 8001328:	2200      	movs	r2, #0
 800132a:	9202      	str	r2, [sp, #8]
 800132c:	f64a 6289 	movw	r2, #44681	@ 0xae89
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a84      	ldr	r2, [pc, #528]	@ (800154c <main+0x304>)
 800133a:	213e      	movs	r1, #62	@ 0x3e
 800133c:	200a      	movs	r0, #10
 800133e:	f000 fc86 	bl	8001c4e <ST7735_WriteString>
  ST7735_WriteString(2 , 72 ,"Anubhav" , Font_7x10 , 0xAE89 , 0x0000);
 8001342:	4b7c      	ldr	r3, [pc, #496]	@ (8001534 <main+0x2ec>)
 8001344:	2200      	movs	r2, #0
 8001346:	9202      	str	r2, [sp, #8]
 8001348:	f64a 6289 	movw	r2, #44681	@ 0xae89
 800134c:	9201      	str	r2, [sp, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	9200      	str	r2, [sp, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a7e      	ldr	r2, [pc, #504]	@ (8001550 <main+0x308>)
 8001356:	2148      	movs	r1, #72	@ 0x48
 8001358:	2002      	movs	r0, #2
 800135a:	f000 fc78 	bl	8001c4e <ST7735_WriteString>
  ST7735_WriteString(10 , 82 ,"Documentation" , Font_7x10 , 0xAE89 , 0x0000);
 800135e:	4b75      	ldr	r3, [pc, #468]	@ (8001534 <main+0x2ec>)
 8001360:	2200      	movs	r2, #0
 8001362:	9202      	str	r2, [sp, #8]
 8001364:	f64a 6289 	movw	r2, #44681	@ 0xae89
 8001368:	9201      	str	r2, [sp, #4]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	9200      	str	r2, [sp, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a78      	ldr	r2, [pc, #480]	@ (8001554 <main+0x30c>)
 8001372:	2152      	movs	r1, #82	@ 0x52
 8001374:	200a      	movs	r0, #10
 8001376:	f000 fc6a 	bl	8001c4e <ST7735_WriteString>
  HAL_Delay(4000);
 800137a:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800137e:	f000 ffd5 	bl	800232c <HAL_Delay>
  ST7735_WriteString(10 , 32 ,"2023UEC2691" , Font_7x10 , 0xAE89 , 0x0000);
 8001382:	4b6c      	ldr	r3, [pc, #432]	@ (8001534 <main+0x2ec>)
 8001384:	2200      	movs	r2, #0
 8001386:	9202      	str	r2, [sp, #8]
 8001388:	f64a 6289 	movw	r2, #44681	@ 0xae89
 800138c:	9201      	str	r2, [sp, #4]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a70      	ldr	r2, [pc, #448]	@ (8001558 <main+0x310>)
 8001396:	2120      	movs	r1, #32
 8001398:	200a      	movs	r0, #10
 800139a:	f000 fc58 	bl	8001c4e <ST7735_WriteString>
  ST7735_FillRectangleFast(0 , 62 , 128 , 10 , 0x0000);
 800139e:	2300      	movs	r3, #0
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	230a      	movs	r3, #10
 80013a4:	2280      	movs	r2, #128	@ 0x80
 80013a6:	213e      	movs	r1, #62	@ 0x3e
 80013a8:	2000      	movs	r0, #0
 80013aa:	f000 fc9b 	bl	8001ce4 <ST7735_FillRectangleFast>
  ST7735_WriteString(10 , 62 ,"2023UEC2696" , Font_7x10 , 0xAE89 , 0x0000);
 80013ae:	4b61      	ldr	r3, [pc, #388]	@ (8001534 <main+0x2ec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	9202      	str	r2, [sp, #8]
 80013b4:	f64a 6289 	movw	r2, #44681	@ 0xae89
 80013b8:	9201      	str	r2, [sp, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	9200      	str	r2, [sp, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a66      	ldr	r2, [pc, #408]	@ (800155c <main+0x314>)
 80013c2:	213e      	movs	r1, #62	@ 0x3e
 80013c4:	200a      	movs	r0, #10
 80013c6:	f000 fc42 	bl	8001c4e <ST7735_WriteString>
  ST7735_FillRectangleFast(0 , 82 , 128 , 10 , 0x0000);
 80013ca:	2300      	movs	r3, #0
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	230a      	movs	r3, #10
 80013d0:	2280      	movs	r2, #128	@ 0x80
 80013d2:	2152      	movs	r1, #82	@ 0x52
 80013d4:	2000      	movs	r0, #0
 80013d6:	f000 fc85 	bl	8001ce4 <ST7735_FillRectangleFast>
  ST7735_WriteString(10 , 82 ,"2023UEC2679" , Font_7x10 , 0xAE89 , 0x0000);
 80013da:	4b56      	ldr	r3, [pc, #344]	@ (8001534 <main+0x2ec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	9202      	str	r2, [sp, #8]
 80013e0:	f64a 6289 	movw	r2, #44681	@ 0xae89
 80013e4:	9201      	str	r2, [sp, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	9200      	str	r2, [sp, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a5c      	ldr	r2, [pc, #368]	@ (8001560 <main+0x318>)
 80013ee:	2152      	movs	r1, #82	@ 0x52
 80013f0:	200a      	movs	r0, #10
 80013f2:	f000 fc2c 	bl	8001c4e <ST7735_WriteString>
  ST7735_FillRectangleFast(0 , 42 , 128 , 10 , 0x0000);
 80013f6:	2300      	movs	r3, #0
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	230a      	movs	r3, #10
 80013fc:	2280      	movs	r2, #128	@ 0x80
 80013fe:	212a      	movs	r1, #42	@ 0x2a
 8001400:	2000      	movs	r0, #0
 8001402:	f000 fc6f 	bl	8001ce4 <ST7735_FillRectangleFast>
  HAL_Delay(3000);
 8001406:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800140a:	f000 ff8f 	bl	800232c <HAL_Delay>
  ST7735_FillScreenFast(0x0000);
 800140e:	2000      	movs	r0, #0
 8001410:	f000 fcee 	bl	8001df0 <ST7735_FillScreenFast>
  ST7735_WriteString(9 , 64 , "Press any button" , Font_7x10 , 0xFFFF , 0x0000);
 8001414:	4b47      	ldr	r3, [pc, #284]	@ (8001534 <main+0x2ec>)
 8001416:	2200      	movs	r2, #0
 8001418:	9202      	str	r2, [sp, #8]
 800141a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800141e:	9201      	str	r2, [sp, #4]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	9200      	str	r2, [sp, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a4f      	ldr	r2, [pc, #316]	@ (8001564 <main+0x31c>)
 8001428:	2140      	movs	r1, #64	@ 0x40
 800142a:	2009      	movs	r0, #9
 800142c:	f000 fc0f 	bl	8001c4e <ST7735_WriteString>
  ST7735_WriteString(22 , 74 , "to continue" , Font_7x10 , 0xFFFF , 0x0000);
 8001430:	4b40      	ldr	r3, [pc, #256]	@ (8001534 <main+0x2ec>)
 8001432:	2200      	movs	r2, #0
 8001434:	9202      	str	r2, [sp, #8]
 8001436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143a:	9201      	str	r2, [sp, #4]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	9200      	str	r2, [sp, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a49      	ldr	r2, [pc, #292]	@ (8001568 <main+0x320>)
 8001444:	214a      	movs	r1, #74	@ 0x4a
 8001446:	2016      	movs	r0, #22
 8001448:	f000 fc01 	bl	8001c4e <ST7735_WriteString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t timeSinceLastAttack = 1;
 800144c:	2301      	movs	r3, #1
 800144e:	71fb      	strb	r3, [r7, #7]
  uint8_t currentPatternIteration = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	71bb      	strb	r3, [r7, #6]
  while (1)
  {
	  if(gameState == 0){
 8001454:	4b45      	ldr	r3, [pc, #276]	@ (800156c <main+0x324>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10a      	bne.n	8001472 <main+0x22a>
		  if(GPIOA->IDR & 0x001F){
 800145c:	4b44      	ldr	r3, [pc, #272]	@ (8001570 <main+0x328>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80ac 	beq.w	80015c2 <main+0x37a>
			  gameState = 1;
 800146a:	4b40      	ldr	r3, [pc, #256]	@ (800156c <main+0x324>)
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
		  }

		  continue;
 8001470:	e0a7      	b.n	80015c2 <main+0x37a>

	  }

	  if(gameState == 1){
 8001472:	4b3e      	ldr	r3, [pc, #248]	@ (800156c <main+0x324>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d13d      	bne.n	80014f6 <main+0x2ae>
		  init_Bullets();
 800147a:	f7fe fe67 	bl	800014c <init_Bullets>
		  init_enemyBullets();
 800147e:	f7fe fe91 	bl	80001a4 <init_enemyBullets>
		  ST7735_FillScreenFast(0x0000);
 8001482:	2000      	movs	r0, #0
 8001484:	f000 fcb4 	bl	8001df0 <ST7735_FillScreenFast>
		  for(int i = 0 ; i <20 ; i++){
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	e01b      	b.n	80014c6 <main+0x27e>
		  	  ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_flat1 );
 800148e:	4939      	ldr	r1, [pc, #228]	@ (8001574 <main+0x32c>)
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	4934      	ldr	r1, [pc, #208]	@ (8001574 <main+0x32c>)
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	3301      	adds	r3, #1
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	4b30      	ldr	r3, [pc, #192]	@ (8001578 <main+0x330>)
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2308      	movs	r3, #8
 80014ba:	2208      	movs	r2, #8
 80014bc:	f000 fca9 	bl	8001e12 <ST7735_DrawImage>
		  for(int i = 0 ; i <20 ; i++){
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b13      	cmp	r3, #19
 80014ca:	dde0      	ble.n	800148e <main+0x246>
		    }

		    ST7735_DrawImage(playerObj.x , playerObj.y , 12 , 11 , player_ship_flat);
 80014cc:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <main+0x334>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <main+0x334>)
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4b29      	ldr	r3, [pc, #164]	@ (8001580 <main+0x338>)
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	230b      	movs	r3, #11
 80014de:	220c      	movs	r2, #12
 80014e0:	f000 fc97 	bl	8001e12 <ST7735_DrawImage>
		    gameState = 3;
 80014e4:	4b21      	ldr	r3, [pc, #132]	@ (800156c <main+0x324>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	701a      	strb	r2, [r3, #0]
		    HAL_Delay(1000);
 80014ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ee:	f000 ff1d 	bl	800232c <HAL_Delay>
		    checkForCheats();
 80014f2:	f7ff fe9b 	bl	800122c <checkForCheats>
	  }

	  if(timeSinceLastAttack%ticksForAttack == 0){
 80014f6:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <main+0x33c>)
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001500:	fb01 f202 	mul.w	r2, r1, r2
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d13d      	bne.n	8001588 <main+0x340>
		  createEnemyBullets(currentPatternIteration);
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fa56 	bl	80009c0 <createEnemyBullets>
		  if(currentPatternIteration == 10){
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	2b0a      	cmp	r3, #10
 8001518:	d101      	bne.n	800151e <main+0x2d6>
			  currentPatternIteration = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	71bb      	strb	r3, [r7, #6]
		  }
		  currentPatternIteration++;
 800151e:	79bb      	ldrb	r3, [r7, #6]
 8001520:	3301      	adds	r3, #1
 8001522:	71bb      	strb	r3, [r7, #6]
		  timeSinceLastAttack = 1;
 8001524:	2301      	movs	r3, #1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	e031      	b.n	800158e <main+0x346>
 800152a:	bf00      	nop
 800152c:	20000010 	.word	0x20000010
 8001530:	08004cec 	.word	0x08004cec
 8001534:	20000000 	.word	0x20000000
 8001538:	08004cf8 	.word	0x08004cf8
 800153c:	08004d08 	.word	0x08004d08
 8001540:	08004d1c 	.word	0x08004d1c
 8001544:	08004d28 	.word	0x08004d28
 8001548:	08004d34 	.word	0x08004d34
 800154c:	08004d40 	.word	0x08004d40
 8001550:	08004d54 	.word	0x08004d54
 8001554:	08004d5c 	.word	0x08004d5c
 8001558:	08004d6c 	.word	0x08004d6c
 800155c:	08004d78 	.word	0x08004d78
 8001560:	08004d84 	.word	0x08004d84
 8001564:	08004cc4 	.word	0x08004cc4
 8001568:	08004cd8 	.word	0x08004cd8
 800156c:	2000081a 	.word	0x2000081a
 8001570:	40010800 	.word	0x40010800
 8001574:	20000018 	.word	0x20000018
 8001578:	080076ac 	.word	0x080076ac
 800157c:	20000114 	.word	0x20000114
 8001580:	080075a4 	.word	0x080075a4
 8001584:	20000124 	.word	0x20000124
	  }else{
		  timeSinceLastAttack++;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	3301      	adds	r3, #1
 800158c:	71fb      	strb	r3, [r7, #7]
	  }

	  checkForVictory();
 800158e:	f7ff fdb7 	bl	8001100 <checkForVictory>
	  updatePlayerSpeed();
 8001592:	f7ff f94d 	bl	8000830 <updatePlayerSpeed>
	  updatePlayerPosition();
 8001596:	f7ff f9d5 	bl	8000944 <updatePlayerPosition>
	  update_Bullets();
 800159a:	f7fe fef1 	bl	8000380 <update_Bullets>
	  calculateCollisions();
 800159e:	f7fe fe5d 	bl	800025c <calculateCollisions>
	  calculatePlayerCollisions();
 80015a2:	f7ff fd61 	bl	8001068 <calculatePlayerCollisions>
	  updateEnemyStates();
 80015a6:	f7ff f825 	bl	80005f4 <updateEnemyStates>
	  updateEnemyAnimations();
 80015aa:	f7ff fadf 	bl	8000b6c <updateEnemyAnimations>
	  updateEnemyPositions();
 80015ae:	f7ff fbfb 	bl	8000da8 <updateEnemyPositions>

	  incrementTicksSinceLastAnimationChange();
 80015b2:	f7ff fb45 	bl	8000c40 <incrementTicksSinceLastAnimationChange>

	  HAL_Delay(tickSpeed);
 80015b6:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <main+0x380>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 feb6 	bl	800232c <HAL_Delay>
 80015c0:	e748      	b.n	8001454 <main+0x20c>
		  continue;
 80015c2:	bf00      	nop
	  if(gameState == 0){
 80015c4:	e746      	b.n	8001454 <main+0x20c>
 80015c6:	bf00      	nop
 80015c8:	20000121 	.word	0x20000121

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b094      	sub	sp, #80	@ 0x50
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015d6:	2228      	movs	r2, #40	@ 0x28
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fd73 	bl	80040c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015fc:	2301      	movs	r3, #1
 80015fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001600:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160a:	2301      	movs	r3, #1
 800160c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160e:	2302      	movs	r3, #2
 8001610:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001612:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001616:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001618:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800161c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001622:	4618      	mov	r0, r3
 8001624:	f001 fba6 	bl	8002d74 <HAL_RCC_OscConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800162e:	f000 f959 	bl	80018e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001632:	230f      	movs	r3, #15
 8001634:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800163e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001642:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2102      	movs	r1, #2
 800164e:	4618      	mov	r0, r3
 8001650:	f001 fe12 	bl	8003278 <HAL_RCC_ClockConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800165a:	f000 f943 	bl	80018e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800165e:	2310      	movs	r3, #16
 8001660:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4618      	mov	r0, r3
 800166a:	f001 ff99 	bl	80035a0 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001674:	f000 f936 	bl	80018e4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001678:	2200      	movs	r2, #0
 800167a:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 800167e:	2000      	movs	r0, #0
 8001680:	f001 fee4 	bl	800344c <HAL_RCC_MCOConfig>
}
 8001684:	bf00      	nop
 8001686:	3750      	adds	r7, #80	@ 0x50
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <MX_SPI2_Init+0x68>)
 8001692:	4a19      	ldr	r2, [pc, #100]	@ (80016f8 <MX_SPI2_Init+0x6c>)
 8001694:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001696:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <MX_SPI2_Init+0x68>)
 8001698:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800169c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <MX_SPI2_Init+0x68>)
 80016a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016a4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a6:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <MX_SPI2_Init+0x68>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_SPI2_Init+0x68>)
 80016ae:	2202      	movs	r2, #2
 80016b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <MX_SPI2_Init+0x68>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016b8:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_SPI2_Init+0x68>)
 80016ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_SPI2_Init+0x68>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <MX_SPI2_Init+0x68>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_SPI2_Init+0x68>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <MX_SPI2_Init+0x68>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_SPI2_Init+0x68>)
 80016da:	220a      	movs	r2, #10
 80016dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_SPI2_Init+0x68>)
 80016e0:	f002 f814 	bl	800370c <HAL_SPI_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80016ea:	f000 f8fb 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200001ac 	.word	0x200001ac
 80016f8:	40003800 	.word	0x40003800

080016fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001700:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <MX_USB_PCD_Init+0x3c>)
 8001702:	4a0e      	ldr	r2, [pc, #56]	@ (800173c <MX_USB_PCD_Init+0x40>)
 8001704:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <MX_USB_PCD_Init+0x3c>)
 8001708:	2208      	movs	r2, #8
 800170a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <MX_USB_PCD_Init+0x3c>)
 800170e:	2202      	movs	r2, #2
 8001710:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <MX_USB_PCD_Init+0x3c>)
 8001714:	2200      	movs	r2, #0
 8001716:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001718:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <MX_USB_PCD_Init+0x3c>)
 800171a:	2200      	movs	r2, #0
 800171c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <MX_USB_PCD_Init+0x3c>)
 8001720:	2200      	movs	r2, #0
 8001722:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001724:	4804      	ldr	r0, [pc, #16]	@ (8001738 <MX_USB_PCD_Init+0x3c>)
 8001726:	f001 fa2f 	bl	8002b88 <HAL_PCD_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001730:	f000 f8d8 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000248 	.word	0x20000248
 800173c:	40005c00 	.word	0x40005c00

08001740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <MX_DMA_Init+0x38>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	4a0b      	ldr	r2, [pc, #44]	@ (8001778 <MX_DMA_Init+0x38>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6153      	str	r3, [r2, #20]
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <MX_DMA_Init+0x38>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	200f      	movs	r0, #15
 8001764:	f000 fedd 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001768:	200f      	movs	r0, #15
 800176a:	f000 fef6 	bl	800255a <HAL_NVIC_EnableIRQ>

}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001790:	4b4f      	ldr	r3, [pc, #316]	@ (80018d0 <MX_GPIO_Init+0x154>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a4e      	ldr	r2, [pc, #312]	@ (80018d0 <MX_GPIO_Init+0x154>)
 8001796:	f043 0310 	orr.w	r3, r3, #16
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b4c      	ldr	r3, [pc, #304]	@ (80018d0 <MX_GPIO_Init+0x154>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a8:	4b49      	ldr	r3, [pc, #292]	@ (80018d0 <MX_GPIO_Init+0x154>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a48      	ldr	r2, [pc, #288]	@ (80018d0 <MX_GPIO_Init+0x154>)
 80017ae:	f043 0320 	orr.w	r3, r3, #32
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b46      	ldr	r3, [pc, #280]	@ (80018d0 <MX_GPIO_Init+0x154>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	4b43      	ldr	r3, [pc, #268]	@ (80018d0 <MX_GPIO_Init+0x154>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a42      	ldr	r2, [pc, #264]	@ (80018d0 <MX_GPIO_Init+0x154>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b40      	ldr	r3, [pc, #256]	@ (80018d0 <MX_GPIO_Init+0x154>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	4b3d      	ldr	r3, [pc, #244]	@ (80018d0 <MX_GPIO_Init+0x154>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a3c      	ldr	r2, [pc, #240]	@ (80018d0 <MX_GPIO_Init+0x154>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b3a      	ldr	r3, [pc, #232]	@ (80018d0 <MX_GPIO_Init+0x154>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f6:	4837      	ldr	r0, [pc, #220]	@ (80018d4 <MX_GPIO_Init+0x158>)
 80017f8:	f001 f9ae 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_BL_Pin|ST7735_DC_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001802:	4835      	ldr	r0, [pc, #212]	@ (80018d8 <MX_GPIO_Init+0x15c>)
 8001804:	f001 f9a8 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800180e:	4833      	ldr	r0, [pc, #204]	@ (80018dc <MX_GPIO_Init+0x160>)
 8001810:	f001 f9a2 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001814:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2302      	movs	r3, #2
 8001824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4619      	mov	r1, r3
 800182c:	4829      	ldr	r0, [pc, #164]	@ (80018d4 <MX_GPIO_Init+0x158>)
 800182e:	f001 f80f 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_Pin RIGHT_Pin LEFT_Pin UP_Pin */
  GPIO_InitStruct.Pin = DOWN_Pin|RIGHT_Pin|LEFT_Pin|UP_Pin;
 8001832:	231b      	movs	r3, #27
 8001834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	4619      	mov	r1, r3
 8001844:	4825      	ldr	r0, [pc, #148]	@ (80018dc <MX_GPIO_Init+0x160>)
 8001846:	f001 f803 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800184a:	2304      	movs	r3, #4
 800184c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800184e:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <MX_GPIO_Init+0x164>)
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	4619      	mov	r1, r3
 800185c:	481f      	ldr	r0, [pc, #124]	@ (80018dc <MX_GPIO_Init+0x160>)
 800185e:	f000 fff7 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_BL_Pin ST7735_DC_Pin */
  GPIO_InitStruct.Pin = ST7735_BL_Pin|ST7735_DC_Pin;
 8001862:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2302      	movs	r3, #2
 8001872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4619      	mov	r1, r3
 800187a:	4817      	ldr	r0, [pc, #92]	@ (80018d8 <MX_GPIO_Init+0x15c>)
 800187c:	f000 ffe8 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	4619      	mov	r1, r3
 8001894:	4811      	ldr	r0, [pc, #68]	@ (80018dc <MX_GPIO_Init+0x160>)
 8001896:	f000 ffdb 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin|ST7735_RES_Pin;
 800189a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800189e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	4619      	mov	r1, r3
 80018b2:	480a      	ldr	r0, [pc, #40]	@ (80018dc <MX_GPIO_Init+0x160>)
 80018b4:	f000 ffcc 	bl	8002850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	2008      	movs	r0, #8
 80018be:	f000 fe30 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018c2:	2008      	movs	r0, #8
 80018c4:	f000 fe49 	bl	800255a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	40010800 	.word	0x40010800
 80018e0:	10110000 	.word	0x10110000

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <Error_Handler+0x8>

080018f0 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018fa:	4802      	ldr	r0, [pc, #8]	@ (8001904 <ST7735_Select+0x14>)
 80018fc:	f001 f92c 	bl	8002b58 <HAL_GPIO_WritePin>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40010800 	.word	0x40010800

08001908 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800190c:	2201      	movs	r2, #1
 800190e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001912:	4802      	ldr	r0, [pc, #8]	@ (800191c <ST7735_Unselect+0x14>)
 8001914:	f001 f920 	bl	8002b58 <HAL_GPIO_WritePin>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40010800 	.word	0x40010800

08001920 <ST7735_Reset>:

static void ST7735_Reset() {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800192a:	4807      	ldr	r0, [pc, #28]	@ (8001948 <ST7735_Reset+0x28>)
 800192c:	f001 f914 	bl	8002b58 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001930:	2005      	movs	r0, #5
 8001932:	f000 fcfb 	bl	800232c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <ST7735_Reset+0x28>)
 800193e:	f001 f90b 	bl	8002b58 <HAL_GPIO_WritePin>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40010800 	.word	0x40010800

0800194c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800195c:	4806      	ldr	r0, [pc, #24]	@ (8001978 <ST7735_WriteCommand+0x2c>)
 800195e:	f001 f8fb 	bl	8002b58 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001962:	1df9      	adds	r1, r7, #7
 8001964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001968:	2201      	movs	r2, #1
 800196a:	4804      	ldr	r0, [pc, #16]	@ (800197c <ST7735_WriteCommand+0x30>)
 800196c:	f001 ff52 	bl	8003814 <HAL_SPI_Transmit>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40010c00 	.word	0x40010c00
 800197c:	200001ac 	.word	0x200001ac

08001980 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800198a:	2201      	movs	r2, #1
 800198c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001990:	4807      	ldr	r0, [pc, #28]	@ (80019b0 <ST7735_WriteData+0x30>)
 8001992:	f001 f8e1 	bl	8002b58 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b29a      	uxth	r2, r3
 800199a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4804      	ldr	r0, [pc, #16]	@ (80019b4 <ST7735_WriteData+0x34>)
 80019a2:	f001 ff37 	bl	8003814 <HAL_SPI_Transmit>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	200001ac 	.word	0x200001ac

080019b8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80019ca:	e034      	b.n	8001a36 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ffb7 	bl	800194c <ST7735_WriteCommand>

        numArgs = *addr++;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80019e8:	7abb      	ldrb	r3, [r7, #10]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80019f2:	7abb      	ldrb	r3, [r7, #10]
 80019f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019f8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80019fa:	7abb      	ldrb	r3, [r7, #10]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001a00:	7abb      	ldrb	r3, [r7, #10]
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffbb 	bl	8001980 <ST7735_WriteData>
            addr += numArgs;
 8001a0a:	7abb      	ldrb	r3, [r7, #10]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001a12:	89bb      	ldrh	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00e      	beq.n	8001a36 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001a22:	89bb      	ldrh	r3, [r7, #12]
 8001a24:	2bff      	cmp	r3, #255	@ 0xff
 8001a26:	d102      	bne.n	8001a2e <ST7735_ExecuteCommandList+0x76>
 8001a28:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a2c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001a2e:	89bb      	ldrh	r3, [r7, #12]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fc7b 	bl	800232c <HAL_Delay>
    while(numCommands--) {
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	1e5a      	subs	r2, r3, #1
 8001a3a:	73fa      	strb	r2, [r7, #15]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1c5      	bne.n	80019cc <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001a4a:	b590      	push	{r4, r7, lr}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4604      	mov	r4, r0
 8001a52:	4608      	mov	r0, r1
 8001a54:	4611      	mov	r1, r2
 8001a56:	461a      	mov	r2, r3
 8001a58:	4623      	mov	r3, r4
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71bb      	strb	r3, [r7, #6]
 8001a60:	460b      	mov	r3, r1
 8001a62:	717b      	strb	r3, [r7, #5]
 8001a64:	4613      	mov	r3, r2
 8001a66:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001a68:	202a      	movs	r0, #42	@ 0x2a
 8001a6a:	f7ff ff6f 	bl	800194c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001a6e:	2300      	movs	r3, #0
 8001a70:	733b      	strb	r3, [r7, #12]
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	3302      	adds	r3, #2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	737b      	strb	r3, [r7, #13]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73bb      	strb	r3, [r7, #14]
 8001a7e:	797b      	ldrb	r3, [r7, #5]
 8001a80:	3302      	adds	r3, #2
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff77 	bl	8001980 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001a92:	202b      	movs	r0, #43	@ 0x2b
 8001a94:	f7ff ff5a 	bl	800194c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001a98:	79bb      	ldrb	r3, [r7, #6]
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001aa0:	793b      	ldrb	r3, [r7, #4]
 8001aa2:	3303      	adds	r3, #3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2104      	movs	r1, #4
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff66 	bl	8001980 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001ab4:	202c      	movs	r0, #44	@ 0x2c
 8001ab6:	f7ff ff49 	bl	800194c <ST7735_WriteCommand>
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd90      	pop	{r4, r7, pc}
	...

08001ac4 <ST7735_Init>:

void ST7735_Init() {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001ac8:	f7ff ff12 	bl	80018f0 <ST7735_Select>
    ST7735_Reset();
 8001acc:	f7ff ff28 	bl	8001920 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001ad0:	4806      	ldr	r0, [pc, #24]	@ (8001aec <ST7735_Init+0x28>)
 8001ad2:	f7ff ff71 	bl	80019b8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001ad6:	4806      	ldr	r0, [pc, #24]	@ (8001af0 <ST7735_Init+0x2c>)
 8001ad8:	f7ff ff6e 	bl	80019b8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001adc:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <ST7735_Init+0x30>)
 8001ade:	f7ff ff6b 	bl	80019b8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001ae2:	f7ff ff11 	bl	8001908 <ST7735_Unselect>
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800782c 	.word	0x0800782c
 8001af0:	08007868 	.word	0x08007868
 8001af4:	08007878 	.word	0x08007878

08001af8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	80fb      	strh	r3, [r7, #6]
 8001b02:	460b      	mov	r3, r1
 8001b04:	80bb      	strh	r3, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b0e:	d823      	bhi.n	8001b58 <ST7735_DrawPixel+0x60>
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b14:	d820      	bhi.n	8001b58 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8001b16:	f7ff feeb 	bl	80018f0 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	b2d8      	uxtb	r0, r3
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	b2d9      	uxtb	r1, r3
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	88bb      	ldrh	r3, [r7, #4]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f7ff ff8a 	bl	8001a4a <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	733b      	strb	r3, [r7, #12]
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff17 	bl	8001980 <ST7735_WriteData>

    ST7735_Unselect();
 8001b52:	f7ff fed9 	bl	8001908 <ST7735_Unselect>
 8001b56:	e000      	b.n	8001b5a <ST7735_DrawPixel+0x62>
        return;
 8001b58:	bf00      	nop
}
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001b60:	b082      	sub	sp, #8
 8001b62:	b590      	push	{r4, r7, lr}
 8001b64:	b089      	sub	sp, #36	@ 0x24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	80bb      	strh	r3, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	b2d8      	uxtb	r0, r3
 8001b7a:	88bb      	ldrh	r3, [r7, #4]
 8001b7c:	b2d9      	uxtb	r1, r3
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b86:	4413      	add	r3, r2
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b2dc      	uxtb	r4, r3
 8001b8e:	88bb      	ldrh	r3, [r7, #4]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001b96:	4413      	add	r3, r2
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	f7ff ff53 	bl	8001a4a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	e043      	b.n	8001c32 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001baa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	3b20      	subs	r3, #32
 8001bb0:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	440b      	add	r3, r1
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	e029      	b.n	8001c20 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00e      	beq.n	8001bfa <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001bdc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	743b      	strb	r3, [r7, #16]
 8001be6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fec4 	bl	8001980 <ST7735_WriteData>
 8001bf8:	e00f      	b.n	8001c1a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001bfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	733b      	strb	r3, [r7, #12]
 8001c06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	2102      	movs	r1, #2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff feb3 	bl	8001980 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001c24:	461a      	mov	r2, r3
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d3cf      	bcc.n	8001bcc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001c36:	461a      	mov	r2, r3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d3b5      	bcc.n	8001baa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	3724      	adds	r7, #36	@ 0x24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001c4a:	b002      	add	sp, #8
 8001c4c:	4770      	bx	lr

08001c4e <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001c4e:	b082      	sub	sp, #8
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	603a      	str	r2, [r7, #0]
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001c62:	f7ff fe45 	bl	80018f0 <ST7735_Select>

    while(*str) {
 8001c66:	e02d      	b.n	8001cc4 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	7d3a      	ldrb	r2, [r7, #20]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c70:	dd13      	ble.n	8001c9a <ST7735_WriteString+0x4c>
            x = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001c76:	7d7b      	ldrb	r3, [r7, #21]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	88bb      	ldrh	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001c80:	88bb      	ldrh	r3, [r7, #4]
 8001c82:	7d7a      	ldrb	r2, [r7, #21]
 8001c84:	4413      	add	r3, r2
 8001c86:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c88:	dc21      	bgt.n	8001cce <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b20      	cmp	r3, #32
 8001c90:	d103      	bne.n	8001c9a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	603b      	str	r3, [r7, #0]
                continue;
 8001c98:	e014      	b.n	8001cc4 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	88b9      	ldrh	r1, [r7, #4]
 8001ca0:	88f8      	ldrh	r0, [r7, #6]
 8001ca2:	8c3b      	ldrh	r3, [r7, #32]
 8001ca4:	9302      	str	r3, [sp, #8]
 8001ca6:	8bbb      	ldrh	r3, [r7, #28]
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f7ff ff56 	bl	8001b60 <ST7735_WriteChar>
        x += font.width;
 8001cb4:	7d3b      	ldrb	r3, [r7, #20]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	4413      	add	r3, r2
 8001cbc:	80fb      	strh	r3, [r7, #6]
        str++;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1cd      	bne.n	8001c68 <ST7735_WriteString+0x1a>
 8001ccc:	e000      	b.n	8001cd0 <ST7735_WriteString+0x82>
                break;
 8001cce:	bf00      	nop
    }

    ST7735_Unselect();
 8001cd0:	f7ff fe1a 	bl	8001908 <ST7735_Unselect>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cde:	b002      	add	sp, #8
 8001ce0:	4770      	bx	lr
	...

08001ce4 <ST7735_FillRectangleFast>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4604      	mov	r4, r0
 8001cec:	4608      	mov	r0, r1
 8001cee:	4611      	mov	r1, r2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	80fb      	strh	r3, [r7, #6]
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80bb      	strh	r3, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	807b      	strh	r3, [r7, #2]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d06:	d86a      	bhi.n	8001dde <ST7735_FillRectangleFast+0xfa>
 8001d08:	88bb      	ldrh	r3, [r7, #4]
 8001d0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d0c:	d867      	bhi.n	8001dde <ST7735_FillRectangleFast+0xfa>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001d0e:	88fa      	ldrh	r2, [r7, #6]
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	4413      	add	r3, r2
 8001d14:	2b80      	cmp	r3, #128	@ 0x80
 8001d16:	dd03      	ble.n	8001d20 <ST7735_FillRectangleFast+0x3c>
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001d1e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001d20:	88ba      	ldrh	r2, [r7, #4]
 8001d22:	883b      	ldrh	r3, [r7, #0]
 8001d24:	4413      	add	r3, r2
 8001d26:	2b80      	cmp	r3, #128	@ 0x80
 8001d28:	dd03      	ble.n	8001d32 <ST7735_FillRectangleFast+0x4e>
 8001d2a:	88bb      	ldrh	r3, [r7, #4]
 8001d2c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001d30:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001d32:	f7ff fddd 	bl	80018f0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	b2d8      	uxtb	r0, r3
 8001d3a:	88bb      	ldrh	r3, [r7, #4]
 8001d3c:	b2d9      	uxtb	r1, r3
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b2dc      	uxtb	r4, r3
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	883b      	ldrh	r3, [r7, #0]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	4622      	mov	r2, r4
 8001d60:	f7ff fe73 	bl	8001a4a <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8001d64:	8c3b      	ldrh	r3, [r7, #32]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	723b      	strb	r3, [r7, #8]
 8001d6e:	8c3b      	ldrh	r3, [r7, #32]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 ffa3 	bl	8003cc4 <malloc>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8001d82:	2300      	movs	r3, #0
 8001d84:	80fb      	strh	r3, [r7, #6]
 8001d86:	e008      	b.n	8001d9a <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	893a      	ldrh	r2, [r7, #8]
 8001d92:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	3301      	adds	r3, #1
 8001d98:	80fb      	strh	r3, [r7, #6]
 8001d9a:	88fa      	ldrh	r2, [r7, #6]
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d3f2      	bcc.n	8001d88 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001da8:	480f      	ldr	r0, [pc, #60]	@ (8001de8 <ST7735_FillRectangleFast+0x104>)
 8001daa:	f000 fed5 	bl	8002b58 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001dae:	883b      	ldrh	r3, [r7, #0]
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	e00b      	b.n	8001dcc <ST7735_FillRectangleFast+0xe8>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dbe:	68f9      	ldr	r1, [r7, #12]
 8001dc0:	480a      	ldr	r0, [pc, #40]	@ (8001dec <ST7735_FillRectangleFast+0x108>)
 8001dc2:	f001 fd27 	bl	8003814 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8001dc6:	88bb      	ldrh	r3, [r7, #4]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	80bb      	strh	r3, [r7, #4]
 8001dcc:	88bb      	ldrh	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <ST7735_FillRectangleFast+0xd0>

    free(line);
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f001 ff7e 	bl	8003cd4 <free>
    ST7735_Unselect();
 8001dd8:	f7ff fd96 	bl	8001908 <ST7735_Unselect>
 8001ddc:	e000      	b.n	8001de0 <ST7735_FillRectangleFast+0xfc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001dde:	bf00      	nop
}
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40010c00 	.word	0x40010c00
 8001dec:	200001ac 	.word	0x200001ac

08001df0 <ST7735_FillScreenFast>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_FillScreenFast(uint16_t color) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	2280      	movs	r2, #128	@ 0x80
 8001e02:	2100      	movs	r1, #0
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff ff6d 	bl	8001ce4 <ST7735_FillRectangleFast>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8001e12:	b590      	push	{r4, r7, lr}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4604      	mov	r4, r0
 8001e1a:	4608      	mov	r0, r1
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4623      	mov	r3, r4
 8001e22:	80fb      	strh	r3, [r7, #6]
 8001e24:	4603      	mov	r3, r0
 8001e26:	80bb      	strh	r3, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e34:	d831      	bhi.n	8001e9a <ST7735_DrawImage+0x88>
 8001e36:	88bb      	ldrh	r3, [r7, #4]
 8001e38:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e3a:	d82e      	bhi.n	8001e9a <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8001e3c:	88fa      	ldrh	r2, [r7, #6]
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	4413      	add	r3, r2
 8001e42:	2b80      	cmp	r3, #128	@ 0x80
 8001e44:	dc2b      	bgt.n	8001e9e <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8001e46:	88ba      	ldrh	r2, [r7, #4]
 8001e48:	883b      	ldrh	r3, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2b80      	cmp	r3, #128	@ 0x80
 8001e4e:	dc28      	bgt.n	8001ea2 <ST7735_DrawImage+0x90>

    ST7735_Select();
 8001e50:	f7ff fd4e 	bl	80018f0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	b2d8      	uxtb	r0, r3
 8001e58:	88bb      	ldrh	r3, [r7, #4]
 8001e5a:	b2d9      	uxtb	r1, r3
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b2dc      	uxtb	r4, r3
 8001e6c:	88bb      	ldrh	r3, [r7, #4]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	883b      	ldrh	r3, [r7, #0]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4622      	mov	r2, r4
 8001e7e:	f7ff fde4 	bl	8001a4a <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	883a      	ldrh	r2, [r7, #0]
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	69b8      	ldr	r0, [r7, #24]
 8001e90:	f7ff fd76 	bl	8001980 <ST7735_WriteData>
    ST7735_Unselect();
 8001e94:	f7ff fd38 	bl	8001908 <ST7735_Unselect>
 8001e98:	e004      	b.n	8001ea4 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001e9a:	bf00      	nop
 8001e9c:	e002      	b.n	8001ea4 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8001e9e:	bf00      	nop
 8001ea0:	e000      	b.n	8001ea4 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8001ea2:	bf00      	nop
}
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
	...

08001eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_MspInit+0x5c>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	4a14      	ldr	r2, [pc, #80]	@ (8001f08 <HAL_MspInit+0x5c>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6193      	str	r3, [r2, #24]
 8001ebe:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_MspInit+0x5c>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_MspInit+0x5c>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a0e      	ldr	r2, [pc, #56]	@ (8001f08 <HAL_MspInit+0x5c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <HAL_MspInit+0x5c>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <HAL_MspInit+0x60>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	4a04      	ldr	r2, [pc, #16]	@ (8001f0c <HAL_MspInit+0x60>)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010000 	.word	0x40010000

08001f10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a29      	ldr	r2, [pc, #164]	@ (8001fd0 <HAL_SPI_MspInit+0xc0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d14a      	bne.n	8001fc6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f30:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <HAL_SPI_MspInit+0xc4>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	4a27      	ldr	r2, [pc, #156]	@ (8001fd4 <HAL_SPI_MspInit+0xc4>)
 8001f36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f3a:	61d3      	str	r3, [r2, #28]
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <HAL_SPI_MspInit+0xc4>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <HAL_SPI_MspInit+0xc4>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <HAL_SPI_MspInit+0xc4>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd4 <HAL_SPI_MspInit+0xc4>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f60:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001f64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	4619      	mov	r1, r3
 8001f74:	4818      	ldr	r0, [pc, #96]	@ (8001fd8 <HAL_SPI_MspInit+0xc8>)
 8001f76:	f000 fc6b 	bl	8002850 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001f7a:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_SPI_MspInit+0xcc>)
 8001f7c:	4a18      	ldr	r2, [pc, #96]	@ (8001fe0 <HAL_SPI_MspInit+0xd0>)
 8001f7e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <HAL_SPI_MspInit+0xcc>)
 8001f82:	2210      	movs	r2, #16
 8001f84:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_SPI_MspInit+0xcc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f8c:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <HAL_SPI_MspInit+0xcc>)
 8001f8e:	2280      	movs	r2, #128	@ 0x80
 8001f90:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_SPI_MspInit+0xcc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f98:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <HAL_SPI_MspInit+0xcc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <HAL_SPI_MspInit+0xcc>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <HAL_SPI_MspInit+0xcc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001faa:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <HAL_SPI_MspInit+0xcc>)
 8001fac:	f000 faf0 	bl	8002590 <HAL_DMA_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8001fb6:	f7ff fc95 	bl	80018e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_SPI_MspInit+0xcc>)
 8001fbe:	649a      	str	r2, [r3, #72]	@ 0x48
 8001fc0:	4a06      	ldr	r2, [pc, #24]	@ (8001fdc <HAL_SPI_MspInit+0xcc>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40003800 	.word	0x40003800
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	20000204 	.word	0x20000204
 8001fe0:	40020058 	.word	0x40020058

08001fe4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a09      	ldr	r2, [pc, #36]	@ (8002018 <HAL_PCD_MspInit+0x34>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10b      	bne.n	800200e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <HAL_PCD_MspInit+0x38>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	4a08      	ldr	r2, [pc, #32]	@ (800201c <HAL_PCD_MspInit+0x38>)
 8001ffc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002000:	61d3      	str	r3, [r2, #28]
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_PCD_MspInit+0x38>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	40005c00 	.word	0x40005c00
 800201c:	40021000 	.word	0x40021000

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <NMI_Handler+0x4>

08002028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <HardFault_Handler+0x4>

08002030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <MemManage_Handler+0x4>

08002038 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <BusFault_Handler+0x4>

08002040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <UsageFault_Handler+0x4>

08002048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002070:	f000 f940 	bl	80022f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <DMA1_Channel5_IRQHandler+0x10>)
 800207e:	f000 fae1 	bl	8002644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000204 	.word	0x20000204

0800208c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return 1;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <_kill>:

int _kill(int pid, int sig)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020a4:	f002 f86e 	bl	8004184 <__errno>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2216      	movs	r2, #22
 80020ac:	601a      	str	r2, [r3, #0]
  return -1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_exit>:

void _exit (int status)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffe7 	bl	800209a <_kill>
  while (1) {}    /* Make sure we hang here */
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <_exit+0x12>

080020d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e00a      	b.n	80020f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e2:	f3af 8000 	nop.w
 80020e6:	4601      	mov	r1, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf0      	blt.n	80020e2 <_read+0x12>
  }

  return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e009      	b.n	8002130 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbf1      	blt.n	800211c <_write+0x12>
  }
  return len;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_close>:

int _close(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002168:	605a      	str	r2, [r3, #4]
  return 0;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <_isatty>:

int _isatty(int file)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
	...

080021a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ac:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <_sbrk+0x5c>)
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <_sbrk+0x60>)
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b8:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <_sbrk+0x64>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	@ (800220c <_sbrk+0x68>)
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d207      	bcs.n	80021e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d4:	f001 ffd6 	bl	8004184 <__errno>
 80021d8:	4603      	mov	r3, r0
 80021da:	220c      	movs	r2, #12
 80021dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021e2:	e009      	b.n	80021f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <_sbrk+0x64>)
 80021f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20005000 	.word	0x20005000
 8002204:	00000400 	.word	0x00000400
 8002208:	2000081c 	.word	0x2000081c
 800220c:	20000970 	.word	0x20000970

08002210 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800221c:	f7ff fff8 	bl	8002210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002220:	480b      	ldr	r0, [pc, #44]	@ (8002250 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002222:	490c      	ldr	r1, [pc, #48]	@ (8002254 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002224:	4a0c      	ldr	r2, [pc, #48]	@ (8002258 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002228:	e002      	b.n	8002230 <LoopCopyDataInit>

0800222a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800222c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222e:	3304      	adds	r3, #4

08002230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002234:	d3f9      	bcc.n	800222a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002236:	4a09      	ldr	r2, [pc, #36]	@ (800225c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002238:	4c09      	ldr	r4, [pc, #36]	@ (8002260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800223c:	e001      	b.n	8002242 <LoopFillZerobss>

0800223e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002240:	3204      	adds	r2, #4

08002242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002244:	d3fb      	bcc.n	800223e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002246:	f001 ffa3 	bl	8004190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800224a:	f7fe fffd 	bl	8001248 <main>
  bx lr
 800224e:	4770      	bx	lr
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002254:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002258:	080079ac 	.word	0x080079ac
  ldr r2, =_sbss
 800225c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002260:	20000970 	.word	0x20000970

08002264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC1_2_IRQHandler>
	...

08002268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800226c:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <HAL_Init+0x28>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a07      	ldr	r2, [pc, #28]	@ (8002290 <HAL_Init+0x28>)
 8002272:	f043 0310 	orr.w	r3, r3, #16
 8002276:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002278:	2003      	movs	r0, #3
 800227a:	f000 f947 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800227e:	200f      	movs	r0, #15
 8002280:	f000 f808 	bl	8002294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002284:	f7ff fe12 	bl	8001eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40022000 	.word	0x40022000

08002294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800229c:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_InitTick+0x54>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <HAL_InitTick+0x58>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f95f 	bl	8002576 <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e00e      	b.n	80022e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d80a      	bhi.n	80022de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c8:	2200      	movs	r2, #0
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022d0:	f000 f927 	bl	8002522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d4:	4a06      	ldr	r2, [pc, #24]	@ (80022f0 <HAL_InitTick+0x5c>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000128 	.word	0x20000128
 80022ec:	20000130 	.word	0x20000130
 80022f0:	2000012c 	.word	0x2000012c

080022f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f8:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <HAL_IncTick+0x1c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <HAL_IncTick+0x20>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a03      	ldr	r2, [pc, #12]	@ (8002314 <HAL_IncTick+0x20>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	20000130 	.word	0x20000130
 8002314:	20000820 	.word	0x20000820

08002318 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return uwTick;
 800231c:	4b02      	ldr	r3, [pc, #8]	@ (8002328 <HAL_GetTick+0x10>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	20000820 	.word	0x20000820

0800232c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff fff0 	bl	8002318 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002344:	d005      	beq.n	8002352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002346:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <HAL_Delay+0x44>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002352:	bf00      	nop
 8002354:	f7ff ffe0 	bl	8002318 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d8f7      	bhi.n	8002354 <HAL_Delay+0x28>
  {
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000130 	.word	0x20000130

08002374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	@ (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db0b      	blt.n	8002402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4906      	ldr	r1, [pc, #24]	@ (800240c <__NVIC_EnableIRQ+0x34>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2001      	movs	r0, #1
 80023fa:	fa00 f202 	lsl.w	r2, r0, r2
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	@ (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	@ (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	@ 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	@ 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024ec:	f7ff ff90 	bl	8002410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff2d 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff42 	bl	80023bc <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff90 	bl	8002464 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5f 	bl	8002410 <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff35 	bl	80023d8 <__NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffa2 	bl	80024c8 <SysTick_Config>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e043      	b.n	800262e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b22      	ldr	r3, [pc, #136]	@ (8002638 <HAL_DMA_Init+0xa8>)
 80025ae:	4413      	add	r3, r2
 80025b0:	4a22      	ldr	r2, [pc, #136]	@ (800263c <HAL_DMA_Init+0xac>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	009a      	lsls	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002640 <HAL_DMA_Init+0xb0>)
 80025c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80025de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	bffdfff8 	.word	0xbffdfff8
 800263c:	cccccccd 	.word	0xcccccccd
 8002640:	40020000 	.word	0x40020000

08002644 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	2204      	movs	r2, #4
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d04f      	beq.n	800270c <HAL_DMA_IRQHandler+0xc8>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d04a      	beq.n	800270c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a66      	ldr	r2, [pc, #408]	@ (8002834 <HAL_DMA_IRQHandler+0x1f0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d029      	beq.n	80026f2 <HAL_DMA_IRQHandler+0xae>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a65      	ldr	r2, [pc, #404]	@ (8002838 <HAL_DMA_IRQHandler+0x1f4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d022      	beq.n	80026ee <HAL_DMA_IRQHandler+0xaa>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a63      	ldr	r2, [pc, #396]	@ (800283c <HAL_DMA_IRQHandler+0x1f8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01a      	beq.n	80026e8 <HAL_DMA_IRQHandler+0xa4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a62      	ldr	r2, [pc, #392]	@ (8002840 <HAL_DMA_IRQHandler+0x1fc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d012      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x9e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a60      	ldr	r2, [pc, #384]	@ (8002844 <HAL_DMA_IRQHandler+0x200>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00a      	beq.n	80026dc <HAL_DMA_IRQHandler+0x98>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002848 <HAL_DMA_IRQHandler+0x204>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d102      	bne.n	80026d6 <HAL_DMA_IRQHandler+0x92>
 80026d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026d4:	e00e      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80026da:	e00b      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80026e0:	e008      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026e6:	e005      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026ec:	e002      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026ee:	2340      	movs	r3, #64	@ 0x40
 80026f0:	e000      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026f2:	2304      	movs	r3, #4
 80026f4:	4a55      	ldr	r2, [pc, #340]	@ (800284c <HAL_DMA_IRQHandler+0x208>)
 80026f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8094 	beq.w	800282a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800270a:	e08e      	b.n	800282a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	2202      	movs	r2, #2
 8002712:	409a      	lsls	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d056      	beq.n	80027ca <HAL_DMA_IRQHandler+0x186>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d051      	beq.n	80027ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10b      	bne.n	800274c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 020a 	bic.w	r2, r2, #10
 8002742:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a38      	ldr	r2, [pc, #224]	@ (8002834 <HAL_DMA_IRQHandler+0x1f0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d029      	beq.n	80027aa <HAL_DMA_IRQHandler+0x166>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a37      	ldr	r2, [pc, #220]	@ (8002838 <HAL_DMA_IRQHandler+0x1f4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d022      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x162>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a35      	ldr	r2, [pc, #212]	@ (800283c <HAL_DMA_IRQHandler+0x1f8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01a      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x15c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a34      	ldr	r2, [pc, #208]	@ (8002840 <HAL_DMA_IRQHandler+0x1fc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d012      	beq.n	800279a <HAL_DMA_IRQHandler+0x156>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a32      	ldr	r2, [pc, #200]	@ (8002844 <HAL_DMA_IRQHandler+0x200>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00a      	beq.n	8002794 <HAL_DMA_IRQHandler+0x150>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a31      	ldr	r2, [pc, #196]	@ (8002848 <HAL_DMA_IRQHandler+0x204>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d102      	bne.n	800278e <HAL_DMA_IRQHandler+0x14a>
 8002788:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800278c:	e00e      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 800278e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002792:	e00b      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 8002794:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002798:	e008      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 800279a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800279e:	e005      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 80027a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a4:	e002      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 80027a6:	2320      	movs	r3, #32
 80027a8:	e000      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 80027aa:	2302      	movs	r3, #2
 80027ac:	4a27      	ldr	r2, [pc, #156]	@ (800284c <HAL_DMA_IRQHandler+0x208>)
 80027ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d034      	beq.n	800282a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027c8:	e02f      	b.n	800282a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	2208      	movs	r2, #8
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d028      	beq.n	800282c <HAL_DMA_IRQHandler+0x1e8>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d023      	beq.n	800282c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 020e 	bic.w	r2, r2, #14
 80027f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fc:	2101      	movs	r1, #1
 80027fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002802:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
    }
  }
  return;
 800282a:	bf00      	nop
 800282c:	bf00      	nop
}
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40020008 	.word	0x40020008
 8002838:	4002001c 	.word	0x4002001c
 800283c:	40020030 	.word	0x40020030
 8002840:	40020044 	.word	0x40020044
 8002844:	40020058 	.word	0x40020058
 8002848:	4002006c 	.word	0x4002006c
 800284c:	40020000 	.word	0x40020000

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b08b      	sub	sp, #44	@ 0x2c
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002862:	e169      	b.n	8002b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002864:	2201      	movs	r2, #1
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	429a      	cmp	r2, r3
 800287e:	f040 8158 	bne.w	8002b32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a9a      	ldr	r2, [pc, #616]	@ (8002af0 <HAL_GPIO_Init+0x2a0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d05e      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 800288c:	4a98      	ldr	r2, [pc, #608]	@ (8002af0 <HAL_GPIO_Init+0x2a0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d875      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 8002892:	4a98      	ldr	r2, [pc, #608]	@ (8002af4 <HAL_GPIO_Init+0x2a4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d058      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 8002898:	4a96      	ldr	r2, [pc, #600]	@ (8002af4 <HAL_GPIO_Init+0x2a4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d86f      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 800289e:	4a96      	ldr	r2, [pc, #600]	@ (8002af8 <HAL_GPIO_Init+0x2a8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d052      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 80028a4:	4a94      	ldr	r2, [pc, #592]	@ (8002af8 <HAL_GPIO_Init+0x2a8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d869      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028aa:	4a94      	ldr	r2, [pc, #592]	@ (8002afc <HAL_GPIO_Init+0x2ac>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d04c      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 80028b0:	4a92      	ldr	r2, [pc, #584]	@ (8002afc <HAL_GPIO_Init+0x2ac>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d863      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028b6:	4a92      	ldr	r2, [pc, #584]	@ (8002b00 <HAL_GPIO_Init+0x2b0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d046      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 80028bc:	4a90      	ldr	r2, [pc, #576]	@ (8002b00 <HAL_GPIO_Init+0x2b0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d85d      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028c2:	2b12      	cmp	r3, #18
 80028c4:	d82a      	bhi.n	800291c <HAL_GPIO_Init+0xcc>
 80028c6:	2b12      	cmp	r3, #18
 80028c8:	d859      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028ca:	a201      	add	r2, pc, #4	@ (adr r2, 80028d0 <HAL_GPIO_Init+0x80>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	0800294b 	.word	0x0800294b
 80028d4:	08002925 	.word	0x08002925
 80028d8:	08002937 	.word	0x08002937
 80028dc:	08002979 	.word	0x08002979
 80028e0:	0800297f 	.word	0x0800297f
 80028e4:	0800297f 	.word	0x0800297f
 80028e8:	0800297f 	.word	0x0800297f
 80028ec:	0800297f 	.word	0x0800297f
 80028f0:	0800297f 	.word	0x0800297f
 80028f4:	0800297f 	.word	0x0800297f
 80028f8:	0800297f 	.word	0x0800297f
 80028fc:	0800297f 	.word	0x0800297f
 8002900:	0800297f 	.word	0x0800297f
 8002904:	0800297f 	.word	0x0800297f
 8002908:	0800297f 	.word	0x0800297f
 800290c:	0800297f 	.word	0x0800297f
 8002910:	0800297f 	.word	0x0800297f
 8002914:	0800292d 	.word	0x0800292d
 8002918:	08002941 	.word	0x08002941
 800291c:	4a79      	ldr	r2, [pc, #484]	@ (8002b04 <HAL_GPIO_Init+0x2b4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002922:	e02c      	b.n	800297e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	623b      	str	r3, [r7, #32]
          break;
 800292a:	e029      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	3304      	adds	r3, #4
 8002932:	623b      	str	r3, [r7, #32]
          break;
 8002934:	e024      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	3308      	adds	r3, #8
 800293c:	623b      	str	r3, [r7, #32]
          break;
 800293e:	e01f      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	330c      	adds	r3, #12
 8002946:	623b      	str	r3, [r7, #32]
          break;
 8002948:	e01a      	b.n	8002980 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002952:	2304      	movs	r3, #4
 8002954:	623b      	str	r3, [r7, #32]
          break;
 8002956:	e013      	b.n	8002980 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002960:	2308      	movs	r3, #8
 8002962:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	611a      	str	r2, [r3, #16]
          break;
 800296a:	e009      	b.n	8002980 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800296c:	2308      	movs	r3, #8
 800296e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	615a      	str	r2, [r3, #20]
          break;
 8002976:	e003      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002978:	2300      	movs	r3, #0
 800297a:	623b      	str	r3, [r7, #32]
          break;
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x130>
          break;
 800297e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2bff      	cmp	r3, #255	@ 0xff
 8002984:	d801      	bhi.n	800298a <HAL_GPIO_Init+0x13a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	e001      	b.n	800298e <HAL_GPIO_Init+0x13e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3304      	adds	r3, #4
 800298e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2bff      	cmp	r3, #255	@ 0xff
 8002994:	d802      	bhi.n	800299c <HAL_GPIO_Init+0x14c>
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	e002      	b.n	80029a2 <HAL_GPIO_Init+0x152>
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	3b08      	subs	r3, #8
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	210f      	movs	r1, #15
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	6a39      	ldr	r1, [r7, #32]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	431a      	orrs	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80b1 	beq.w	8002b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002b08 <HAL_GPIO_Init+0x2b8>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002b08 <HAL_GPIO_Init+0x2b8>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002b08 <HAL_GPIO_Init+0x2b8>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029e8:	4a48      	ldr	r2, [pc, #288]	@ (8002b0c <HAL_GPIO_Init+0x2bc>)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a40      	ldr	r2, [pc, #256]	@ (8002b10 <HAL_GPIO_Init+0x2c0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_GPIO_Init+0x1ec>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3f      	ldr	r2, [pc, #252]	@ (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00d      	beq.n	8002a38 <HAL_GPIO_Init+0x1e8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8002b18 <HAL_GPIO_Init+0x2c8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <HAL_GPIO_Init+0x1e4>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a3d      	ldr	r2, [pc, #244]	@ (8002b1c <HAL_GPIO_Init+0x2cc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d101      	bne.n	8002a30 <HAL_GPIO_Init+0x1e0>
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e006      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a30:	2304      	movs	r3, #4
 8002a32:	e004      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e002      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a40:	f002 0203 	and.w	r2, r2, #3
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	4093      	lsls	r3, r2
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a4e:	492f      	ldr	r1, [pc, #188]	@ (8002b0c <HAL_GPIO_Init+0x2bc>)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d006      	beq.n	8002a76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a68:	4b2d      	ldr	r3, [pc, #180]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	492c      	ldr	r1, [pc, #176]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]
 8002a74:	e006      	b.n	8002a84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a76:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	4928      	ldr	r1, [pc, #160]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a90:	4b23      	ldr	r3, [pc, #140]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	4922      	ldr	r1, [pc, #136]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60cb      	str	r3, [r1, #12]
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a9e:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	491e      	ldr	r1, [pc, #120]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	4918      	ldr	r1, [pc, #96]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ac6:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	4914      	ldr	r1, [pc, #80]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d021      	beq.n	8002b24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	490e      	ldr	r1, [pc, #56]	@ (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
 8002aec:	e021      	b.n	8002b32 <HAL_GPIO_Init+0x2e2>
 8002aee:	bf00      	nop
 8002af0:	10320000 	.word	0x10320000
 8002af4:	10310000 	.word	0x10310000
 8002af8:	10220000 	.word	0x10220000
 8002afc:	10210000 	.word	0x10210000
 8002b00:	10120000 	.word	0x10120000
 8002b04:	10110000 	.word	0x10110000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	40010800 	.word	0x40010800
 8002b14:	40010c00 	.word	0x40010c00
 8002b18:	40011000 	.word	0x40011000
 8002b1c:	40011400 	.word	0x40011400
 8002b20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_GPIO_Init+0x304>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	4909      	ldr	r1, [pc, #36]	@ (8002b54 <HAL_GPIO_Init+0x304>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	3301      	adds	r3, #1
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f47f ae8e 	bne.w	8002864 <HAL_GPIO_Init+0x14>
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	372c      	adds	r7, #44	@ 0x2c
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40010400 	.word	0x40010400

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b74:	e003      	b.n	8002b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	041a      	lsls	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	611a      	str	r2, [r3, #16]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0e8      	b.n	8002d6c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff fa18 	bl	8001fe4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 f82e 	bl	8003c28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd6:	f001 f81a 	bl	8003c0e <USB_CoreInit>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0bf      	b.n	8002d6c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 f832 	bl	8003c5c <USB_SetCurrentMode>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0b0      	b.n	8002d6c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	e03e      	b.n	8002c8e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3311      	adds	r3, #17
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	3310      	adds	r3, #16
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	3313      	adds	r3, #19
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	3320      	adds	r3, #32
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3324      	adds	r3, #36	@ 0x24
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	791b      	ldrb	r3, [r3, #4]
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d3bb      	bcc.n	8002c10 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]
 8002c9c:	e044      	b.n	8002d28 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	3301      	adds	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	791b      	ldrb	r3, [r3, #4]
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3b5      	bcc.n	8002c9e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d3c:	f000 ff9a 	bl	8003c74 <USB_DevInit>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e00c      	b.n	8002d6c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 ffa2 	bl	8003cae <USB_DevDisconnect>

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e272      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8087 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d94:	4b92      	ldr	r3, [pc, #584]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d00c      	beq.n	8002dba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002da0:	4b8f      	ldr	r3, [pc, #572]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d112      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x5e>
 8002dac:	4b8c      	ldr	r3, [pc, #560]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db8:	d10b      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dba:	4b89      	ldr	r3, [pc, #548]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d06c      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x12c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d168      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e24c      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dda:	d106      	bne.n	8002dea <HAL_RCC_OscConfig+0x76>
 8002ddc:	4b80      	ldr	r3, [pc, #512]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a7f      	ldr	r2, [pc, #508]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e02e      	b.n	8002e48 <HAL_RCC_OscConfig+0xd4>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x98>
 8002df2:	4b7b      	ldr	r3, [pc, #492]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a7a      	ldr	r2, [pc, #488]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b78      	ldr	r3, [pc, #480]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a77      	ldr	r2, [pc, #476]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e01d      	b.n	8002e48 <HAL_RCC_OscConfig+0xd4>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0xbc>
 8002e16:	4b72      	ldr	r3, [pc, #456]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a71      	ldr	r2, [pc, #452]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6e      	ldr	r2, [pc, #440]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCC_OscConfig+0xd4>
 8002e30:	4b6b      	ldr	r3, [pc, #428]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a6a      	ldr	r2, [pc, #424]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b68      	ldr	r3, [pc, #416]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a67      	ldr	r2, [pc, #412]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7ff fa62 	bl	8002318 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e58:	f7ff fa5e 	bl	8002318 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	@ 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e200      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0xe4>
 8002e76:	e014      	b.n	8002ea2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7ff fa4e 	bl	8002318 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e80:	f7ff fa4a 	bl	8002318 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	@ 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1ec      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	4b53      	ldr	r3, [pc, #332]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x10c>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d063      	beq.n	8002f76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eae:	4b4c      	ldr	r3, [pc, #304]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eba:	4b49      	ldr	r3, [pc, #292]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d11c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x18c>
 8002ec6:	4b46      	ldr	r3, [pc, #280]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d116      	bne.n	8002f00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	4b43      	ldr	r3, [pc, #268]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_RCC_OscConfig+0x176>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e1c0      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eea:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4939      	ldr	r1, [pc, #228]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efe:	e03a      	b.n	8002f76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d020      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f08:	4b36      	ldr	r3, [pc, #216]	@ (8002fe4 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7ff fa03 	bl	8002318 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f16:	f7ff f9ff 	bl	8002318 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e1a1      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4927      	ldr	r1, [pc, #156]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]
 8002f48:	e015      	b.n	8002f76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f4a:	4b26      	ldr	r3, [pc, #152]	@ (8002fe4 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7ff f9e2 	bl	8002318 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f58:	f7ff f9de 	bl	8002318 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e180      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d03a      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d019      	beq.n	8002fbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8a:	4b17      	ldr	r3, [pc, #92]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f90:	f7ff f9c2 	bl	8002318 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f98:	f7ff f9be 	bl	8002318 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e160      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f000 fad4 	bl	8003564 <RCC_Delay>
 8002fbc:	e01c      	b.n	8002ff8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc4:	f7ff f9a8 	bl	8002318 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fca:	e00f      	b.n	8002fec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7ff f9a4 	bl	8002318 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d908      	bls.n	8002fec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e146      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	42420000 	.word	0x42420000
 8002fe8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fec:	4b92      	ldr	r3, [pc, #584]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e9      	bne.n	8002fcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a6 	beq.w	8003152 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300a:	4b8b      	ldr	r3, [pc, #556]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10d      	bne.n	8003032 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003016:	4b88      	ldr	r3, [pc, #544]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	4a87      	ldr	r2, [pc, #540]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003020:	61d3      	str	r3, [r2, #28]
 8003022:	4b85      	ldr	r3, [pc, #532]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003032:	4b82      	ldr	r3, [pc, #520]	@ (800323c <HAL_RCC_OscConfig+0x4c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d118      	bne.n	8003070 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303e:	4b7f      	ldr	r3, [pc, #508]	@ (800323c <HAL_RCC_OscConfig+0x4c8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a7e      	ldr	r2, [pc, #504]	@ (800323c <HAL_RCC_OscConfig+0x4c8>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304a:	f7ff f965 	bl	8002318 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003052:	f7ff f961 	bl	8002318 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b64      	cmp	r3, #100	@ 0x64
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e103      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	4b75      	ldr	r3, [pc, #468]	@ (800323c <HAL_RCC_OscConfig+0x4c8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x312>
 8003078:	4b6f      	ldr	r3, [pc, #444]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4a6e      	ldr	r2, [pc, #440]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6213      	str	r3, [r2, #32]
 8003084:	e02d      	b.n	80030e2 <HAL_RCC_OscConfig+0x36e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x334>
 800308e:	4b6a      	ldr	r3, [pc, #424]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4a69      	ldr	r2, [pc, #420]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	6213      	str	r3, [r2, #32]
 800309a:	4b67      	ldr	r3, [pc, #412]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4a66      	ldr	r2, [pc, #408]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	f023 0304 	bic.w	r3, r3, #4
 80030a4:	6213      	str	r3, [r2, #32]
 80030a6:	e01c      	b.n	80030e2 <HAL_RCC_OscConfig+0x36e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d10c      	bne.n	80030ca <HAL_RCC_OscConfig+0x356>
 80030b0:	4b61      	ldr	r3, [pc, #388]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4a60      	ldr	r2, [pc, #384]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	6213      	str	r3, [r2, #32]
 80030bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6213      	str	r3, [r2, #32]
 80030c8:	e00b      	b.n	80030e2 <HAL_RCC_OscConfig+0x36e>
 80030ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	6213      	str	r3, [r2, #32]
 80030d6:	4b58      	ldr	r3, [pc, #352]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4a57      	ldr	r2, [pc, #348]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	f023 0304 	bic.w	r3, r3, #4
 80030e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d015      	beq.n	8003116 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ea:	f7ff f915 	bl	8002318 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f0:	e00a      	b.n	8003108 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f2:	f7ff f911 	bl	8002318 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003100:	4293      	cmp	r3, r2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e0b1      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003108:	4b4b      	ldr	r3, [pc, #300]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ee      	beq.n	80030f2 <HAL_RCC_OscConfig+0x37e>
 8003114:	e014      	b.n	8003140 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7ff f8ff 	bl	8002318 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7ff f8fb 	bl	8002318 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e09b      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003134:	4b40      	ldr	r3, [pc, #256]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ee      	bne.n	800311e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003140:	7dfb      	ldrb	r3, [r7, #23]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d105      	bne.n	8003152 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003146:	4b3c      	ldr	r3, [pc, #240]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4a3b      	ldr	r2, [pc, #236]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003150:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8087 	beq.w	800326a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800315c:	4b36      	ldr	r3, [pc, #216]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b08      	cmp	r3, #8
 8003166:	d061      	beq.n	800322c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d146      	bne.n	80031fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003170:	4b33      	ldr	r3, [pc, #204]	@ (8003240 <HAL_RCC_OscConfig+0x4cc>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7ff f8cf 	bl	8002318 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7ff f8cb 	bl	8002318 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e06d      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003190:	4b29      	ldr	r3, [pc, #164]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f0      	bne.n	800317e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a4:	d108      	bne.n	80031b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031a6:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	4921      	ldr	r1, [pc, #132]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a19      	ldr	r1, [r3, #32]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	430b      	orrs	r3, r1
 80031ca:	491b      	ldr	r1, [pc, #108]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <HAL_RCC_OscConfig+0x4cc>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7ff f89f 	bl	8002318 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031de:	f7ff f89b 	bl	8002318 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e03d      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f0:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x46a>
 80031fc:	e035      	b.n	800326a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <HAL_RCC_OscConfig+0x4cc>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7ff f888 	bl	8002318 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7ff f884 	bl	8002318 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e026      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321e:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x498>
 800322a:	e01e      	b.n	800326a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d107      	bne.n	8003244 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e019      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
 8003238:	40021000 	.word	0x40021000
 800323c:	40007000 	.word	0x40007000
 8003240:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_RCC_OscConfig+0x500>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	429a      	cmp	r2, r3
 8003256:	d106      	bne.n	8003266 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d001      	beq.n	800326a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000

08003278 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0d0      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b6a      	ldr	r3, [pc, #424]	@ (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b67      	ldr	r3, [pc, #412]	@ (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 0207 	bic.w	r2, r3, #7
 80032a2:	4965      	ldr	r1, [pc, #404]	@ (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b63      	ldr	r3, [pc, #396]	@ (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0b8      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d4:	4b59      	ldr	r3, [pc, #356]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4a58      	ldr	r2, [pc, #352]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ec:	4b53      	ldr	r3, [pc, #332]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a52      	ldr	r2, [pc, #328]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80032f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f8:	4b50      	ldr	r3, [pc, #320]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	494d      	ldr	r1, [pc, #308]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d040      	beq.n	8003398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b47      	ldr	r3, [pc, #284]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d115      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e07f      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	4b41      	ldr	r3, [pc, #260]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e073      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003346:	4b3d      	ldr	r3, [pc, #244]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e06b      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b39      	ldr	r3, [pc, #228]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4936      	ldr	r1, [pc, #216]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003368:	f7fe ffd6 	bl	8002318 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7fe ffd2 	bl	8002318 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e053      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b2d      	ldr	r3, [pc, #180]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003398:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d210      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b24      	ldr	r3, [pc, #144]	@ (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 0207 	bic.w	r2, r3, #7
 80033ae:	4922      	ldr	r1, [pc, #136]	@ (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b20      	ldr	r3, [pc, #128]	@ (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e032      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	4b19      	ldr	r3, [pc, #100]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4916      	ldr	r1, [pc, #88]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033f2:	4b12      	ldr	r3, [pc, #72]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	490e      	ldr	r1, [pc, #56]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003406:	f000 f859 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 800340a:	4602      	mov	r2, r0
 800340c:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	490a      	ldr	r1, [pc, #40]	@ (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 8003418:	5ccb      	ldrb	r3, [r1, r3]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	4a09      	ldr	r2, [pc, #36]	@ (8003444 <HAL_RCC_ClockConfig+0x1cc>)
 8003420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003422:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_RCC_ClockConfig+0x1d0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe ff34 	bl	8002294 <HAL_InitTick>

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40022000 	.word	0x40022000
 800343c:	40021000 	.word	0x40021000
 8003440:	080078a4 	.word	0x080078a4
 8003444:	20000128 	.word	0x20000128
 8003448:	2000012c 	.word	0x2000012c

0800344c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	@ 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003458:	f107 0318 	add.w	r3, r7, #24
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800346a:	2303      	movs	r3, #3
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8003472:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003476:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003478:	4b0e      	ldr	r3, [pc, #56]	@ (80034b4 <HAL_RCC_MCOConfig+0x68>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	4a0d      	ldr	r2, [pc, #52]	@ (80034b4 <HAL_RCC_MCOConfig+0x68>)
 800347e:	f043 0304 	orr.w	r3, r3, #4
 8003482:	6193      	str	r3, [r2, #24]
 8003484:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <HAL_RCC_MCOConfig+0x68>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003490:	f107 0318 	add.w	r3, r7, #24
 8003494:	4619      	mov	r1, r3
 8003496:	4808      	ldr	r0, [pc, #32]	@ (80034b8 <HAL_RCC_MCOConfig+0x6c>)
 8003498:	f7ff f9da 	bl	8002850 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800349c:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <HAL_RCC_MCOConfig+0x68>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80034a4:	4903      	ldr	r1, [pc, #12]	@ (80034b4 <HAL_RCC_MCOConfig+0x68>)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
}
 80034ac:	bf00      	nop
 80034ae:	3728      	adds	r7, #40	@ 0x28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40010800 	.word	0x40010800

080034bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x94>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d002      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x30>
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d003      	beq.n	80034f2 <HAL_RCC_GetSysClockFreq+0x36>
 80034ea:	e027      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034ec:	4b19      	ldr	r3, [pc, #100]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ee:	613b      	str	r3, [r7, #16]
      break;
 80034f0:	e027      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	0c9b      	lsrs	r3, r3, #18
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	4a17      	ldr	r2, [pc, #92]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034fc:	5cd3      	ldrb	r3, [r2, r3]
 80034fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d010      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800350a:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x94>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	0c5b      	lsrs	r3, r3, #17
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	4a11      	ldr	r2, [pc, #68]	@ (800355c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a0d      	ldr	r2, [pc, #52]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x98>)
 800351e:	fb03 f202 	mul.w	r2, r3, r2
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e004      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a0c      	ldr	r2, [pc, #48]	@ (8003560 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	613b      	str	r3, [r7, #16]
      break;
 800353a:	e002      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x98>)
 800353e:	613b      	str	r3, [r7, #16]
      break;
 8003540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003542:	693b      	ldr	r3, [r7, #16]
}
 8003544:	4618      	mov	r0, r3
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	007a1200 	.word	0x007a1200
 8003558:	080078b4 	.word	0x080078b4
 800355c:	080078c4 	.word	0x080078c4
 8003560:	003d0900 	.word	0x003d0900

08003564 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800356c:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <RCC_Delay+0x34>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0a      	ldr	r2, [pc, #40]	@ (800359c <RCC_Delay+0x38>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0a5b      	lsrs	r3, r3, #9
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003580:	bf00      	nop
  }
  while (Delay --);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1e5a      	subs	r2, r3, #1
 8003586:	60fa      	str	r2, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f9      	bne.n	8003580 <RCC_Delay+0x1c>
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	20000128 	.word	0x20000128
 800359c:	10624dd3 	.word	0x10624dd3

080035a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d07d      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10d      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	61d3      	str	r3, [r2, #28]
 80035d8:	4b49      	ldr	r3, [pc, #292]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	4b46      	ldr	r3, [pc, #280]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d118      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f4:	4b43      	ldr	r3, [pc, #268]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a42      	ldr	r2, [pc, #264]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003600:	f7fe fe8a 	bl	8002318 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	e008      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fe fe86 	bl	8002318 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	@ 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e06d      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b3a      	ldr	r3, [pc, #232]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003626:	4b36      	ldr	r3, [pc, #216]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800362e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d02e      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	429a      	cmp	r2, r3
 8003642:	d027      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003644:	4b2e      	ldr	r3, [pc, #184]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800364c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800364e:	4b2e      	ldr	r3, [pc, #184]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003654:	4b2c      	ldr	r3, [pc, #176]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800365a:	4a29      	ldr	r2, [pc, #164]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d014      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fe fe55 	bl	8002318 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe fe51 	bl	8002318 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e036      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003688:	4b1d      	ldr	r3, [pc, #116]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ee      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003694:	4b1a      	ldr	r3, [pc, #104]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4917      	ldr	r1, [pc, #92]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b14      	ldr	r3, [pc, #80]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	4a13      	ldr	r2, [pc, #76]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	490b      	ldr	r1, [pc, #44]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036e2:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4904      	ldr	r1, [pc, #16]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	40007000 	.word	0x40007000
 8003708:	42420440 	.word	0x42420440

0800370c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e076      	b.n	800380c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	2b00      	cmp	r3, #0
 8003724:	d108      	bne.n	8003738 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800372e:	d009      	beq.n	8003744 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	61da      	str	r2, [r3, #28]
 8003736:	e005      	b.n	8003744 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fe fbd6 	bl	8001f10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800377a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c8:	ea42 0103 	orr.w	r1, r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	0c1a      	lsrs	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f002 0204 	and.w	r2, r2, #4
 80037ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003824:	f7fe fd78 	bl	8002318 <HAL_GetTick>
 8003828:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d001      	beq.n	800383e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
 800383c:	e12a      	b.n	8003a94 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_SPI_Transmit+0x36>
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e122      	b.n	8003a94 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_SPI_Transmit+0x48>
 8003858:	2302      	movs	r3, #2
 800385a:	e11b      	b.n	8003a94 <HAL_SPI_Transmit+0x280>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2203      	movs	r2, #3
 8003868:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038aa:	d10f      	bne.n	80038cc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d6:	2b40      	cmp	r3, #64	@ 0x40
 80038d8:	d007      	beq.n	80038ea <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f2:	d152      	bne.n	800399a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_Transmit+0xee>
 80038fc:	8b7b      	ldrh	r3, [r7, #26]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d145      	bne.n	800398e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	881a      	ldrh	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	1c9a      	adds	r2, r3, #2
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003926:	e032      	b.n	800398e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	d112      	bne.n	800395c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	881a      	ldrh	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003946:	1c9a      	adds	r2, r3, #2
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	86da      	strh	r2, [r3, #54]	@ 0x36
 800395a:	e018      	b.n	800398e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800395c:	f7fe fcdc 	bl	8002318 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d803      	bhi.n	8003974 <HAL_SPI_Transmit+0x160>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003972:	d102      	bne.n	800397a <HAL_SPI_Transmit+0x166>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e082      	b.n	8003a94 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1c7      	bne.n	8003928 <HAL_SPI_Transmit+0x114>
 8003998:	e053      	b.n	8003a42 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_SPI_Transmit+0x194>
 80039a2:	8b7b      	ldrh	r3, [r7, #26]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d147      	bne.n	8003a38 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	7812      	ldrb	r2, [r2, #0]
 80039b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039ce:	e033      	b.n	8003a38 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d113      	bne.n	8003a06 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a04:	e018      	b.n	8003a38 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a06:	f7fe fc87 	bl	8002318 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d803      	bhi.n	8003a1e <HAL_SPI_Transmit+0x20a>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a1c:	d102      	bne.n	8003a24 <HAL_SPI_Transmit+0x210>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e02d      	b.n	8003a94 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1c6      	bne.n	80039d0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	6839      	ldr	r1, [r7, #0]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f8b0 	bl	8003bac <SPI_EndRxTxTransaction>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003a92:	2300      	movs	r3, #0
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003aac:	f7fe fc34 	bl	8002318 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	4413      	add	r3, r2
 8003aba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003abc:	f7fe fc2c 	bl	8002318 <HAL_GetTick>
 8003ac0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ac2:	4b39      	ldr	r3, [pc, #228]	@ (8003ba8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	015b      	lsls	r3, r3, #5
 8003ac8:	0d1b      	lsrs	r3, r3, #20
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	fb02 f303 	mul.w	r3, r2, r3
 8003ad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ad2:	e054      	b.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ada:	d050      	beq.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003adc:	f7fe fc1c 	bl	8002318 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d902      	bls.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d13d      	bne.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b0a:	d111      	bne.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b14:	d004      	beq.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1e:	d107      	bne.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b38:	d10f      	bne.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e017      	b.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d19b      	bne.n	8003ad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000128 	.word	0x20000128

08003bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff ff6a 	bl	8003a9c <SPI_WaitFlagStateUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e013      	b.n	8003c06 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2200      	movs	r2, #0
 8003be6:	2180      	movs	r1, #128	@ 0x80
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7ff ff57 	bl	8003a9c <SPI_WaitFlagStateUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e000      	b.n	8003c06 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b085      	sub	sp, #20
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	4638      	mov	r0, r7
 8003c18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c30:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003c34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	4013      	ands	r3, r2
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
	...

08003cc4 <malloc>:
 8003cc4:	4b02      	ldr	r3, [pc, #8]	@ (8003cd0 <malloc+0xc>)
 8003cc6:	4601      	mov	r1, r0
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	f000 b82d 	b.w	8003d28 <_malloc_r>
 8003cce:	bf00      	nop
 8003cd0:	20000140 	.word	0x20000140

08003cd4 <free>:
 8003cd4:	4b02      	ldr	r3, [pc, #8]	@ (8003ce0 <free+0xc>)
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	f000 ba9f 	b.w	800421c <_free_r>
 8003cde:	bf00      	nop
 8003ce0:	20000140 	.word	0x20000140

08003ce4 <sbrk_aligned>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	4e0f      	ldr	r6, [pc, #60]	@ (8003d24 <sbrk_aligned+0x40>)
 8003ce8:	460c      	mov	r4, r1
 8003cea:	6831      	ldr	r1, [r6, #0]
 8003cec:	4605      	mov	r5, r0
 8003cee:	b911      	cbnz	r1, 8003cf6 <sbrk_aligned+0x12>
 8003cf0:	f000 fa26 	bl	8004140 <_sbrk_r>
 8003cf4:	6030      	str	r0, [r6, #0]
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f000 fa21 	bl	8004140 <_sbrk_r>
 8003cfe:	1c43      	adds	r3, r0, #1
 8003d00:	d103      	bne.n	8003d0a <sbrk_aligned+0x26>
 8003d02:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003d06:	4620      	mov	r0, r4
 8003d08:	bd70      	pop	{r4, r5, r6, pc}
 8003d0a:	1cc4      	adds	r4, r0, #3
 8003d0c:	f024 0403 	bic.w	r4, r4, #3
 8003d10:	42a0      	cmp	r0, r4
 8003d12:	d0f8      	beq.n	8003d06 <sbrk_aligned+0x22>
 8003d14:	1a21      	subs	r1, r4, r0
 8003d16:	4628      	mov	r0, r5
 8003d18:	f000 fa12 	bl	8004140 <_sbrk_r>
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d1f2      	bne.n	8003d06 <sbrk_aligned+0x22>
 8003d20:	e7ef      	b.n	8003d02 <sbrk_aligned+0x1e>
 8003d22:	bf00      	nop
 8003d24:	20000824 	.word	0x20000824

08003d28 <_malloc_r>:
 8003d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d2c:	1ccd      	adds	r5, r1, #3
 8003d2e:	f025 0503 	bic.w	r5, r5, #3
 8003d32:	3508      	adds	r5, #8
 8003d34:	2d0c      	cmp	r5, #12
 8003d36:	bf38      	it	cc
 8003d38:	250c      	movcc	r5, #12
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	db01      	blt.n	8003d44 <_malloc_r+0x1c>
 8003d40:	42a9      	cmp	r1, r5
 8003d42:	d904      	bls.n	8003d4e <_malloc_r+0x26>
 8003d44:	230c      	movs	r3, #12
 8003d46:	6033      	str	r3, [r6, #0]
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e24 <_malloc_r+0xfc>
 8003d52:	f000 f869 	bl	8003e28 <__malloc_lock>
 8003d56:	f8d8 3000 	ldr.w	r3, [r8]
 8003d5a:	461c      	mov	r4, r3
 8003d5c:	bb44      	cbnz	r4, 8003db0 <_malloc_r+0x88>
 8003d5e:	4629      	mov	r1, r5
 8003d60:	4630      	mov	r0, r6
 8003d62:	f7ff ffbf 	bl	8003ce4 <sbrk_aligned>
 8003d66:	1c43      	adds	r3, r0, #1
 8003d68:	4604      	mov	r4, r0
 8003d6a:	d158      	bne.n	8003e1e <_malloc_r+0xf6>
 8003d6c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d70:	4627      	mov	r7, r4
 8003d72:	2f00      	cmp	r7, #0
 8003d74:	d143      	bne.n	8003dfe <_malloc_r+0xd6>
 8003d76:	2c00      	cmp	r4, #0
 8003d78:	d04b      	beq.n	8003e12 <_malloc_r+0xea>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	4639      	mov	r1, r7
 8003d7e:	4630      	mov	r0, r6
 8003d80:	eb04 0903 	add.w	r9, r4, r3
 8003d84:	f000 f9dc 	bl	8004140 <_sbrk_r>
 8003d88:	4581      	cmp	r9, r0
 8003d8a:	d142      	bne.n	8003e12 <_malloc_r+0xea>
 8003d8c:	6821      	ldr	r1, [r4, #0]
 8003d8e:	4630      	mov	r0, r6
 8003d90:	1a6d      	subs	r5, r5, r1
 8003d92:	4629      	mov	r1, r5
 8003d94:	f7ff ffa6 	bl	8003ce4 <sbrk_aligned>
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d03a      	beq.n	8003e12 <_malloc_r+0xea>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	442b      	add	r3, r5
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	f8d8 3000 	ldr.w	r3, [r8]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	bb62      	cbnz	r2, 8003e04 <_malloc_r+0xdc>
 8003daa:	f8c8 7000 	str.w	r7, [r8]
 8003dae:	e00f      	b.n	8003dd0 <_malloc_r+0xa8>
 8003db0:	6822      	ldr	r2, [r4, #0]
 8003db2:	1b52      	subs	r2, r2, r5
 8003db4:	d420      	bmi.n	8003df8 <_malloc_r+0xd0>
 8003db6:	2a0b      	cmp	r2, #11
 8003db8:	d917      	bls.n	8003dea <_malloc_r+0xc2>
 8003dba:	1961      	adds	r1, r4, r5
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	6025      	str	r5, [r4, #0]
 8003dc0:	bf18      	it	ne
 8003dc2:	6059      	strne	r1, [r3, #4]
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	bf08      	it	eq
 8003dc8:	f8c8 1000 	streq.w	r1, [r8]
 8003dcc:	5162      	str	r2, [r4, r5]
 8003dce:	604b      	str	r3, [r1, #4]
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f000 f82f 	bl	8003e34 <__malloc_unlock>
 8003dd6:	f104 000b 	add.w	r0, r4, #11
 8003dda:	1d23      	adds	r3, r4, #4
 8003ddc:	f020 0007 	bic.w	r0, r0, #7
 8003de0:	1ac2      	subs	r2, r0, r3
 8003de2:	bf1c      	itt	ne
 8003de4:	1a1b      	subne	r3, r3, r0
 8003de6:	50a3      	strne	r3, [r4, r2]
 8003de8:	e7af      	b.n	8003d4a <_malloc_r+0x22>
 8003dea:	6862      	ldr	r2, [r4, #4]
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	bf0c      	ite	eq
 8003df0:	f8c8 2000 	streq.w	r2, [r8]
 8003df4:	605a      	strne	r2, [r3, #4]
 8003df6:	e7eb      	b.n	8003dd0 <_malloc_r+0xa8>
 8003df8:	4623      	mov	r3, r4
 8003dfa:	6864      	ldr	r4, [r4, #4]
 8003dfc:	e7ae      	b.n	8003d5c <_malloc_r+0x34>
 8003dfe:	463c      	mov	r4, r7
 8003e00:	687f      	ldr	r7, [r7, #4]
 8003e02:	e7b6      	b.n	8003d72 <_malloc_r+0x4a>
 8003e04:	461a      	mov	r2, r3
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	d1fb      	bne.n	8003e04 <_malloc_r+0xdc>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	6053      	str	r3, [r2, #4]
 8003e10:	e7de      	b.n	8003dd0 <_malloc_r+0xa8>
 8003e12:	230c      	movs	r3, #12
 8003e14:	4630      	mov	r0, r6
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	f000 f80c 	bl	8003e34 <__malloc_unlock>
 8003e1c:	e794      	b.n	8003d48 <_malloc_r+0x20>
 8003e1e:	6005      	str	r5, [r0, #0]
 8003e20:	e7d6      	b.n	8003dd0 <_malloc_r+0xa8>
 8003e22:	bf00      	nop
 8003e24:	20000828 	.word	0x20000828

08003e28 <__malloc_lock>:
 8003e28:	4801      	ldr	r0, [pc, #4]	@ (8003e30 <__malloc_lock+0x8>)
 8003e2a:	f000 b9d6 	b.w	80041da <__retarget_lock_acquire_recursive>
 8003e2e:	bf00      	nop
 8003e30:	2000096c 	.word	0x2000096c

08003e34 <__malloc_unlock>:
 8003e34:	4801      	ldr	r0, [pc, #4]	@ (8003e3c <__malloc_unlock+0x8>)
 8003e36:	f000 b9d1 	b.w	80041dc <__retarget_lock_release_recursive>
 8003e3a:	bf00      	nop
 8003e3c:	2000096c 	.word	0x2000096c

08003e40 <rand>:
 8003e40:	4b16      	ldr	r3, [pc, #88]	@ (8003e9c <rand+0x5c>)
 8003e42:	b510      	push	{r4, lr}
 8003e44:	681c      	ldr	r4, [r3, #0]
 8003e46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e48:	b9b3      	cbnz	r3, 8003e78 <rand+0x38>
 8003e4a:	2018      	movs	r0, #24
 8003e4c:	f7ff ff3a 	bl	8003cc4 <malloc>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6320      	str	r0, [r4, #48]	@ 0x30
 8003e54:	b920      	cbnz	r0, 8003e60 <rand+0x20>
 8003e56:	2152      	movs	r1, #82	@ 0x52
 8003e58:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <rand+0x60>)
 8003e5a:	4812      	ldr	r0, [pc, #72]	@ (8003ea4 <rand+0x64>)
 8003e5c:	f000 f9c0 	bl	80041e0 <__assert_func>
 8003e60:	4911      	ldr	r1, [pc, #68]	@ (8003ea8 <rand+0x68>)
 8003e62:	4b12      	ldr	r3, [pc, #72]	@ (8003eac <rand+0x6c>)
 8003e64:	e9c0 1300 	strd	r1, r3, [r0]
 8003e68:	4b11      	ldr	r3, [pc, #68]	@ (8003eb0 <rand+0x70>)
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	6083      	str	r3, [r0, #8]
 8003e6e:	230b      	movs	r3, #11
 8003e70:	8183      	strh	r3, [r0, #12]
 8003e72:	2001      	movs	r0, #1
 8003e74:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003e78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003e7a:	480e      	ldr	r0, [pc, #56]	@ (8003eb4 <rand+0x74>)
 8003e7c:	690b      	ldr	r3, [r1, #16]
 8003e7e:	694c      	ldr	r4, [r1, #20]
 8003e80:	4358      	muls	r0, r3
 8003e82:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb8 <rand+0x78>)
 8003e84:	fb02 0004 	mla	r0, r2, r4, r0
 8003e88:	fba3 3202 	umull	r3, r2, r3, r2
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	eb40 0002 	adc.w	r0, r0, r2
 8003e92:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003e96:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003e9a:	bd10      	pop	{r4, pc}
 8003e9c:	20000140 	.word	0x20000140
 8003ea0:	080078c6 	.word	0x080078c6
 8003ea4:	080078dd 	.word	0x080078dd
 8003ea8:	abcd330e 	.word	0xabcd330e
 8003eac:	e66d1234 	.word	0xe66d1234
 8003eb0:	0005deec 	.word	0x0005deec
 8003eb4:	5851f42d 	.word	0x5851f42d
 8003eb8:	4c957f2d 	.word	0x4c957f2d

08003ebc <std>:
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	b510      	push	{r4, lr}
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eca:	6083      	str	r3, [r0, #8]
 8003ecc:	8181      	strh	r1, [r0, #12]
 8003ece:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ed0:	81c2      	strh	r2, [r0, #14]
 8003ed2:	6183      	str	r3, [r0, #24]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	305c      	adds	r0, #92	@ 0x5c
 8003eda:	f000 f8f4 	bl	80040c6 <memset>
 8003ede:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <std+0x58>)
 8003ee0:	6224      	str	r4, [r4, #32]
 8003ee2:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f18 <std+0x5c>)
 8003ee6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <std+0x60>)
 8003eea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003eec:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <std+0x64>)
 8003eee:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <std+0x68>)
 8003ef2:	429c      	cmp	r4, r3
 8003ef4:	d006      	beq.n	8003f04 <std+0x48>
 8003ef6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003efa:	4294      	cmp	r4, r2
 8003efc:	d002      	beq.n	8003f04 <std+0x48>
 8003efe:	33d0      	adds	r3, #208	@ 0xd0
 8003f00:	429c      	cmp	r4, r3
 8003f02:	d105      	bne.n	8003f10 <std+0x54>
 8003f04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f0c:	f000 b964 	b.w	80041d8 <__retarget_lock_init_recursive>
 8003f10:	bd10      	pop	{r4, pc}
 8003f12:	bf00      	nop
 8003f14:	08004041 	.word	0x08004041
 8003f18:	08004063 	.word	0x08004063
 8003f1c:	0800409b 	.word	0x0800409b
 8003f20:	080040bf 	.word	0x080040bf
 8003f24:	2000082c 	.word	0x2000082c

08003f28 <stdio_exit_handler>:
 8003f28:	4a02      	ldr	r2, [pc, #8]	@ (8003f34 <stdio_exit_handler+0xc>)
 8003f2a:	4903      	ldr	r1, [pc, #12]	@ (8003f38 <stdio_exit_handler+0x10>)
 8003f2c:	4803      	ldr	r0, [pc, #12]	@ (8003f3c <stdio_exit_handler+0x14>)
 8003f2e:	f000 b869 	b.w	8004004 <_fwalk_sglue>
 8003f32:	bf00      	nop
 8003f34:	20000134 	.word	0x20000134
 8003f38:	080043ad 	.word	0x080043ad
 8003f3c:	20000144 	.word	0x20000144

08003f40 <cleanup_stdio>:
 8003f40:	6841      	ldr	r1, [r0, #4]
 8003f42:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <cleanup_stdio+0x34>)
 8003f44:	b510      	push	{r4, lr}
 8003f46:	4299      	cmp	r1, r3
 8003f48:	4604      	mov	r4, r0
 8003f4a:	d001      	beq.n	8003f50 <cleanup_stdio+0x10>
 8003f4c:	f000 fa2e 	bl	80043ac <_fflush_r>
 8003f50:	68a1      	ldr	r1, [r4, #8]
 8003f52:	4b09      	ldr	r3, [pc, #36]	@ (8003f78 <cleanup_stdio+0x38>)
 8003f54:	4299      	cmp	r1, r3
 8003f56:	d002      	beq.n	8003f5e <cleanup_stdio+0x1e>
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f000 fa27 	bl	80043ac <_fflush_r>
 8003f5e:	68e1      	ldr	r1, [r4, #12]
 8003f60:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <cleanup_stdio+0x3c>)
 8003f62:	4299      	cmp	r1, r3
 8003f64:	d004      	beq.n	8003f70 <cleanup_stdio+0x30>
 8003f66:	4620      	mov	r0, r4
 8003f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f6c:	f000 ba1e 	b.w	80043ac <_fflush_r>
 8003f70:	bd10      	pop	{r4, pc}
 8003f72:	bf00      	nop
 8003f74:	2000082c 	.word	0x2000082c
 8003f78:	20000894 	.word	0x20000894
 8003f7c:	200008fc 	.word	0x200008fc

08003f80 <global_stdio_init.part.0>:
 8003f80:	b510      	push	{r4, lr}
 8003f82:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <global_stdio_init.part.0+0x30>)
 8003f84:	4c0b      	ldr	r4, [pc, #44]	@ (8003fb4 <global_stdio_init.part.0+0x34>)
 8003f86:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb8 <global_stdio_init.part.0+0x38>)
 8003f88:	4620      	mov	r0, r4
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f7ff ff94 	bl	8003ebc <std>
 8003f94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2109      	movs	r1, #9
 8003f9c:	f7ff ff8e 	bl	8003ebc <std>
 8003fa0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003faa:	2112      	movs	r1, #18
 8003fac:	f7ff bf86 	b.w	8003ebc <std>
 8003fb0:	20000964 	.word	0x20000964
 8003fb4:	2000082c 	.word	0x2000082c
 8003fb8:	08003f29 	.word	0x08003f29

08003fbc <__sfp_lock_acquire>:
 8003fbc:	4801      	ldr	r0, [pc, #4]	@ (8003fc4 <__sfp_lock_acquire+0x8>)
 8003fbe:	f000 b90c 	b.w	80041da <__retarget_lock_acquire_recursive>
 8003fc2:	bf00      	nop
 8003fc4:	2000096d 	.word	0x2000096d

08003fc8 <__sfp_lock_release>:
 8003fc8:	4801      	ldr	r0, [pc, #4]	@ (8003fd0 <__sfp_lock_release+0x8>)
 8003fca:	f000 b907 	b.w	80041dc <__retarget_lock_release_recursive>
 8003fce:	bf00      	nop
 8003fd0:	2000096d 	.word	0x2000096d

08003fd4 <__sinit>:
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	f7ff fff0 	bl	8003fbc <__sfp_lock_acquire>
 8003fdc:	6a23      	ldr	r3, [r4, #32]
 8003fde:	b11b      	cbz	r3, 8003fe8 <__sinit+0x14>
 8003fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fe4:	f7ff bff0 	b.w	8003fc8 <__sfp_lock_release>
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <__sinit+0x28>)
 8003fea:	6223      	str	r3, [r4, #32]
 8003fec:	4b04      	ldr	r3, [pc, #16]	@ (8004000 <__sinit+0x2c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f5      	bne.n	8003fe0 <__sinit+0xc>
 8003ff4:	f7ff ffc4 	bl	8003f80 <global_stdio_init.part.0>
 8003ff8:	e7f2      	b.n	8003fe0 <__sinit+0xc>
 8003ffa:	bf00      	nop
 8003ffc:	08003f41 	.word	0x08003f41
 8004000:	20000964 	.word	0x20000964

08004004 <_fwalk_sglue>:
 8004004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004008:	4607      	mov	r7, r0
 800400a:	4688      	mov	r8, r1
 800400c:	4614      	mov	r4, r2
 800400e:	2600      	movs	r6, #0
 8004010:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004014:	f1b9 0901 	subs.w	r9, r9, #1
 8004018:	d505      	bpl.n	8004026 <_fwalk_sglue+0x22>
 800401a:	6824      	ldr	r4, [r4, #0]
 800401c:	2c00      	cmp	r4, #0
 800401e:	d1f7      	bne.n	8004010 <_fwalk_sglue+0xc>
 8004020:	4630      	mov	r0, r6
 8004022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004026:	89ab      	ldrh	r3, [r5, #12]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d907      	bls.n	800403c <_fwalk_sglue+0x38>
 800402c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004030:	3301      	adds	r3, #1
 8004032:	d003      	beq.n	800403c <_fwalk_sglue+0x38>
 8004034:	4629      	mov	r1, r5
 8004036:	4638      	mov	r0, r7
 8004038:	47c0      	blx	r8
 800403a:	4306      	orrs	r6, r0
 800403c:	3568      	adds	r5, #104	@ 0x68
 800403e:	e7e9      	b.n	8004014 <_fwalk_sglue+0x10>

08004040 <__sread>:
 8004040:	b510      	push	{r4, lr}
 8004042:	460c      	mov	r4, r1
 8004044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004048:	f000 f868 	bl	800411c <_read_r>
 800404c:	2800      	cmp	r0, #0
 800404e:	bfab      	itete	ge
 8004050:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004052:	89a3      	ldrhlt	r3, [r4, #12]
 8004054:	181b      	addge	r3, r3, r0
 8004056:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800405a:	bfac      	ite	ge
 800405c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800405e:	81a3      	strhlt	r3, [r4, #12]
 8004060:	bd10      	pop	{r4, pc}

08004062 <__swrite>:
 8004062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004066:	461f      	mov	r7, r3
 8004068:	898b      	ldrh	r3, [r1, #12]
 800406a:	4605      	mov	r5, r0
 800406c:	05db      	lsls	r3, r3, #23
 800406e:	460c      	mov	r4, r1
 8004070:	4616      	mov	r6, r2
 8004072:	d505      	bpl.n	8004080 <__swrite+0x1e>
 8004074:	2302      	movs	r3, #2
 8004076:	2200      	movs	r2, #0
 8004078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407c:	f000 f83c 	bl	80040f8 <_lseek_r>
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	4632      	mov	r2, r6
 8004084:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004088:	81a3      	strh	r3, [r4, #12]
 800408a:	4628      	mov	r0, r5
 800408c:	463b      	mov	r3, r7
 800408e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004096:	f000 b863 	b.w	8004160 <_write_r>

0800409a <__sseek>:
 800409a:	b510      	push	{r4, lr}
 800409c:	460c      	mov	r4, r1
 800409e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a2:	f000 f829 	bl	80040f8 <_lseek_r>
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	bf15      	itete	ne
 80040ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040b6:	81a3      	strheq	r3, [r4, #12]
 80040b8:	bf18      	it	ne
 80040ba:	81a3      	strhne	r3, [r4, #12]
 80040bc:	bd10      	pop	{r4, pc}

080040be <__sclose>:
 80040be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040c2:	f000 b809 	b.w	80040d8 <_close_r>

080040c6 <memset>:
 80040c6:	4603      	mov	r3, r0
 80040c8:	4402      	add	r2, r0
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d100      	bne.n	80040d0 <memset+0xa>
 80040ce:	4770      	bx	lr
 80040d0:	f803 1b01 	strb.w	r1, [r3], #1
 80040d4:	e7f9      	b.n	80040ca <memset+0x4>
	...

080040d8 <_close_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	2300      	movs	r3, #0
 80040dc:	4d05      	ldr	r5, [pc, #20]	@ (80040f4 <_close_r+0x1c>)
 80040de:	4604      	mov	r4, r0
 80040e0:	4608      	mov	r0, r1
 80040e2:	602b      	str	r3, [r5, #0]
 80040e4:	f7fe f82d 	bl	8002142 <_close>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d102      	bne.n	80040f2 <_close_r+0x1a>
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	b103      	cbz	r3, 80040f2 <_close_r+0x1a>
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
 80040f4:	20000968 	.word	0x20000968

080040f8 <_lseek_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	4604      	mov	r4, r0
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	2200      	movs	r2, #0
 8004102:	4d05      	ldr	r5, [pc, #20]	@ (8004118 <_lseek_r+0x20>)
 8004104:	602a      	str	r2, [r5, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	f7fe f83f 	bl	800218a <_lseek>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_lseek_r+0x1e>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_lseek_r+0x1e>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	20000968 	.word	0x20000968

0800411c <_read_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4604      	mov	r4, r0
 8004120:	4608      	mov	r0, r1
 8004122:	4611      	mov	r1, r2
 8004124:	2200      	movs	r2, #0
 8004126:	4d05      	ldr	r5, [pc, #20]	@ (800413c <_read_r+0x20>)
 8004128:	602a      	str	r2, [r5, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	f7fd ffd0 	bl	80020d0 <_read>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d102      	bne.n	800413a <_read_r+0x1e>
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	b103      	cbz	r3, 800413a <_read_r+0x1e>
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	bd38      	pop	{r3, r4, r5, pc}
 800413c:	20000968 	.word	0x20000968

08004140 <_sbrk_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	2300      	movs	r3, #0
 8004144:	4d05      	ldr	r5, [pc, #20]	@ (800415c <_sbrk_r+0x1c>)
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	f7fe f82a 	bl	80021a4 <_sbrk>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_sbrk_r+0x1a>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_sbrk_r+0x1a>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20000968 	.word	0x20000968

08004160 <_write_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4604      	mov	r4, r0
 8004164:	4608      	mov	r0, r1
 8004166:	4611      	mov	r1, r2
 8004168:	2200      	movs	r2, #0
 800416a:	4d05      	ldr	r5, [pc, #20]	@ (8004180 <_write_r+0x20>)
 800416c:	602a      	str	r2, [r5, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	f7fd ffcb 	bl	800210a <_write>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d102      	bne.n	800417e <_write_r+0x1e>
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	b103      	cbz	r3, 800417e <_write_r+0x1e>
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	20000968 	.word	0x20000968

08004184 <__errno>:
 8004184:	4b01      	ldr	r3, [pc, #4]	@ (800418c <__errno+0x8>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	20000140 	.word	0x20000140

08004190 <__libc_init_array>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	2600      	movs	r6, #0
 8004194:	4d0c      	ldr	r5, [pc, #48]	@ (80041c8 <__libc_init_array+0x38>)
 8004196:	4c0d      	ldr	r4, [pc, #52]	@ (80041cc <__libc_init_array+0x3c>)
 8004198:	1b64      	subs	r4, r4, r5
 800419a:	10a4      	asrs	r4, r4, #2
 800419c:	42a6      	cmp	r6, r4
 800419e:	d109      	bne.n	80041b4 <__libc_init_array+0x24>
 80041a0:	f000 fd7e 	bl	8004ca0 <_init>
 80041a4:	2600      	movs	r6, #0
 80041a6:	4d0a      	ldr	r5, [pc, #40]	@ (80041d0 <__libc_init_array+0x40>)
 80041a8:	4c0a      	ldr	r4, [pc, #40]	@ (80041d4 <__libc_init_array+0x44>)
 80041aa:	1b64      	subs	r4, r4, r5
 80041ac:	10a4      	asrs	r4, r4, #2
 80041ae:	42a6      	cmp	r6, r4
 80041b0:	d105      	bne.n	80041be <__libc_init_array+0x2e>
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
 80041b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b8:	4798      	blx	r3
 80041ba:	3601      	adds	r6, #1
 80041bc:	e7ee      	b.n	800419c <__libc_init_array+0xc>
 80041be:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c2:	4798      	blx	r3
 80041c4:	3601      	adds	r6, #1
 80041c6:	e7f2      	b.n	80041ae <__libc_init_array+0x1e>
 80041c8:	080079a4 	.word	0x080079a4
 80041cc:	080079a4 	.word	0x080079a4
 80041d0:	080079a4 	.word	0x080079a4
 80041d4:	080079a8 	.word	0x080079a8

080041d8 <__retarget_lock_init_recursive>:
 80041d8:	4770      	bx	lr

080041da <__retarget_lock_acquire_recursive>:
 80041da:	4770      	bx	lr

080041dc <__retarget_lock_release_recursive>:
 80041dc:	4770      	bx	lr
	...

080041e0 <__assert_func>:
 80041e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041e2:	4614      	mov	r4, r2
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b09      	ldr	r3, [pc, #36]	@ (800420c <__assert_func+0x2c>)
 80041e8:	4605      	mov	r5, r0
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68d8      	ldr	r0, [r3, #12]
 80041ee:	b14c      	cbz	r4, 8004204 <__assert_func+0x24>
 80041f0:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <__assert_func+0x30>)
 80041f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80041f6:	9100      	str	r1, [sp, #0]
 80041f8:	462b      	mov	r3, r5
 80041fa:	4906      	ldr	r1, [pc, #24]	@ (8004214 <__assert_func+0x34>)
 80041fc:	f000 f8fe 	bl	80043fc <fiprintf>
 8004200:	f000 f90e 	bl	8004420 <abort>
 8004204:	4b04      	ldr	r3, [pc, #16]	@ (8004218 <__assert_func+0x38>)
 8004206:	461c      	mov	r4, r3
 8004208:	e7f3      	b.n	80041f2 <__assert_func+0x12>
 800420a:	bf00      	nop
 800420c:	20000140 	.word	0x20000140
 8004210:	08007935 	.word	0x08007935
 8004214:	08007942 	.word	0x08007942
 8004218:	08007970 	.word	0x08007970

0800421c <_free_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4605      	mov	r5, r0
 8004220:	2900      	cmp	r1, #0
 8004222:	d040      	beq.n	80042a6 <_free_r+0x8a>
 8004224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004228:	1f0c      	subs	r4, r1, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	bfb8      	it	lt
 800422e:	18e4      	addlt	r4, r4, r3
 8004230:	f7ff fdfa 	bl	8003e28 <__malloc_lock>
 8004234:	4a1c      	ldr	r2, [pc, #112]	@ (80042a8 <_free_r+0x8c>)
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	b933      	cbnz	r3, 8004248 <_free_r+0x2c>
 800423a:	6063      	str	r3, [r4, #4]
 800423c:	6014      	str	r4, [r2, #0]
 800423e:	4628      	mov	r0, r5
 8004240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004244:	f7ff bdf6 	b.w	8003e34 <__malloc_unlock>
 8004248:	42a3      	cmp	r3, r4
 800424a:	d908      	bls.n	800425e <_free_r+0x42>
 800424c:	6820      	ldr	r0, [r4, #0]
 800424e:	1821      	adds	r1, r4, r0
 8004250:	428b      	cmp	r3, r1
 8004252:	bf01      	itttt	eq
 8004254:	6819      	ldreq	r1, [r3, #0]
 8004256:	685b      	ldreq	r3, [r3, #4]
 8004258:	1809      	addeq	r1, r1, r0
 800425a:	6021      	streq	r1, [r4, #0]
 800425c:	e7ed      	b.n	800423a <_free_r+0x1e>
 800425e:	461a      	mov	r2, r3
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	b10b      	cbz	r3, 8004268 <_free_r+0x4c>
 8004264:	42a3      	cmp	r3, r4
 8004266:	d9fa      	bls.n	800425e <_free_r+0x42>
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	1850      	adds	r0, r2, r1
 800426c:	42a0      	cmp	r0, r4
 800426e:	d10b      	bne.n	8004288 <_free_r+0x6c>
 8004270:	6820      	ldr	r0, [r4, #0]
 8004272:	4401      	add	r1, r0
 8004274:	1850      	adds	r0, r2, r1
 8004276:	4283      	cmp	r3, r0
 8004278:	6011      	str	r1, [r2, #0]
 800427a:	d1e0      	bne.n	800423e <_free_r+0x22>
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4408      	add	r0, r1
 8004282:	6010      	str	r0, [r2, #0]
 8004284:	6053      	str	r3, [r2, #4]
 8004286:	e7da      	b.n	800423e <_free_r+0x22>
 8004288:	d902      	bls.n	8004290 <_free_r+0x74>
 800428a:	230c      	movs	r3, #12
 800428c:	602b      	str	r3, [r5, #0]
 800428e:	e7d6      	b.n	800423e <_free_r+0x22>
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	1821      	adds	r1, r4, r0
 8004294:	428b      	cmp	r3, r1
 8004296:	bf01      	itttt	eq
 8004298:	6819      	ldreq	r1, [r3, #0]
 800429a:	685b      	ldreq	r3, [r3, #4]
 800429c:	1809      	addeq	r1, r1, r0
 800429e:	6021      	streq	r1, [r4, #0]
 80042a0:	6063      	str	r3, [r4, #4]
 80042a2:	6054      	str	r4, [r2, #4]
 80042a4:	e7cb      	b.n	800423e <_free_r+0x22>
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	20000828 	.word	0x20000828

080042ac <__sflush_r>:
 80042ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	0716      	lsls	r6, r2, #28
 80042b4:	4605      	mov	r5, r0
 80042b6:	460c      	mov	r4, r1
 80042b8:	d454      	bmi.n	8004364 <__sflush_r+0xb8>
 80042ba:	684b      	ldr	r3, [r1, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	dc02      	bgt.n	80042c6 <__sflush_r+0x1a>
 80042c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	dd48      	ble.n	8004358 <__sflush_r+0xac>
 80042c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042c8:	2e00      	cmp	r6, #0
 80042ca:	d045      	beq.n	8004358 <__sflush_r+0xac>
 80042cc:	2300      	movs	r3, #0
 80042ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042d2:	682f      	ldr	r7, [r5, #0]
 80042d4:	6a21      	ldr	r1, [r4, #32]
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	d030      	beq.n	800433c <__sflush_r+0x90>
 80042da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	0759      	lsls	r1, r3, #29
 80042e0:	d505      	bpl.n	80042ee <__sflush_r+0x42>
 80042e2:	6863      	ldr	r3, [r4, #4]
 80042e4:	1ad2      	subs	r2, r2, r3
 80042e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80042e8:	b10b      	cbz	r3, 80042ee <__sflush_r+0x42>
 80042ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042ec:	1ad2      	subs	r2, r2, r3
 80042ee:	2300      	movs	r3, #0
 80042f0:	4628      	mov	r0, r5
 80042f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042f4:	6a21      	ldr	r1, [r4, #32]
 80042f6:	47b0      	blx	r6
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	d106      	bne.n	800430c <__sflush_r+0x60>
 80042fe:	6829      	ldr	r1, [r5, #0]
 8004300:	291d      	cmp	r1, #29
 8004302:	d82b      	bhi.n	800435c <__sflush_r+0xb0>
 8004304:	4a28      	ldr	r2, [pc, #160]	@ (80043a8 <__sflush_r+0xfc>)
 8004306:	40ca      	lsrs	r2, r1
 8004308:	07d6      	lsls	r6, r2, #31
 800430a:	d527      	bpl.n	800435c <__sflush_r+0xb0>
 800430c:	2200      	movs	r2, #0
 800430e:	6062      	str	r2, [r4, #4]
 8004310:	6922      	ldr	r2, [r4, #16]
 8004312:	04d9      	lsls	r1, r3, #19
 8004314:	6022      	str	r2, [r4, #0]
 8004316:	d504      	bpl.n	8004322 <__sflush_r+0x76>
 8004318:	1c42      	adds	r2, r0, #1
 800431a:	d101      	bne.n	8004320 <__sflush_r+0x74>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	b903      	cbnz	r3, 8004322 <__sflush_r+0x76>
 8004320:	6560      	str	r0, [r4, #84]	@ 0x54
 8004322:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004324:	602f      	str	r7, [r5, #0]
 8004326:	b1b9      	cbz	r1, 8004358 <__sflush_r+0xac>
 8004328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800432c:	4299      	cmp	r1, r3
 800432e:	d002      	beq.n	8004336 <__sflush_r+0x8a>
 8004330:	4628      	mov	r0, r5
 8004332:	f7ff ff73 	bl	800421c <_free_r>
 8004336:	2300      	movs	r3, #0
 8004338:	6363      	str	r3, [r4, #52]	@ 0x34
 800433a:	e00d      	b.n	8004358 <__sflush_r+0xac>
 800433c:	2301      	movs	r3, #1
 800433e:	4628      	mov	r0, r5
 8004340:	47b0      	blx	r6
 8004342:	4602      	mov	r2, r0
 8004344:	1c50      	adds	r0, r2, #1
 8004346:	d1c9      	bne.n	80042dc <__sflush_r+0x30>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0c6      	beq.n	80042dc <__sflush_r+0x30>
 800434e:	2b1d      	cmp	r3, #29
 8004350:	d001      	beq.n	8004356 <__sflush_r+0xaa>
 8004352:	2b16      	cmp	r3, #22
 8004354:	d11d      	bne.n	8004392 <__sflush_r+0xe6>
 8004356:	602f      	str	r7, [r5, #0]
 8004358:	2000      	movs	r0, #0
 800435a:	e021      	b.n	80043a0 <__sflush_r+0xf4>
 800435c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004360:	b21b      	sxth	r3, r3
 8004362:	e01a      	b.n	800439a <__sflush_r+0xee>
 8004364:	690f      	ldr	r7, [r1, #16]
 8004366:	2f00      	cmp	r7, #0
 8004368:	d0f6      	beq.n	8004358 <__sflush_r+0xac>
 800436a:	0793      	lsls	r3, r2, #30
 800436c:	bf18      	it	ne
 800436e:	2300      	movne	r3, #0
 8004370:	680e      	ldr	r6, [r1, #0]
 8004372:	bf08      	it	eq
 8004374:	694b      	ldreq	r3, [r1, #20]
 8004376:	1bf6      	subs	r6, r6, r7
 8004378:	600f      	str	r7, [r1, #0]
 800437a:	608b      	str	r3, [r1, #8]
 800437c:	2e00      	cmp	r6, #0
 800437e:	ddeb      	ble.n	8004358 <__sflush_r+0xac>
 8004380:	4633      	mov	r3, r6
 8004382:	463a      	mov	r2, r7
 8004384:	4628      	mov	r0, r5
 8004386:	6a21      	ldr	r1, [r4, #32]
 8004388:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800438c:	47e0      	blx	ip
 800438e:	2800      	cmp	r0, #0
 8004390:	dc07      	bgt.n	80043a2 <__sflush_r+0xf6>
 8004392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800439a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800439e:	81a3      	strh	r3, [r4, #12]
 80043a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043a2:	4407      	add	r7, r0
 80043a4:	1a36      	subs	r6, r6, r0
 80043a6:	e7e9      	b.n	800437c <__sflush_r+0xd0>
 80043a8:	20400001 	.word	0x20400001

080043ac <_fflush_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	690b      	ldr	r3, [r1, #16]
 80043b0:	4605      	mov	r5, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	b913      	cbnz	r3, 80043bc <_fflush_r+0x10>
 80043b6:	2500      	movs	r5, #0
 80043b8:	4628      	mov	r0, r5
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	b118      	cbz	r0, 80043c6 <_fflush_r+0x1a>
 80043be:	6a03      	ldr	r3, [r0, #32]
 80043c0:	b90b      	cbnz	r3, 80043c6 <_fflush_r+0x1a>
 80043c2:	f7ff fe07 	bl	8003fd4 <__sinit>
 80043c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f3      	beq.n	80043b6 <_fflush_r+0xa>
 80043ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043d0:	07d0      	lsls	r0, r2, #31
 80043d2:	d404      	bmi.n	80043de <_fflush_r+0x32>
 80043d4:	0599      	lsls	r1, r3, #22
 80043d6:	d402      	bmi.n	80043de <_fflush_r+0x32>
 80043d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043da:	f7ff fefe 	bl	80041da <__retarget_lock_acquire_recursive>
 80043de:	4628      	mov	r0, r5
 80043e0:	4621      	mov	r1, r4
 80043e2:	f7ff ff63 	bl	80042ac <__sflush_r>
 80043e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043e8:	4605      	mov	r5, r0
 80043ea:	07da      	lsls	r2, r3, #31
 80043ec:	d4e4      	bmi.n	80043b8 <_fflush_r+0xc>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	059b      	lsls	r3, r3, #22
 80043f2:	d4e1      	bmi.n	80043b8 <_fflush_r+0xc>
 80043f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043f6:	f7ff fef1 	bl	80041dc <__retarget_lock_release_recursive>
 80043fa:	e7dd      	b.n	80043b8 <_fflush_r+0xc>

080043fc <fiprintf>:
 80043fc:	b40e      	push	{r1, r2, r3}
 80043fe:	b503      	push	{r0, r1, lr}
 8004400:	4601      	mov	r1, r0
 8004402:	ab03      	add	r3, sp, #12
 8004404:	4805      	ldr	r0, [pc, #20]	@ (800441c <fiprintf+0x20>)
 8004406:	f853 2b04 	ldr.w	r2, [r3], #4
 800440a:	6800      	ldr	r0, [r0, #0]
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	f000 f835 	bl	800447c <_vfiprintf_r>
 8004412:	b002      	add	sp, #8
 8004414:	f85d eb04 	ldr.w	lr, [sp], #4
 8004418:	b003      	add	sp, #12
 800441a:	4770      	bx	lr
 800441c:	20000140 	.word	0x20000140

08004420 <abort>:
 8004420:	2006      	movs	r0, #6
 8004422:	b508      	push	{r3, lr}
 8004424:	f000 fb8e 	bl	8004b44 <raise>
 8004428:	2001      	movs	r0, #1
 800442a:	f7fd fe46 	bl	80020ba <_exit>

0800442e <__sfputc_r>:
 800442e:	6893      	ldr	r3, [r2, #8]
 8004430:	b410      	push	{r4}
 8004432:	3b01      	subs	r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	6093      	str	r3, [r2, #8]
 8004438:	da07      	bge.n	800444a <__sfputc_r+0x1c>
 800443a:	6994      	ldr	r4, [r2, #24]
 800443c:	42a3      	cmp	r3, r4
 800443e:	db01      	blt.n	8004444 <__sfputc_r+0x16>
 8004440:	290a      	cmp	r1, #10
 8004442:	d102      	bne.n	800444a <__sfputc_r+0x1c>
 8004444:	bc10      	pop	{r4}
 8004446:	f000 bac1 	b.w	80049cc <__swbuf_r>
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	1c58      	adds	r0, r3, #1
 800444e:	6010      	str	r0, [r2, #0]
 8004450:	7019      	strb	r1, [r3, #0]
 8004452:	4608      	mov	r0, r1
 8004454:	bc10      	pop	{r4}
 8004456:	4770      	bx	lr

08004458 <__sfputs_r>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	4606      	mov	r6, r0
 800445c:	460f      	mov	r7, r1
 800445e:	4614      	mov	r4, r2
 8004460:	18d5      	adds	r5, r2, r3
 8004462:	42ac      	cmp	r4, r5
 8004464:	d101      	bne.n	800446a <__sfputs_r+0x12>
 8004466:	2000      	movs	r0, #0
 8004468:	e007      	b.n	800447a <__sfputs_r+0x22>
 800446a:	463a      	mov	r2, r7
 800446c:	4630      	mov	r0, r6
 800446e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004472:	f7ff ffdc 	bl	800442e <__sfputc_r>
 8004476:	1c43      	adds	r3, r0, #1
 8004478:	d1f3      	bne.n	8004462 <__sfputs_r+0xa>
 800447a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800447c <_vfiprintf_r>:
 800447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004480:	460d      	mov	r5, r1
 8004482:	4614      	mov	r4, r2
 8004484:	4698      	mov	r8, r3
 8004486:	4606      	mov	r6, r0
 8004488:	b09d      	sub	sp, #116	@ 0x74
 800448a:	b118      	cbz	r0, 8004494 <_vfiprintf_r+0x18>
 800448c:	6a03      	ldr	r3, [r0, #32]
 800448e:	b90b      	cbnz	r3, 8004494 <_vfiprintf_r+0x18>
 8004490:	f7ff fda0 	bl	8003fd4 <__sinit>
 8004494:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004496:	07d9      	lsls	r1, r3, #31
 8004498:	d405      	bmi.n	80044a6 <_vfiprintf_r+0x2a>
 800449a:	89ab      	ldrh	r3, [r5, #12]
 800449c:	059a      	lsls	r2, r3, #22
 800449e:	d402      	bmi.n	80044a6 <_vfiprintf_r+0x2a>
 80044a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044a2:	f7ff fe9a 	bl	80041da <__retarget_lock_acquire_recursive>
 80044a6:	89ab      	ldrh	r3, [r5, #12]
 80044a8:	071b      	lsls	r3, r3, #28
 80044aa:	d501      	bpl.n	80044b0 <_vfiprintf_r+0x34>
 80044ac:	692b      	ldr	r3, [r5, #16]
 80044ae:	b99b      	cbnz	r3, 80044d8 <_vfiprintf_r+0x5c>
 80044b0:	4629      	mov	r1, r5
 80044b2:	4630      	mov	r0, r6
 80044b4:	f000 fac8 	bl	8004a48 <__swsetup_r>
 80044b8:	b170      	cbz	r0, 80044d8 <_vfiprintf_r+0x5c>
 80044ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044bc:	07dc      	lsls	r4, r3, #31
 80044be:	d504      	bpl.n	80044ca <_vfiprintf_r+0x4e>
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044c4:	b01d      	add	sp, #116	@ 0x74
 80044c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ca:	89ab      	ldrh	r3, [r5, #12]
 80044cc:	0598      	lsls	r0, r3, #22
 80044ce:	d4f7      	bmi.n	80044c0 <_vfiprintf_r+0x44>
 80044d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044d2:	f7ff fe83 	bl	80041dc <__retarget_lock_release_recursive>
 80044d6:	e7f3      	b.n	80044c0 <_vfiprintf_r+0x44>
 80044d8:	2300      	movs	r3, #0
 80044da:	9309      	str	r3, [sp, #36]	@ 0x24
 80044dc:	2320      	movs	r3, #32
 80044de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044e2:	2330      	movs	r3, #48	@ 0x30
 80044e4:	f04f 0901 	mov.w	r9, #1
 80044e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004698 <_vfiprintf_r+0x21c>
 80044f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044f4:	4623      	mov	r3, r4
 80044f6:	469a      	mov	sl, r3
 80044f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044fc:	b10a      	cbz	r2, 8004502 <_vfiprintf_r+0x86>
 80044fe:	2a25      	cmp	r2, #37	@ 0x25
 8004500:	d1f9      	bne.n	80044f6 <_vfiprintf_r+0x7a>
 8004502:	ebba 0b04 	subs.w	fp, sl, r4
 8004506:	d00b      	beq.n	8004520 <_vfiprintf_r+0xa4>
 8004508:	465b      	mov	r3, fp
 800450a:	4622      	mov	r2, r4
 800450c:	4629      	mov	r1, r5
 800450e:	4630      	mov	r0, r6
 8004510:	f7ff ffa2 	bl	8004458 <__sfputs_r>
 8004514:	3001      	adds	r0, #1
 8004516:	f000 80a7 	beq.w	8004668 <_vfiprintf_r+0x1ec>
 800451a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800451c:	445a      	add	r2, fp
 800451e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004520:	f89a 3000 	ldrb.w	r3, [sl]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 809f 	beq.w	8004668 <_vfiprintf_r+0x1ec>
 800452a:	2300      	movs	r3, #0
 800452c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004534:	f10a 0a01 	add.w	sl, sl, #1
 8004538:	9304      	str	r3, [sp, #16]
 800453a:	9307      	str	r3, [sp, #28]
 800453c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004540:	931a      	str	r3, [sp, #104]	@ 0x68
 8004542:	4654      	mov	r4, sl
 8004544:	2205      	movs	r2, #5
 8004546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454a:	4853      	ldr	r0, [pc, #332]	@ (8004698 <_vfiprintf_r+0x21c>)
 800454c:	f000 fb16 	bl	8004b7c <memchr>
 8004550:	9a04      	ldr	r2, [sp, #16]
 8004552:	b9d8      	cbnz	r0, 800458c <_vfiprintf_r+0x110>
 8004554:	06d1      	lsls	r1, r2, #27
 8004556:	bf44      	itt	mi
 8004558:	2320      	movmi	r3, #32
 800455a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800455e:	0713      	lsls	r3, r2, #28
 8004560:	bf44      	itt	mi
 8004562:	232b      	movmi	r3, #43	@ 0x2b
 8004564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004568:	f89a 3000 	ldrb.w	r3, [sl]
 800456c:	2b2a      	cmp	r3, #42	@ 0x2a
 800456e:	d015      	beq.n	800459c <_vfiprintf_r+0x120>
 8004570:	4654      	mov	r4, sl
 8004572:	2000      	movs	r0, #0
 8004574:	f04f 0c0a 	mov.w	ip, #10
 8004578:	9a07      	ldr	r2, [sp, #28]
 800457a:	4621      	mov	r1, r4
 800457c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004580:	3b30      	subs	r3, #48	@ 0x30
 8004582:	2b09      	cmp	r3, #9
 8004584:	d94b      	bls.n	800461e <_vfiprintf_r+0x1a2>
 8004586:	b1b0      	cbz	r0, 80045b6 <_vfiprintf_r+0x13a>
 8004588:	9207      	str	r2, [sp, #28]
 800458a:	e014      	b.n	80045b6 <_vfiprintf_r+0x13a>
 800458c:	eba0 0308 	sub.w	r3, r0, r8
 8004590:	fa09 f303 	lsl.w	r3, r9, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	46a2      	mov	sl, r4
 8004598:	9304      	str	r3, [sp, #16]
 800459a:	e7d2      	b.n	8004542 <_vfiprintf_r+0xc6>
 800459c:	9b03      	ldr	r3, [sp, #12]
 800459e:	1d19      	adds	r1, r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	9103      	str	r1, [sp, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bfbb      	ittet	lt
 80045a8:	425b      	neglt	r3, r3
 80045aa:	f042 0202 	orrlt.w	r2, r2, #2
 80045ae:	9307      	strge	r3, [sp, #28]
 80045b0:	9307      	strlt	r3, [sp, #28]
 80045b2:	bfb8      	it	lt
 80045b4:	9204      	strlt	r2, [sp, #16]
 80045b6:	7823      	ldrb	r3, [r4, #0]
 80045b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80045ba:	d10a      	bne.n	80045d2 <_vfiprintf_r+0x156>
 80045bc:	7863      	ldrb	r3, [r4, #1]
 80045be:	2b2a      	cmp	r3, #42	@ 0x2a
 80045c0:	d132      	bne.n	8004628 <_vfiprintf_r+0x1ac>
 80045c2:	9b03      	ldr	r3, [sp, #12]
 80045c4:	3402      	adds	r4, #2
 80045c6:	1d1a      	adds	r2, r3, #4
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	9203      	str	r2, [sp, #12]
 80045cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045d0:	9305      	str	r3, [sp, #20]
 80045d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800469c <_vfiprintf_r+0x220>
 80045d6:	2203      	movs	r2, #3
 80045d8:	4650      	mov	r0, sl
 80045da:	7821      	ldrb	r1, [r4, #0]
 80045dc:	f000 face 	bl	8004b7c <memchr>
 80045e0:	b138      	cbz	r0, 80045f2 <_vfiprintf_r+0x176>
 80045e2:	2240      	movs	r2, #64	@ 0x40
 80045e4:	9b04      	ldr	r3, [sp, #16]
 80045e6:	eba0 000a 	sub.w	r0, r0, sl
 80045ea:	4082      	lsls	r2, r0
 80045ec:	4313      	orrs	r3, r2
 80045ee:	3401      	adds	r4, #1
 80045f0:	9304      	str	r3, [sp, #16]
 80045f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f6:	2206      	movs	r2, #6
 80045f8:	4829      	ldr	r0, [pc, #164]	@ (80046a0 <_vfiprintf_r+0x224>)
 80045fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045fe:	f000 fabd 	bl	8004b7c <memchr>
 8004602:	2800      	cmp	r0, #0
 8004604:	d03f      	beq.n	8004686 <_vfiprintf_r+0x20a>
 8004606:	4b27      	ldr	r3, [pc, #156]	@ (80046a4 <_vfiprintf_r+0x228>)
 8004608:	bb1b      	cbnz	r3, 8004652 <_vfiprintf_r+0x1d6>
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	3307      	adds	r3, #7
 800460e:	f023 0307 	bic.w	r3, r3, #7
 8004612:	3308      	adds	r3, #8
 8004614:	9303      	str	r3, [sp, #12]
 8004616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004618:	443b      	add	r3, r7
 800461a:	9309      	str	r3, [sp, #36]	@ 0x24
 800461c:	e76a      	b.n	80044f4 <_vfiprintf_r+0x78>
 800461e:	460c      	mov	r4, r1
 8004620:	2001      	movs	r0, #1
 8004622:	fb0c 3202 	mla	r2, ip, r2, r3
 8004626:	e7a8      	b.n	800457a <_vfiprintf_r+0xfe>
 8004628:	2300      	movs	r3, #0
 800462a:	f04f 0c0a 	mov.w	ip, #10
 800462e:	4619      	mov	r1, r3
 8004630:	3401      	adds	r4, #1
 8004632:	9305      	str	r3, [sp, #20]
 8004634:	4620      	mov	r0, r4
 8004636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800463a:	3a30      	subs	r2, #48	@ 0x30
 800463c:	2a09      	cmp	r2, #9
 800463e:	d903      	bls.n	8004648 <_vfiprintf_r+0x1cc>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0c6      	beq.n	80045d2 <_vfiprintf_r+0x156>
 8004644:	9105      	str	r1, [sp, #20]
 8004646:	e7c4      	b.n	80045d2 <_vfiprintf_r+0x156>
 8004648:	4604      	mov	r4, r0
 800464a:	2301      	movs	r3, #1
 800464c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004650:	e7f0      	b.n	8004634 <_vfiprintf_r+0x1b8>
 8004652:	ab03      	add	r3, sp, #12
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	462a      	mov	r2, r5
 8004658:	4630      	mov	r0, r6
 800465a:	4b13      	ldr	r3, [pc, #76]	@ (80046a8 <_vfiprintf_r+0x22c>)
 800465c:	a904      	add	r1, sp, #16
 800465e:	f3af 8000 	nop.w
 8004662:	4607      	mov	r7, r0
 8004664:	1c78      	adds	r0, r7, #1
 8004666:	d1d6      	bne.n	8004616 <_vfiprintf_r+0x19a>
 8004668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800466a:	07d9      	lsls	r1, r3, #31
 800466c:	d405      	bmi.n	800467a <_vfiprintf_r+0x1fe>
 800466e:	89ab      	ldrh	r3, [r5, #12]
 8004670:	059a      	lsls	r2, r3, #22
 8004672:	d402      	bmi.n	800467a <_vfiprintf_r+0x1fe>
 8004674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004676:	f7ff fdb1 	bl	80041dc <__retarget_lock_release_recursive>
 800467a:	89ab      	ldrh	r3, [r5, #12]
 800467c:	065b      	lsls	r3, r3, #25
 800467e:	f53f af1f 	bmi.w	80044c0 <_vfiprintf_r+0x44>
 8004682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004684:	e71e      	b.n	80044c4 <_vfiprintf_r+0x48>
 8004686:	ab03      	add	r3, sp, #12
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	462a      	mov	r2, r5
 800468c:	4630      	mov	r0, r6
 800468e:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <_vfiprintf_r+0x22c>)
 8004690:	a904      	add	r1, sp, #16
 8004692:	f000 f87d 	bl	8004790 <_printf_i>
 8004696:	e7e4      	b.n	8004662 <_vfiprintf_r+0x1e6>
 8004698:	08007971 	.word	0x08007971
 800469c:	08007977 	.word	0x08007977
 80046a0:	0800797b 	.word	0x0800797b
 80046a4:	00000000 	.word	0x00000000
 80046a8:	08004459 	.word	0x08004459

080046ac <_printf_common>:
 80046ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	4616      	mov	r6, r2
 80046b2:	4698      	mov	r8, r3
 80046b4:	688a      	ldr	r2, [r1, #8]
 80046b6:	690b      	ldr	r3, [r1, #16]
 80046b8:	4607      	mov	r7, r0
 80046ba:	4293      	cmp	r3, r2
 80046bc:	bfb8      	it	lt
 80046be:	4613      	movlt	r3, r2
 80046c0:	6033      	str	r3, [r6, #0]
 80046c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046c6:	460c      	mov	r4, r1
 80046c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046cc:	b10a      	cbz	r2, 80046d2 <_printf_common+0x26>
 80046ce:	3301      	adds	r3, #1
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	0699      	lsls	r1, r3, #26
 80046d6:	bf42      	ittt	mi
 80046d8:	6833      	ldrmi	r3, [r6, #0]
 80046da:	3302      	addmi	r3, #2
 80046dc:	6033      	strmi	r3, [r6, #0]
 80046de:	6825      	ldr	r5, [r4, #0]
 80046e0:	f015 0506 	ands.w	r5, r5, #6
 80046e4:	d106      	bne.n	80046f4 <_printf_common+0x48>
 80046e6:	f104 0a19 	add.w	sl, r4, #25
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	6832      	ldr	r2, [r6, #0]
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	42ab      	cmp	r3, r5
 80046f2:	dc2b      	bgt.n	800474c <_printf_common+0xa0>
 80046f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046f8:	6822      	ldr	r2, [r4, #0]
 80046fa:	3b00      	subs	r3, #0
 80046fc:	bf18      	it	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	0692      	lsls	r2, r2, #26
 8004702:	d430      	bmi.n	8004766 <_printf_common+0xba>
 8004704:	4641      	mov	r1, r8
 8004706:	4638      	mov	r0, r7
 8004708:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800470c:	47c8      	blx	r9
 800470e:	3001      	adds	r0, #1
 8004710:	d023      	beq.n	800475a <_printf_common+0xae>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	6922      	ldr	r2, [r4, #16]
 8004716:	f003 0306 	and.w	r3, r3, #6
 800471a:	2b04      	cmp	r3, #4
 800471c:	bf14      	ite	ne
 800471e:	2500      	movne	r5, #0
 8004720:	6833      	ldreq	r3, [r6, #0]
 8004722:	f04f 0600 	mov.w	r6, #0
 8004726:	bf08      	it	eq
 8004728:	68e5      	ldreq	r5, [r4, #12]
 800472a:	f104 041a 	add.w	r4, r4, #26
 800472e:	bf08      	it	eq
 8004730:	1aed      	subeq	r5, r5, r3
 8004732:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004736:	bf08      	it	eq
 8004738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800473c:	4293      	cmp	r3, r2
 800473e:	bfc4      	itt	gt
 8004740:	1a9b      	subgt	r3, r3, r2
 8004742:	18ed      	addgt	r5, r5, r3
 8004744:	42b5      	cmp	r5, r6
 8004746:	d11a      	bne.n	800477e <_printf_common+0xd2>
 8004748:	2000      	movs	r0, #0
 800474a:	e008      	b.n	800475e <_printf_common+0xb2>
 800474c:	2301      	movs	r3, #1
 800474e:	4652      	mov	r2, sl
 8004750:	4641      	mov	r1, r8
 8004752:	4638      	mov	r0, r7
 8004754:	47c8      	blx	r9
 8004756:	3001      	adds	r0, #1
 8004758:	d103      	bne.n	8004762 <_printf_common+0xb6>
 800475a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800475e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004762:	3501      	adds	r5, #1
 8004764:	e7c1      	b.n	80046ea <_printf_common+0x3e>
 8004766:	2030      	movs	r0, #48	@ 0x30
 8004768:	18e1      	adds	r1, r4, r3
 800476a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004774:	4422      	add	r2, r4
 8004776:	3302      	adds	r3, #2
 8004778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800477c:	e7c2      	b.n	8004704 <_printf_common+0x58>
 800477e:	2301      	movs	r3, #1
 8004780:	4622      	mov	r2, r4
 8004782:	4641      	mov	r1, r8
 8004784:	4638      	mov	r0, r7
 8004786:	47c8      	blx	r9
 8004788:	3001      	adds	r0, #1
 800478a:	d0e6      	beq.n	800475a <_printf_common+0xae>
 800478c:	3601      	adds	r6, #1
 800478e:	e7d9      	b.n	8004744 <_printf_common+0x98>

08004790 <_printf_i>:
 8004790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004794:	7e0f      	ldrb	r7, [r1, #24]
 8004796:	4691      	mov	r9, r2
 8004798:	2f78      	cmp	r7, #120	@ 0x78
 800479a:	4680      	mov	r8, r0
 800479c:	460c      	mov	r4, r1
 800479e:	469a      	mov	sl, r3
 80047a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047a6:	d807      	bhi.n	80047b8 <_printf_i+0x28>
 80047a8:	2f62      	cmp	r7, #98	@ 0x62
 80047aa:	d80a      	bhi.n	80047c2 <_printf_i+0x32>
 80047ac:	2f00      	cmp	r7, #0
 80047ae:	f000 80d1 	beq.w	8004954 <_printf_i+0x1c4>
 80047b2:	2f58      	cmp	r7, #88	@ 0x58
 80047b4:	f000 80b8 	beq.w	8004928 <_printf_i+0x198>
 80047b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047c0:	e03a      	b.n	8004838 <_printf_i+0xa8>
 80047c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047c6:	2b15      	cmp	r3, #21
 80047c8:	d8f6      	bhi.n	80047b8 <_printf_i+0x28>
 80047ca:	a101      	add	r1, pc, #4	@ (adr r1, 80047d0 <_printf_i+0x40>)
 80047cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047d0:	08004829 	.word	0x08004829
 80047d4:	0800483d 	.word	0x0800483d
 80047d8:	080047b9 	.word	0x080047b9
 80047dc:	080047b9 	.word	0x080047b9
 80047e0:	080047b9 	.word	0x080047b9
 80047e4:	080047b9 	.word	0x080047b9
 80047e8:	0800483d 	.word	0x0800483d
 80047ec:	080047b9 	.word	0x080047b9
 80047f0:	080047b9 	.word	0x080047b9
 80047f4:	080047b9 	.word	0x080047b9
 80047f8:	080047b9 	.word	0x080047b9
 80047fc:	0800493b 	.word	0x0800493b
 8004800:	08004867 	.word	0x08004867
 8004804:	080048f5 	.word	0x080048f5
 8004808:	080047b9 	.word	0x080047b9
 800480c:	080047b9 	.word	0x080047b9
 8004810:	0800495d 	.word	0x0800495d
 8004814:	080047b9 	.word	0x080047b9
 8004818:	08004867 	.word	0x08004867
 800481c:	080047b9 	.word	0x080047b9
 8004820:	080047b9 	.word	0x080047b9
 8004824:	080048fd 	.word	0x080048fd
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	1d1a      	adds	r2, r3, #4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6032      	str	r2, [r6, #0]
 8004830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004834:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004838:	2301      	movs	r3, #1
 800483a:	e09c      	b.n	8004976 <_printf_i+0x1e6>
 800483c:	6833      	ldr	r3, [r6, #0]
 800483e:	6820      	ldr	r0, [r4, #0]
 8004840:	1d19      	adds	r1, r3, #4
 8004842:	6031      	str	r1, [r6, #0]
 8004844:	0606      	lsls	r6, r0, #24
 8004846:	d501      	bpl.n	800484c <_printf_i+0xbc>
 8004848:	681d      	ldr	r5, [r3, #0]
 800484a:	e003      	b.n	8004854 <_printf_i+0xc4>
 800484c:	0645      	lsls	r5, r0, #25
 800484e:	d5fb      	bpl.n	8004848 <_printf_i+0xb8>
 8004850:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004854:	2d00      	cmp	r5, #0
 8004856:	da03      	bge.n	8004860 <_printf_i+0xd0>
 8004858:	232d      	movs	r3, #45	@ 0x2d
 800485a:	426d      	negs	r5, r5
 800485c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004860:	230a      	movs	r3, #10
 8004862:	4858      	ldr	r0, [pc, #352]	@ (80049c4 <_printf_i+0x234>)
 8004864:	e011      	b.n	800488a <_printf_i+0xfa>
 8004866:	6821      	ldr	r1, [r4, #0]
 8004868:	6833      	ldr	r3, [r6, #0]
 800486a:	0608      	lsls	r0, r1, #24
 800486c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004870:	d402      	bmi.n	8004878 <_printf_i+0xe8>
 8004872:	0649      	lsls	r1, r1, #25
 8004874:	bf48      	it	mi
 8004876:	b2ad      	uxthmi	r5, r5
 8004878:	2f6f      	cmp	r7, #111	@ 0x6f
 800487a:	6033      	str	r3, [r6, #0]
 800487c:	bf14      	ite	ne
 800487e:	230a      	movne	r3, #10
 8004880:	2308      	moveq	r3, #8
 8004882:	4850      	ldr	r0, [pc, #320]	@ (80049c4 <_printf_i+0x234>)
 8004884:	2100      	movs	r1, #0
 8004886:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800488a:	6866      	ldr	r6, [r4, #4]
 800488c:	2e00      	cmp	r6, #0
 800488e:	60a6      	str	r6, [r4, #8]
 8004890:	db05      	blt.n	800489e <_printf_i+0x10e>
 8004892:	6821      	ldr	r1, [r4, #0]
 8004894:	432e      	orrs	r6, r5
 8004896:	f021 0104 	bic.w	r1, r1, #4
 800489a:	6021      	str	r1, [r4, #0]
 800489c:	d04b      	beq.n	8004936 <_printf_i+0x1a6>
 800489e:	4616      	mov	r6, r2
 80048a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80048a4:	fb03 5711 	mls	r7, r3, r1, r5
 80048a8:	5dc7      	ldrb	r7, [r0, r7]
 80048aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048ae:	462f      	mov	r7, r5
 80048b0:	42bb      	cmp	r3, r7
 80048b2:	460d      	mov	r5, r1
 80048b4:	d9f4      	bls.n	80048a0 <_printf_i+0x110>
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d10b      	bne.n	80048d2 <_printf_i+0x142>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	07df      	lsls	r7, r3, #31
 80048be:	d508      	bpl.n	80048d2 <_printf_i+0x142>
 80048c0:	6923      	ldr	r3, [r4, #16]
 80048c2:	6861      	ldr	r1, [r4, #4]
 80048c4:	4299      	cmp	r1, r3
 80048c6:	bfde      	ittt	le
 80048c8:	2330      	movle	r3, #48	@ 0x30
 80048ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048ce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80048d2:	1b92      	subs	r2, r2, r6
 80048d4:	6122      	str	r2, [r4, #16]
 80048d6:	464b      	mov	r3, r9
 80048d8:	4621      	mov	r1, r4
 80048da:	4640      	mov	r0, r8
 80048dc:	f8cd a000 	str.w	sl, [sp]
 80048e0:	aa03      	add	r2, sp, #12
 80048e2:	f7ff fee3 	bl	80046ac <_printf_common>
 80048e6:	3001      	adds	r0, #1
 80048e8:	d14a      	bne.n	8004980 <_printf_i+0x1f0>
 80048ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048ee:	b004      	add	sp, #16
 80048f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	f043 0320 	orr.w	r3, r3, #32
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	2778      	movs	r7, #120	@ 0x78
 80048fe:	4832      	ldr	r0, [pc, #200]	@ (80049c8 <_printf_i+0x238>)
 8004900:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	6831      	ldr	r1, [r6, #0]
 8004908:	061f      	lsls	r7, r3, #24
 800490a:	f851 5b04 	ldr.w	r5, [r1], #4
 800490e:	d402      	bmi.n	8004916 <_printf_i+0x186>
 8004910:	065f      	lsls	r7, r3, #25
 8004912:	bf48      	it	mi
 8004914:	b2ad      	uxthmi	r5, r5
 8004916:	6031      	str	r1, [r6, #0]
 8004918:	07d9      	lsls	r1, r3, #31
 800491a:	bf44      	itt	mi
 800491c:	f043 0320 	orrmi.w	r3, r3, #32
 8004920:	6023      	strmi	r3, [r4, #0]
 8004922:	b11d      	cbz	r5, 800492c <_printf_i+0x19c>
 8004924:	2310      	movs	r3, #16
 8004926:	e7ad      	b.n	8004884 <_printf_i+0xf4>
 8004928:	4826      	ldr	r0, [pc, #152]	@ (80049c4 <_printf_i+0x234>)
 800492a:	e7e9      	b.n	8004900 <_printf_i+0x170>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	f023 0320 	bic.w	r3, r3, #32
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	e7f6      	b.n	8004924 <_printf_i+0x194>
 8004936:	4616      	mov	r6, r2
 8004938:	e7bd      	b.n	80048b6 <_printf_i+0x126>
 800493a:	6833      	ldr	r3, [r6, #0]
 800493c:	6825      	ldr	r5, [r4, #0]
 800493e:	1d18      	adds	r0, r3, #4
 8004940:	6961      	ldr	r1, [r4, #20]
 8004942:	6030      	str	r0, [r6, #0]
 8004944:	062e      	lsls	r6, r5, #24
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	d501      	bpl.n	800494e <_printf_i+0x1be>
 800494a:	6019      	str	r1, [r3, #0]
 800494c:	e002      	b.n	8004954 <_printf_i+0x1c4>
 800494e:	0668      	lsls	r0, r5, #25
 8004950:	d5fb      	bpl.n	800494a <_printf_i+0x1ba>
 8004952:	8019      	strh	r1, [r3, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	4616      	mov	r6, r2
 8004958:	6123      	str	r3, [r4, #16]
 800495a:	e7bc      	b.n	80048d6 <_printf_i+0x146>
 800495c:	6833      	ldr	r3, [r6, #0]
 800495e:	2100      	movs	r1, #0
 8004960:	1d1a      	adds	r2, r3, #4
 8004962:	6032      	str	r2, [r6, #0]
 8004964:	681e      	ldr	r6, [r3, #0]
 8004966:	6862      	ldr	r2, [r4, #4]
 8004968:	4630      	mov	r0, r6
 800496a:	f000 f907 	bl	8004b7c <memchr>
 800496e:	b108      	cbz	r0, 8004974 <_printf_i+0x1e4>
 8004970:	1b80      	subs	r0, r0, r6
 8004972:	6060      	str	r0, [r4, #4]
 8004974:	6863      	ldr	r3, [r4, #4]
 8004976:	6123      	str	r3, [r4, #16]
 8004978:	2300      	movs	r3, #0
 800497a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800497e:	e7aa      	b.n	80048d6 <_printf_i+0x146>
 8004980:	4632      	mov	r2, r6
 8004982:	4649      	mov	r1, r9
 8004984:	4640      	mov	r0, r8
 8004986:	6923      	ldr	r3, [r4, #16]
 8004988:	47d0      	blx	sl
 800498a:	3001      	adds	r0, #1
 800498c:	d0ad      	beq.n	80048ea <_printf_i+0x15a>
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	079b      	lsls	r3, r3, #30
 8004992:	d413      	bmi.n	80049bc <_printf_i+0x22c>
 8004994:	68e0      	ldr	r0, [r4, #12]
 8004996:	9b03      	ldr	r3, [sp, #12]
 8004998:	4298      	cmp	r0, r3
 800499a:	bfb8      	it	lt
 800499c:	4618      	movlt	r0, r3
 800499e:	e7a6      	b.n	80048ee <_printf_i+0x15e>
 80049a0:	2301      	movs	r3, #1
 80049a2:	4632      	mov	r2, r6
 80049a4:	4649      	mov	r1, r9
 80049a6:	4640      	mov	r0, r8
 80049a8:	47d0      	blx	sl
 80049aa:	3001      	adds	r0, #1
 80049ac:	d09d      	beq.n	80048ea <_printf_i+0x15a>
 80049ae:	3501      	adds	r5, #1
 80049b0:	68e3      	ldr	r3, [r4, #12]
 80049b2:	9903      	ldr	r1, [sp, #12]
 80049b4:	1a5b      	subs	r3, r3, r1
 80049b6:	42ab      	cmp	r3, r5
 80049b8:	dcf2      	bgt.n	80049a0 <_printf_i+0x210>
 80049ba:	e7eb      	b.n	8004994 <_printf_i+0x204>
 80049bc:	2500      	movs	r5, #0
 80049be:	f104 0619 	add.w	r6, r4, #25
 80049c2:	e7f5      	b.n	80049b0 <_printf_i+0x220>
 80049c4:	08007982 	.word	0x08007982
 80049c8:	08007993 	.word	0x08007993

080049cc <__swbuf_r>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	460e      	mov	r6, r1
 80049d0:	4614      	mov	r4, r2
 80049d2:	4605      	mov	r5, r0
 80049d4:	b118      	cbz	r0, 80049de <__swbuf_r+0x12>
 80049d6:	6a03      	ldr	r3, [r0, #32]
 80049d8:	b90b      	cbnz	r3, 80049de <__swbuf_r+0x12>
 80049da:	f7ff fafb 	bl	8003fd4 <__sinit>
 80049de:	69a3      	ldr	r3, [r4, #24]
 80049e0:	60a3      	str	r3, [r4, #8]
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	071a      	lsls	r2, r3, #28
 80049e6:	d501      	bpl.n	80049ec <__swbuf_r+0x20>
 80049e8:	6923      	ldr	r3, [r4, #16]
 80049ea:	b943      	cbnz	r3, 80049fe <__swbuf_r+0x32>
 80049ec:	4621      	mov	r1, r4
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 f82a 	bl	8004a48 <__swsetup_r>
 80049f4:	b118      	cbz	r0, 80049fe <__swbuf_r+0x32>
 80049f6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80049fa:	4638      	mov	r0, r7
 80049fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	6922      	ldr	r2, [r4, #16]
 8004a02:	b2f6      	uxtb	r6, r6
 8004a04:	1a98      	subs	r0, r3, r2
 8004a06:	6963      	ldr	r3, [r4, #20]
 8004a08:	4637      	mov	r7, r6
 8004a0a:	4283      	cmp	r3, r0
 8004a0c:	dc05      	bgt.n	8004a1a <__swbuf_r+0x4e>
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4628      	mov	r0, r5
 8004a12:	f7ff fccb 	bl	80043ac <_fflush_r>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d1ed      	bne.n	80049f6 <__swbuf_r+0x2a>
 8004a1a:	68a3      	ldr	r3, [r4, #8]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	60a3      	str	r3, [r4, #8]
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	6022      	str	r2, [r4, #0]
 8004a26:	701e      	strb	r6, [r3, #0]
 8004a28:	6962      	ldr	r2, [r4, #20]
 8004a2a:	1c43      	adds	r3, r0, #1
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d004      	beq.n	8004a3a <__swbuf_r+0x6e>
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	07db      	lsls	r3, r3, #31
 8004a34:	d5e1      	bpl.n	80049fa <__swbuf_r+0x2e>
 8004a36:	2e0a      	cmp	r6, #10
 8004a38:	d1df      	bne.n	80049fa <__swbuf_r+0x2e>
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f7ff fcb5 	bl	80043ac <_fflush_r>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d0d9      	beq.n	80049fa <__swbuf_r+0x2e>
 8004a46:	e7d6      	b.n	80049f6 <__swbuf_r+0x2a>

08004a48 <__swsetup_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4b29      	ldr	r3, [pc, #164]	@ (8004af0 <__swsetup_r+0xa8>)
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	460c      	mov	r4, r1
 8004a52:	b118      	cbz	r0, 8004a5c <__swsetup_r+0x14>
 8004a54:	6a03      	ldr	r3, [r0, #32]
 8004a56:	b90b      	cbnz	r3, 8004a5c <__swsetup_r+0x14>
 8004a58:	f7ff fabc 	bl	8003fd4 <__sinit>
 8004a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a60:	0719      	lsls	r1, r3, #28
 8004a62:	d422      	bmi.n	8004aaa <__swsetup_r+0x62>
 8004a64:	06da      	lsls	r2, r3, #27
 8004a66:	d407      	bmi.n	8004a78 <__swsetup_r+0x30>
 8004a68:	2209      	movs	r2, #9
 8004a6a:	602a      	str	r2, [r5, #0]
 8004a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	e033      	b.n	8004ae0 <__swsetup_r+0x98>
 8004a78:	0758      	lsls	r0, r3, #29
 8004a7a:	d512      	bpl.n	8004aa2 <__swsetup_r+0x5a>
 8004a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a7e:	b141      	cbz	r1, 8004a92 <__swsetup_r+0x4a>
 8004a80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a84:	4299      	cmp	r1, r3
 8004a86:	d002      	beq.n	8004a8e <__swsetup_r+0x46>
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f7ff fbc7 	bl	800421c <_free_r>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a98:	81a3      	strh	r3, [r4, #12]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	6063      	str	r3, [r4, #4]
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	f043 0308 	orr.w	r3, r3, #8
 8004aa8:	81a3      	strh	r3, [r4, #12]
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	b94b      	cbnz	r3, 8004ac2 <__swsetup_r+0x7a>
 8004aae:	89a3      	ldrh	r3, [r4, #12]
 8004ab0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab8:	d003      	beq.n	8004ac2 <__swsetup_r+0x7a>
 8004aba:	4621      	mov	r1, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	f000 f890 	bl	8004be2 <__smakebuf_r>
 8004ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac6:	f013 0201 	ands.w	r2, r3, #1
 8004aca:	d00a      	beq.n	8004ae2 <__swsetup_r+0x9a>
 8004acc:	2200      	movs	r2, #0
 8004ace:	60a2      	str	r2, [r4, #8]
 8004ad0:	6962      	ldr	r2, [r4, #20]
 8004ad2:	4252      	negs	r2, r2
 8004ad4:	61a2      	str	r2, [r4, #24]
 8004ad6:	6922      	ldr	r2, [r4, #16]
 8004ad8:	b942      	cbnz	r2, 8004aec <__swsetup_r+0xa4>
 8004ada:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ade:	d1c5      	bne.n	8004a6c <__swsetup_r+0x24>
 8004ae0:	bd38      	pop	{r3, r4, r5, pc}
 8004ae2:	0799      	lsls	r1, r3, #30
 8004ae4:	bf58      	it	pl
 8004ae6:	6962      	ldrpl	r2, [r4, #20]
 8004ae8:	60a2      	str	r2, [r4, #8]
 8004aea:	e7f4      	b.n	8004ad6 <__swsetup_r+0x8e>
 8004aec:	2000      	movs	r0, #0
 8004aee:	e7f7      	b.n	8004ae0 <__swsetup_r+0x98>
 8004af0:	20000140 	.word	0x20000140

08004af4 <_raise_r>:
 8004af4:	291f      	cmp	r1, #31
 8004af6:	b538      	push	{r3, r4, r5, lr}
 8004af8:	4605      	mov	r5, r0
 8004afa:	460c      	mov	r4, r1
 8004afc:	d904      	bls.n	8004b08 <_raise_r+0x14>
 8004afe:	2316      	movs	r3, #22
 8004b00:	6003      	str	r3, [r0, #0]
 8004b02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
 8004b08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004b0a:	b112      	cbz	r2, 8004b12 <_raise_r+0x1e>
 8004b0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b10:	b94b      	cbnz	r3, 8004b26 <_raise_r+0x32>
 8004b12:	4628      	mov	r0, r5
 8004b14:	f000 f830 	bl	8004b78 <_getpid_r>
 8004b18:	4622      	mov	r2, r4
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b22:	f000 b817 	b.w	8004b54 <_kill_r>
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d00a      	beq.n	8004b40 <_raise_r+0x4c>
 8004b2a:	1c59      	adds	r1, r3, #1
 8004b2c:	d103      	bne.n	8004b36 <_raise_r+0x42>
 8004b2e:	2316      	movs	r3, #22
 8004b30:	6003      	str	r3, [r0, #0]
 8004b32:	2001      	movs	r0, #1
 8004b34:	e7e7      	b.n	8004b06 <_raise_r+0x12>
 8004b36:	2100      	movs	r1, #0
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004b3e:	4798      	blx	r3
 8004b40:	2000      	movs	r0, #0
 8004b42:	e7e0      	b.n	8004b06 <_raise_r+0x12>

08004b44 <raise>:
 8004b44:	4b02      	ldr	r3, [pc, #8]	@ (8004b50 <raise+0xc>)
 8004b46:	4601      	mov	r1, r0
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	f7ff bfd3 	b.w	8004af4 <_raise_r>
 8004b4e:	bf00      	nop
 8004b50:	20000140 	.word	0x20000140

08004b54 <_kill_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	2300      	movs	r3, #0
 8004b58:	4d06      	ldr	r5, [pc, #24]	@ (8004b74 <_kill_r+0x20>)
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	602b      	str	r3, [r5, #0]
 8004b62:	f7fd fa9a 	bl	800209a <_kill>
 8004b66:	1c43      	adds	r3, r0, #1
 8004b68:	d102      	bne.n	8004b70 <_kill_r+0x1c>
 8004b6a:	682b      	ldr	r3, [r5, #0]
 8004b6c:	b103      	cbz	r3, 8004b70 <_kill_r+0x1c>
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	bd38      	pop	{r3, r4, r5, pc}
 8004b72:	bf00      	nop
 8004b74:	20000968 	.word	0x20000968

08004b78 <_getpid_r>:
 8004b78:	f7fd ba88 	b.w	800208c <_getpid>

08004b7c <memchr>:
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	b510      	push	{r4, lr}
 8004b80:	b2c9      	uxtb	r1, r1
 8004b82:	4402      	add	r2, r0
 8004b84:	4293      	cmp	r3, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	d101      	bne.n	8004b8e <memchr+0x12>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	e003      	b.n	8004b96 <memchr+0x1a>
 8004b8e:	7804      	ldrb	r4, [r0, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	428c      	cmp	r4, r1
 8004b94:	d1f6      	bne.n	8004b84 <memchr+0x8>
 8004b96:	bd10      	pop	{r4, pc}

08004b98 <__swhatbuf_r>:
 8004b98:	b570      	push	{r4, r5, r6, lr}
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba0:	4615      	mov	r5, r2
 8004ba2:	2900      	cmp	r1, #0
 8004ba4:	461e      	mov	r6, r3
 8004ba6:	b096      	sub	sp, #88	@ 0x58
 8004ba8:	da0c      	bge.n	8004bc4 <__swhatbuf_r+0x2c>
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	2100      	movs	r1, #0
 8004bae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bb2:	bf14      	ite	ne
 8004bb4:	2340      	movne	r3, #64	@ 0x40
 8004bb6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004bba:	2000      	movs	r0, #0
 8004bbc:	6031      	str	r1, [r6, #0]
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	b016      	add	sp, #88	@ 0x58
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
 8004bc4:	466a      	mov	r2, sp
 8004bc6:	f000 f849 	bl	8004c5c <_fstat_r>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	dbed      	blt.n	8004baa <__swhatbuf_r+0x12>
 8004bce:	9901      	ldr	r1, [sp, #4]
 8004bd0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bd4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004bd8:	4259      	negs	r1, r3
 8004bda:	4159      	adcs	r1, r3
 8004bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004be0:	e7eb      	b.n	8004bba <__swhatbuf_r+0x22>

08004be2 <__smakebuf_r>:
 8004be2:	898b      	ldrh	r3, [r1, #12]
 8004be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004be6:	079d      	lsls	r5, r3, #30
 8004be8:	4606      	mov	r6, r0
 8004bea:	460c      	mov	r4, r1
 8004bec:	d507      	bpl.n	8004bfe <__smakebuf_r+0x1c>
 8004bee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	6163      	str	r3, [r4, #20]
 8004bfa:	b003      	add	sp, #12
 8004bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bfe:	466a      	mov	r2, sp
 8004c00:	ab01      	add	r3, sp, #4
 8004c02:	f7ff ffc9 	bl	8004b98 <__swhatbuf_r>
 8004c06:	9f00      	ldr	r7, [sp, #0]
 8004c08:	4605      	mov	r5, r0
 8004c0a:	4639      	mov	r1, r7
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f7ff f88b 	bl	8003d28 <_malloc_r>
 8004c12:	b948      	cbnz	r0, 8004c28 <__smakebuf_r+0x46>
 8004c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c18:	059a      	lsls	r2, r3, #22
 8004c1a:	d4ee      	bmi.n	8004bfa <__smakebuf_r+0x18>
 8004c1c:	f023 0303 	bic.w	r3, r3, #3
 8004c20:	f043 0302 	orr.w	r3, r3, #2
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	e7e2      	b.n	8004bee <__smakebuf_r+0xc>
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c32:	81a3      	strh	r3, [r4, #12]
 8004c34:	9b01      	ldr	r3, [sp, #4]
 8004c36:	6020      	str	r0, [r4, #0]
 8004c38:	b15b      	cbz	r3, 8004c52 <__smakebuf_r+0x70>
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c40:	f000 f81e 	bl	8004c80 <_isatty_r>
 8004c44:	b128      	cbz	r0, 8004c52 <__smakebuf_r+0x70>
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f023 0303 	bic.w	r3, r3, #3
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	431d      	orrs	r5, r3
 8004c56:	81a5      	strh	r5, [r4, #12]
 8004c58:	e7cf      	b.n	8004bfa <__smakebuf_r+0x18>
	...

08004c5c <_fstat_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	2300      	movs	r3, #0
 8004c60:	4d06      	ldr	r5, [pc, #24]	@ (8004c7c <_fstat_r+0x20>)
 8004c62:	4604      	mov	r4, r0
 8004c64:	4608      	mov	r0, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	f7fd fa75 	bl	8002158 <_fstat>
 8004c6e:	1c43      	adds	r3, r0, #1
 8004c70:	d102      	bne.n	8004c78 <_fstat_r+0x1c>
 8004c72:	682b      	ldr	r3, [r5, #0]
 8004c74:	b103      	cbz	r3, 8004c78 <_fstat_r+0x1c>
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	bd38      	pop	{r3, r4, r5, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000968 	.word	0x20000968

08004c80 <_isatty_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	2300      	movs	r3, #0
 8004c84:	4d05      	ldr	r5, [pc, #20]	@ (8004c9c <_isatty_r+0x1c>)
 8004c86:	4604      	mov	r4, r0
 8004c88:	4608      	mov	r0, r1
 8004c8a:	602b      	str	r3, [r5, #0]
 8004c8c:	f7fd fa73 	bl	8002176 <_isatty>
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d102      	bne.n	8004c9a <_isatty_r+0x1a>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	b103      	cbz	r3, 8004c9a <_isatty_r+0x1a>
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
 8004c9c:	20000968 	.word	0x20000968

08004ca0 <_init>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr

08004cac <_fini>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr
