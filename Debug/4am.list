
4am.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003180  08003180  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08003180  08003180  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003180  08003180  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08003188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  200000b4  0800323c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000794  0800323c  00020794  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a584  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f3  00000000  00000000  0002a6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002c798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000075d  00000000  00000000  0002d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b94  00000000  00000000  0002d8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c1b5  00000000  00000000  00044479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000852a3  00000000  00000000  0005062e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a80  00000000  00000000  000d58d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003b  00000000  00000000  000d8354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dc4 	.word	0x08002dc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08002dc4 	.word	0x08002dc4

0800014c <init_Bullets>:
 };

struct  bullet Bullets[MAXBULLETS];
struct enemyBullets evilBullets[MAXENEMYBULLETS];

void init_Bullets(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAXBULLETS ; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e019      	b.n	800018c <init_Bullets+0x40>
		Bullets[i].x = 0;
 8000158:	4a11      	ldr	r2, [pc, #68]	; (80001a0 <init_Bullets+0x54>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		Bullets[i].y = 0;
 8000162:	4a0f      	ldr	r2, [pc, #60]	; (80001a0 <init_Bullets+0x54>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	009b      	lsls	r3, r3, #2
 8000168:	4413      	add	r3, r2
 800016a:	2200      	movs	r2, #0
 800016c:	705a      	strb	r2, [r3, #1]
		Bullets[i].speed = 0;
 800016e:	4a0c      	ldr	r2, [pc, #48]	; (80001a0 <init_Bullets+0x54>)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	4413      	add	r3, r2
 8000176:	2200      	movs	r2, #0
 8000178:	709a      	strb	r2, [r3, #2]
		Bullets[i].isActive = 0;
 800017a:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <init_Bullets+0x54>)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	009b      	lsls	r3, r3, #2
 8000180:	4413      	add	r3, r2
 8000182:	2200      	movs	r2, #0
 8000184:	70da      	strb	r2, [r3, #3]
	for(int i = 0 ; i < MAXBULLETS ; i++){
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	3301      	adds	r3, #1
 800018a:	607b      	str	r3, [r7, #4]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2b7f      	cmp	r3, #127	; 0x7f
 8000190:	dde2      	ble.n	8000158 <init_Bullets+0xc>
	};
}
 8000192:	bf00      	nop
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000444 	.word	0x20000444

080001a4 <killEnemy>:
//
//	EXTI->PR |= EXTI_PR_PR4;
//
//}

void killEnemy(struct enemy* enemy){
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	enemy->isDying = 1;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2201      	movs	r2, #1
 80001b0:	70da      	strb	r2, [r3, #3]
}
 80001b2:	bf00      	nop
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr

080001bc <calculateCollisions>:
void calculateCollisions(){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAXBULLETS ; i++){
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]
 80001c6:	e065      	b.n	8000294 <calculateCollisions+0xd8>
		if(Bullets[i].isActive == 0){
 80001c8:	4a36      	ldr	r2, [pc, #216]	; (80002a4 <calculateCollisions+0xe8>)
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	4413      	add	r3, r2
 80001d0:	78db      	ldrb	r3, [r3, #3]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d062      	beq.n	800029c <calculateCollisions+0xe0>
			return;
		}

		for(int j = 0 ; j <20 ; j++){
 80001d6:	2300      	movs	r3, #0
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	e055      	b.n	8000288 <calculateCollisions+0xcc>
			if(enemyList[j].isAlive == 0){
 80001dc:	4a32      	ldr	r2, [pc, #200]	; (80002a8 <calculateCollisions+0xec>)
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	009b      	lsls	r3, r3, #2
 80001e2:	4413      	add	r3, r2
 80001e4:	789b      	ldrb	r3, [r3, #2]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d04a      	beq.n	8000280 <calculateCollisions+0xc4>
				continue;
			}

			int8_t disp_x = enemyList[j].x-Bullets[i].x;
 80001ea:	4a2f      	ldr	r2, [pc, #188]	; (80002a8 <calculateCollisions+0xec>)
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 80001f2:	492c      	ldr	r1, [pc, #176]	; (80002a4 <calculateCollisions+0xe8>)
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 80001fa:	1ad3      	subs	r3, r2, r3
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	71fb      	strb	r3, [r7, #7]
			int8_t disp_y = enemyList[j].y-Bullets[i].y;
 8000200:	4a29      	ldr	r2, [pc, #164]	; (80002a8 <calculateCollisions+0xec>)
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	4413      	add	r3, r2
 8000208:	785a      	ldrb	r2, [r3, #1]
 800020a:	4926      	ldr	r1, [pc, #152]	; (80002a4 <calculateCollisions+0xe8>)
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	440b      	add	r3, r1
 8000212:	785b      	ldrb	r3, [r3, #1]
 8000214:	1ad3      	subs	r3, r2, r3
 8000216:	b2db      	uxtb	r3, r3
 8000218:	71bb      	strb	r3, [r7, #6]
			disp_x = abs(disp_x);
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	bfb8      	it	lt
 8000222:	425b      	neglt	r3, r3
 8000224:	b2db      	uxtb	r3, r3
 8000226:	71fb      	strb	r3, [r7, #7]
			disp_y = abs(disp_y);
 8000228:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800022c:	2b00      	cmp	r3, #0
 800022e:	bfb8      	it	lt
 8000230:	425b      	neglt	r3, r3
 8000232:	b2db      	uxtb	r3, r3
 8000234:	71bb      	strb	r3, [r7, #6]

			if(disp_x < 8 && disp_y < 8){
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	2b07      	cmp	r3, #7
 800023c:	dc21      	bgt.n	8000282 <calculateCollisions+0xc6>
 800023e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000242:	2b07      	cmp	r3, #7
 8000244:	dc1d      	bgt.n	8000282 <calculateCollisions+0xc6>
				killEnemy(&enemyList[j]);
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	4a17      	ldr	r2, [pc, #92]	; (80002a8 <calculateCollisions+0xec>)
 800024c:	4413      	add	r3, r2
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffa8 	bl	80001a4 <killEnemy>
				Bullets[i].isActive = 0;
 8000254:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <calculateCollisions+0xe8>)
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	4413      	add	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	70da      	strb	r2, [r3, #3]
				ST7735_DrawPixel(Bullets[i].x , Bullets[i].y , 0x0000);
 8000260:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <calculateCollisions+0xe8>)
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000268:	b298      	uxth	r0, r3
 800026a:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <calculateCollisions+0xe8>)
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	4413      	add	r3, r2
 8000272:	785b      	ldrb	r3, [r3, #1]
 8000274:	b29b      	uxth	r3, r3
 8000276:	2200      	movs	r2, #0
 8000278:	4619      	mov	r1, r3
 800027a:	f000 fcc7 	bl	8000c0c <ST7735_DrawPixel>
				break;
 800027e:	e006      	b.n	800028e <calculateCollisions+0xd2>
				continue;
 8000280:	bf00      	nop
		for(int j = 0 ; j <20 ; j++){
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	2b13      	cmp	r3, #19
 800028c:	dda6      	ble.n	80001dc <calculateCollisions+0x20>
	for(int i = 0 ; i < MAXBULLETS ; i++){
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	3301      	adds	r3, #1
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	2b7f      	cmp	r3, #127	; 0x7f
 8000298:	dd96      	ble.n	80001c8 <calculateCollisions+0xc>
 800029a:	e000      	b.n	800029e <calculateCollisions+0xe2>
			return;
 800029c:	bf00      	nop
			}
		}

	}
}
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000444 	.word	0x20000444
 80002a8:	20000000 	.word	0x20000000

080002ac <update_Bullets>:

void update_Bullets(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAXBULLETS ; i++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	e049      	b.n	800034c <update_Bullets+0xa0>
		if(!Bullets[i].isActive){
 80002b8:	4a28      	ldr	r2, [pc, #160]	; (800035c <update_Bullets+0xb0>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	4413      	add	r3, r2
 80002c0:	78db      	ldrb	r3, [r3, #3]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d03e      	beq.n	8000344 <update_Bullets+0x98>
			continue;
		}

		if(Bullets[i].y == 127){
 80002c6:	4a25      	ldr	r2, [pc, #148]	; (800035c <update_Bullets+0xb0>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	4413      	add	r3, r2
 80002ce:	785b      	ldrb	r3, [r3, #1]
 80002d0:	2b7f      	cmp	r3, #127	; 0x7f
 80002d2:	d105      	bne.n	80002e0 <update_Bullets+0x34>
			Bullets[i].isActive = 0;
 80002d4:	4a21      	ldr	r2, [pc, #132]	; (800035c <update_Bullets+0xb0>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	4413      	add	r3, r2
 80002dc:	2200      	movs	r2, #0
 80002de:	70da      	strb	r2, [r3, #3]
		}

		ST7735_DrawPixel(Bullets[i].x , Bullets[i].y , 0x0000);
 80002e0:	4a1e      	ldr	r2, [pc, #120]	; (800035c <update_Bullets+0xb0>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80002e8:	b298      	uxth	r0, r3
 80002ea:	4a1c      	ldr	r2, [pc, #112]	; (800035c <update_Bullets+0xb0>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	785b      	ldrb	r3, [r3, #1]
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	2200      	movs	r2, #0
 80002f8:	4619      	mov	r1, r3
 80002fa:	f000 fc87 	bl	8000c0c <ST7735_DrawPixel>
		Bullets[i].y -= Bullets[i].speed;
 80002fe:	4a17      	ldr	r2, [pc, #92]	; (800035c <update_Bullets+0xb0>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	785a      	ldrb	r2, [r3, #1]
 8000308:	4914      	ldr	r1, [pc, #80]	; (800035c <update_Bullets+0xb0>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	440b      	add	r3, r1
 8000310:	789b      	ldrb	r3, [r3, #2]
 8000312:	1ad3      	subs	r3, r2, r3
 8000314:	b2d9      	uxtb	r1, r3
 8000316:	4a11      	ldr	r2, [pc, #68]	; (800035c <update_Bullets+0xb0>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	4413      	add	r3, r2
 800031e:	460a      	mov	r2, r1
 8000320:	705a      	strb	r2, [r3, #1]
		ST7735_DrawPixel(Bullets[i].x , Bullets[i].y , 0xFFFF);
 8000322:	4a0e      	ldr	r2, [pc, #56]	; (800035c <update_Bullets+0xb0>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800032a:	b298      	uxth	r0, r3
 800032c:	4a0b      	ldr	r2, [pc, #44]	; (800035c <update_Bullets+0xb0>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	4413      	add	r3, r2
 8000334:	785b      	ldrb	r3, [r3, #1]
 8000336:	b29b      	uxth	r3, r3
 8000338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800033c:	4619      	mov	r1, r3
 800033e:	f000 fc65 	bl	8000c0c <ST7735_DrawPixel>
 8000342:	e000      	b.n	8000346 <update_Bullets+0x9a>
			continue;
 8000344:	bf00      	nop
	for(int i = 0 ; i < MAXBULLETS ; i++){
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3301      	adds	r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b7f      	cmp	r3, #127	; 0x7f
 8000350:	ddb2      	ble.n	80002b8 <update_Bullets+0xc>
	}
}
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000444 	.word	0x20000444

08000360 <updateEnemyStates>:
//	ST7735_DrawImage(playerObj.x , playerObj.y , 9 , 9 , player_ship_flat);
//	EXTI->PR |= EXTI_PR_PR1;
//
//}

void updateEnemyStates(){
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 20 ; i++){
 8000366:	2300      	movs	r3, #0
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	e07b      	b.n	8000464 <updateEnemyStates+0x104>
		if(enemyList[i].isAlive == 0){
 800036c:	4a41      	ldr	r2, [pc, #260]	; (8000474 <updateEnemyStates+0x114>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4413      	add	r3, r2
 8000374:	789b      	ldrb	r3, [r3, #2]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d070      	beq.n	800045c <updateEnemyStates+0xfc>
			continue;
		}else if(enemyList[i].isDying == 1){
 800037a:	4a3e      	ldr	r2, [pc, #248]	; (8000474 <updateEnemyStates+0x114>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	4413      	add	r3, r2
 8000382:	78db      	ldrb	r3, [r3, #3]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d11e      	bne.n	80003c6 <updateEnemyStates+0x66>
			enemyList[i].isDying++ ;
 8000388:	4a3a      	ldr	r2, [pc, #232]	; (8000474 <updateEnemyStates+0x114>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4413      	add	r3, r2
 8000390:	78db      	ldrb	r3, [r3, #3]
 8000392:	3301      	adds	r3, #1
 8000394:	b2d9      	uxtb	r1, r3
 8000396:	4a37      	ldr	r2, [pc, #220]	; (8000474 <updateEnemyStates+0x114>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	4413      	add	r3, r2
 800039e:	460a      	mov	r2, r1
 80003a0:	70da      	strb	r2, [r3, #3]
			ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_dying1);
 80003a2:	4a34      	ldr	r2, [pc, #208]	; (8000474 <updateEnemyStates+0x114>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80003aa:	b298      	uxth	r0, r3
 80003ac:	4a31      	ldr	r2, [pc, #196]	; (8000474 <updateEnemyStates+0x114>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	4413      	add	r3, r2
 80003b4:	785b      	ldrb	r3, [r3, #1]
 80003b6:	b299      	uxth	r1, r3
 80003b8:	4b2f      	ldr	r3, [pc, #188]	; (8000478 <updateEnemyStates+0x118>)
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	2308      	movs	r3, #8
 80003be:	2208      	movs	r2, #8
 80003c0:	f000 fcef 	bl	8000da2 <ST7735_DrawImage>
 80003c4:	e04b      	b.n	800045e <updateEnemyStates+0xfe>
		}else if(enemyList[i].isDying == 2){
 80003c6:	4a2b      	ldr	r2, [pc, #172]	; (8000474 <updateEnemyStates+0x114>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	4413      	add	r3, r2
 80003ce:	78db      	ldrb	r3, [r3, #3]
 80003d0:	2b02      	cmp	r3, #2
 80003d2:	d11e      	bne.n	8000412 <updateEnemyStates+0xb2>
			enemyList[i].isDying++ ;
 80003d4:	4a27      	ldr	r2, [pc, #156]	; (8000474 <updateEnemyStates+0x114>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	4413      	add	r3, r2
 80003dc:	78db      	ldrb	r3, [r3, #3]
 80003de:	3301      	adds	r3, #1
 80003e0:	b2d9      	uxtb	r1, r3
 80003e2:	4a24      	ldr	r2, [pc, #144]	; (8000474 <updateEnemyStates+0x114>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	4413      	add	r3, r2
 80003ea:	460a      	mov	r2, r1
 80003ec:	70da      	strb	r2, [r3, #3]
			ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_dying2);
 80003ee:	4a21      	ldr	r2, [pc, #132]	; (8000474 <updateEnemyStates+0x114>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80003f6:	b298      	uxth	r0, r3
 80003f8:	4a1e      	ldr	r2, [pc, #120]	; (8000474 <updateEnemyStates+0x114>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	4413      	add	r3, r2
 8000400:	785b      	ldrb	r3, [r3, #1]
 8000402:	b299      	uxth	r1, r3
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <updateEnemyStates+0x11c>)
 8000406:	9300      	str	r3, [sp, #0]
 8000408:	2308      	movs	r3, #8
 800040a:	2208      	movs	r2, #8
 800040c:	f000 fcc9 	bl	8000da2 <ST7735_DrawImage>
 8000410:	e025      	b.n	800045e <updateEnemyStates+0xfe>
		}else if(enemyList[i].isDying == 3){
 8000412:	4a18      	ldr	r2, [pc, #96]	; (8000474 <updateEnemyStates+0x114>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	4413      	add	r3, r2
 800041a:	78db      	ldrb	r3, [r3, #3]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d11e      	bne.n	800045e <updateEnemyStates+0xfe>
			enemyList[i].isAlive = 0;
 8000420:	4a14      	ldr	r2, [pc, #80]	; (8000474 <updateEnemyStates+0x114>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	2200      	movs	r2, #0
 800042a:	709a      	strb	r2, [r3, #2]
			enemyList[i].isDying = 0;
 800042c:	4a11      	ldr	r2, [pc, #68]	; (8000474 <updateEnemyStates+0x114>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4413      	add	r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	70da      	strb	r2, [r3, #3]
			ST7735_FillRectangleFast(enemyList[i].x , enemyList[i].y , 8 , 8 , 0x0000);
 8000438:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <updateEnemyStates+0x114>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000440:	b298      	uxth	r0, r3
 8000442:	4a0c      	ldr	r2, [pc, #48]	; (8000474 <updateEnemyStates+0x114>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	4413      	add	r3, r2
 800044a:	785b      	ldrb	r3, [r3, #1]
 800044c:	b299      	uxth	r1, r3
 800044e:	2300      	movs	r3, #0
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	2308      	movs	r3, #8
 8000454:	2208      	movs	r2, #8
 8000456:	f000 fc0d 	bl	8000c74 <ST7735_FillRectangleFast>
 800045a:	e000      	b.n	800045e <updateEnemyStates+0xfe>
			continue;
 800045c:	bf00      	nop
	for(int i = 0 ; i < 20 ; i++){
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	3301      	adds	r3, #1
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b13      	cmp	r3, #19
 8000468:	dd80      	ble.n	800036c <updateEnemyStates+0xc>
		}
	}
}
 800046a:	bf00      	nop
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000000 	.word	0x20000000
 8000478:	08002fe4 	.word	0x08002fe4
 800047c:	08003064 	.word	0x08003064

08000480 <updatePlayerSpeed>:

void updatePlayerSpeed(){
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
	int8_t speed = GPIOA->IDR;
 8000486:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <updatePlayerSpeed+0xc0>)
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	71fb      	strb	r3, [r7, #7]
	if((speed & 0x1B )== 0){
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	f003 031b 	and.w	r3, r3, #27
 8000492:	2b00      	cmp	r3, #0
 8000494:	d106      	bne.n	80004a4 <updatePlayerSpeed+0x24>
		playerObj.dx = 0;
 8000496:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <updatePlayerSpeed+0xc4>)
 8000498:	2200      	movs	r2, #0
 800049a:	709a      	strb	r2, [r3, #2]
		playerObj.dy = 0;
 800049c:	4b29      	ldr	r3, [pc, #164]	; (8000544 <updatePlayerSpeed+0xc4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	70da      	strb	r2, [r3, #3]
		return;
 80004a2:	e049      	b.n	8000538 <updatePlayerSpeed+0xb8>
	}

	if(playerObj.dx == 0x3) speed &= ~(0x09);
 80004a4:	4b27      	ldr	r3, [pc, #156]	; (8000544 <updatePlayerSpeed+0xc4>)
 80004a6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	d103      	bne.n	80004b6 <updatePlayerSpeed+0x36>
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	f023 0309 	bic.w	r3, r3, #9
 80004b4:	71fb      	strb	r3, [r7, #7]
	if(playerObj.dy == 0x3) speed &= ~(0x11);
 80004b6:	4b23      	ldr	r3, [pc, #140]	; (8000544 <updatePlayerSpeed+0xc4>)
 80004b8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80004bc:	2b03      	cmp	r3, #3
 80004be:	d103      	bne.n	80004c8 <updatePlayerSpeed+0x48>
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	f023 0311 	bic.w	r3, r3, #17
 80004c6:	71fb      	strb	r3, [r7, #7]


	if(speed & DOWN_Pin) playerObj.dy++;
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d008      	beq.n	80004e4 <updatePlayerSpeed+0x64>
 80004d2:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <updatePlayerSpeed+0xc4>)
 80004d4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	3301      	adds	r3, #1
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	b25a      	sxtb	r2, r3
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <updatePlayerSpeed+0xc4>)
 80004e2:	70da      	strb	r2, [r3, #3]
	if(speed & UP_Pin) playerObj.dy--;
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	f003 0310 	and.w	r3, r3, #16
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d008      	beq.n	8000500 <updatePlayerSpeed+0x80>
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <updatePlayerSpeed+0xc4>)
 80004f0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	3b01      	subs	r3, #1
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	b25a      	sxtb	r2, r3
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <updatePlayerSpeed+0xc4>)
 80004fe:	70da      	strb	r2, [r3, #3]
	if(speed & LEFT_Pin) playerObj.dx--;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	f003 0308 	and.w	r3, r3, #8
 8000506:	2b00      	cmp	r3, #0
 8000508:	d008      	beq.n	800051c <updatePlayerSpeed+0x9c>
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <updatePlayerSpeed+0xc4>)
 800050c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	3b01      	subs	r3, #1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	b25a      	sxtb	r2, r3
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <updatePlayerSpeed+0xc4>)
 800051a:	709a      	strb	r2, [r3, #2]
	if(speed & RIGHT_Pin) playerObj.dx++;
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	2b00      	cmp	r3, #0
 8000524:	d008      	beq.n	8000538 <updatePlayerSpeed+0xb8>
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <updatePlayerSpeed+0xc4>)
 8000528:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	3301      	adds	r3, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	b25a      	sxtb	r2, r3
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <updatePlayerSpeed+0xc4>)
 8000536:	709a      	strb	r2, [r3, #2]
}
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40010800 	.word	0x40010800
 8000544:	20000050 	.word	0x20000050

08000548 <updatePlayerPosition>:

void updatePlayerPosition(){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af02      	add	r7, sp, #8
	ST7735_FillRectangleFast(playerObj.x , playerObj.y , 12 , 11 , 0x0000);
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <updatePlayerPosition+0x64>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b298      	uxth	r0, r3
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <updatePlayerPosition+0x64>)
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	b299      	uxth	r1, r3
 800055a:	2300      	movs	r3, #0
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	230b      	movs	r3, #11
 8000560:	220c      	movs	r2, #12
 8000562:	f000 fb87 	bl	8000c74 <ST7735_FillRectangleFast>
	playerObj.x += playerObj.dx ;
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <updatePlayerPosition+0x64>)
 8000568:	781a      	ldrb	r2, [r3, #0]
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <updatePlayerPosition+0x64>)
 800056c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4413      	add	r3, r2
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <updatePlayerPosition+0x64>)
 8000578:	701a      	strb	r2, [r3, #0]
	playerObj.y += playerObj.dy ;
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <updatePlayerPosition+0x64>)
 800057c:	785a      	ldrb	r2, [r3, #1]
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <updatePlayerPosition+0x64>)
 8000580:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	4413      	add	r3, r2
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <updatePlayerPosition+0x64>)
 800058c:	705a      	strb	r2, [r3, #1]

	ST7735_DrawImage(playerObj.x , playerObj.y , 12 , 11 , player_ship_flat);
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <updatePlayerPosition+0x64>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b298      	uxth	r0, r3
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <updatePlayerPosition+0x64>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	b299      	uxth	r1, r3
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <updatePlayerPosition+0x68>)
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	230b      	movs	r3, #11
 80005a0:	220c      	movs	r2, #12
 80005a2:	f000 fbfe 	bl	8000da2 <ST7735_DrawImage>
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000050 	.word	0x20000050
 80005b0:	08002ddc 	.word	0x08002ddc

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fd8d 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f8a5 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f97b 	bl	80008bc <MX_GPIO_Init>
  MX_DMA_Init();
 80005c6:	f000 f95b 	bl	8000880 <MX_DMA_Init>
  MX_SPI2_Init();
 80005ca:	f000 f8ff 	bl	80007cc <MX_SPI2_Init>
  MX_USB_PCD_Init();
 80005ce:	f000 f935 	bl	800083c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80005d2:	f000 fb01 	bl	8000bd8 <ST7735_Init>
  ST7735_FillScreenFast(0x0000);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 fbd2 	bl	8000d80 <ST7735_FillScreenFast>

  init_Bullets();
 80005dc:	f7ff fdb6 	bl	800014c <init_Bullets>

  for(int i = 0 ; i <20 ; i++){
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e013      	b.n	800060e <main+0x5a>
	  ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_flat1 );
 80005e6:	4a44      	ldr	r2, [pc, #272]	; (80006f8 <main+0x144>)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80005ee:	b298      	uxth	r0, r3
 80005f0:	4a41      	ldr	r2, [pc, #260]	; (80006f8 <main+0x144>)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	b299      	uxth	r1, r3
 80005fc:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <main+0x148>)
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2308      	movs	r3, #8
 8000602:	2208      	movs	r2, #8
 8000604:	f000 fbcd 	bl	8000da2 <ST7735_DrawImage>
  for(int i = 0 ; i <20 ; i++){
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b13      	cmp	r3, #19
 8000612:	dde8      	ble.n	80005e6 <main+0x32>
  }

  ST7735_DrawImage(playerObj.x , playerObj.y , 12 , 11 , player_ship_flat);
 8000614:	4b3a      	ldr	r3, [pc, #232]	; (8000700 <main+0x14c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b298      	uxth	r0, r3
 800061a:	4b39      	ldr	r3, [pc, #228]	; (8000700 <main+0x14c>)
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	b299      	uxth	r1, r3
 8000620:	4b38      	ldr	r3, [pc, #224]	; (8000704 <main+0x150>)
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	230b      	movs	r3, #11
 8000626:	220c      	movs	r2, #12
 8000628:	f000 fbbb 	bl	8000da2 <ST7735_DrawImage>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  updatePlayerSpeed();
 800062c:	f7ff ff28 	bl	8000480 <updatePlayerSpeed>
	  updatePlayerPosition();
 8000630:	f7ff ff8a 	bl	8000548 <updatePlayerPosition>
	  update_Bullets();
 8000634:	f7ff fe3a 	bl	80002ac <update_Bullets>
	  calculateCollisions();
 8000638:	f7ff fdc0 	bl	80001bc <calculateCollisions>
	  for(int i = 0 ; i < 20 ; i++){
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	e023      	b.n	800068a <main+0xd6>
		  if(enemyList[i].isAlive == 0 || enemyList[i].isDying != 0){
 8000642:	4a2d      	ldr	r2, [pc, #180]	; (80006f8 <main+0x144>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	4413      	add	r3, r2
 800064a:	789b      	ldrb	r3, [r3, #2]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d018      	beq.n	8000682 <main+0xce>
 8000650:	4a29      	ldr	r2, [pc, #164]	; (80006f8 <main+0x144>)
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	78db      	ldrb	r3, [r3, #3]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d111      	bne.n	8000682 <main+0xce>
			  continue;
		  }else{
			  ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_flat1);
 800065e:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <main+0x144>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000666:	b298      	uxth	r0, r3
 8000668:	4a23      	ldr	r2, [pc, #140]	; (80006f8 <main+0x144>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	b299      	uxth	r1, r3
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <main+0x148>)
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2308      	movs	r3, #8
 800067a:	2208      	movs	r2, #8
 800067c:	f000 fb91 	bl	8000da2 <ST7735_DrawImage>
 8000680:	e000      	b.n	8000684 <main+0xd0>
			  continue;
 8000682:	bf00      	nop
	  for(int i = 0 ; i < 20 ; i++){
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	3301      	adds	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b13      	cmp	r3, #19
 800068e:	ddd8      	ble.n	8000642 <main+0x8e>
		  }
	  }
	  updateEnemyStates();
 8000690:	f7ff fe66 	bl	8000360 <updateEnemyStates>
	  HAL_Delay(100);
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f000 fd81 	bl	800119c <HAL_Delay>
	  for(int i = 0 ; i < 20 ; i++){
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	e023      	b.n	80006e8 <main+0x134>
		  if(enemyList[i].isAlive == 0 || enemyList[i].isDying != 0){
 80006a0:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <main+0x144>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d018      	beq.n	80006e0 <main+0x12c>
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <main+0x144>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4413      	add	r3, r2
 80006b6:	78db      	ldrb	r3, [r3, #3]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d111      	bne.n	80006e0 <main+0x12c>
			  continue;
		  }else{
			  ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_flat2);
 80006bc:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <main+0x144>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80006c4:	b298      	uxth	r0, r3
 80006c6:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <main+0x144>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	785b      	ldrb	r3, [r3, #1]
 80006d0:	b299      	uxth	r1, r3
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <main+0x154>)
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2308      	movs	r3, #8
 80006d8:	2208      	movs	r2, #8
 80006da:	f000 fb62 	bl	8000da2 <ST7735_DrawImage>
 80006de:	e000      	b.n	80006e2 <main+0x12e>
			  continue;
 80006e0:	bf00      	nop
	  for(int i = 0 ; i < 20 ; i++){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3301      	adds	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b13      	cmp	r3, #19
 80006ec:	ddd8      	ble.n	80006a0 <main+0xec>
		  }
	  }
	  HAL_Delay(100);
 80006ee:	2064      	movs	r0, #100	; 0x64
 80006f0:	f000 fd54 	bl	800119c <HAL_Delay>
	  updatePlayerSpeed();
 80006f4:	e79a      	b.n	800062c <main+0x78>
 80006f6:	bf00      	nop
 80006f8:	20000000 	.word	0x20000000
 80006fc:	08002ee4 	.word	0x08002ee4
 8000700:	20000050 	.word	0x20000050
 8000704:	08002ddc 	.word	0x08002ddc
 8000708:	08002f64 	.word	0x08002f64

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000716:	2228      	movs	r2, #40	; 0x28
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fac6 	bl	8002cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073c:	2301      	movs	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000758:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fa3e 	bl	8001be4 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800076e:	f000 f943 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000782:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2102      	movs	r1, #2
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fcaa 	bl	80020e8 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800079a:	f000 f92d 	bl	80009f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800079e:	2310      	movs	r3, #16
 80007a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fe31 	bl	8002410 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007b4:	f000 f920 	bl	80009f8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80007be:	2000      	movs	r0, #0
 80007c0:	f001 fd7c 	bl	80022bc <HAL_RCC_MCOConfig>
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	; 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_SPI2_Init+0x68>)
 80007d2:	4a19      	ldr	r2, [pc, #100]	; (8000838 <MX_SPI2_Init+0x6c>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_SPI2_Init+0x68>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_SPI2_Init+0x68>)
 80007e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007e4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_SPI2_Init+0x68>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_SPI2_Init+0x68>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_SPI2_Init+0x68>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_SPI2_Init+0x68>)
 80007fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_SPI2_Init+0x68>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_SPI2_Init+0x68>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_SPI2_Init+0x68>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_SPI2_Init+0x68>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_SPI2_Init+0x68>)
 800081a:	220a      	movs	r2, #10
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_SPI2_Init+0x68>)
 8000820:	f001 feac 	bl	800257c <HAL_SPI_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800082a:	f000 f8e5 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000d0 	.word	0x200000d0
 8000838:	40003800 	.word	0x40003800

0800083c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_USB_PCD_Init+0x3c>)
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <MX_USB_PCD_Init+0x40>)
 8000844:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USB_PCD_Init+0x3c>)
 8000848:	2208      	movs	r2, #8
 800084a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_USB_PCD_Init+0x3c>)
 800084e:	2202      	movs	r2, #2
 8000850:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USB_PCD_Init+0x3c>)
 8000854:	2200      	movs	r2, #0
 8000856:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_USB_PCD_Init+0x3c>)
 800085a:	2200      	movs	r2, #0
 800085c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USB_PCD_Init+0x3c>)
 8000860:	2200      	movs	r2, #0
 8000862:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_USB_PCD_Init+0x3c>)
 8000866:	f001 f8c7 	bl	80019f8 <HAL_PCD_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000870:	f000 f8c2 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000016c 	.word	0x2000016c
 800087c:	40005c00 	.word	0x40005c00

08000880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_DMA_Init+0x38>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <MX_DMA_Init+0x38>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_DMA_Init+0x38>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	200f      	movs	r0, #15
 80008a4:	f000 fd75 	bl	8001392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008a8:	200f      	movs	r0, #15
 80008aa:	f000 fd8e 	bl	80013ca <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d0:	4b45      	ldr	r3, [pc, #276]	; (80009e8 <MX_GPIO_Init+0x12c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a44      	ldr	r2, [pc, #272]	; (80009e8 <MX_GPIO_Init+0x12c>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b42      	ldr	r3, [pc, #264]	; (80009e8 <MX_GPIO_Init+0x12c>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e8:	4b3f      	ldr	r3, [pc, #252]	; (80009e8 <MX_GPIO_Init+0x12c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a3e      	ldr	r2, [pc, #248]	; (80009e8 <MX_GPIO_Init+0x12c>)
 80008ee:	f043 0320 	orr.w	r3, r3, #32
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <MX_GPIO_Init+0x12c>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0320 	and.w	r3, r3, #32
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <MX_GPIO_Init+0x12c>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a38      	ldr	r2, [pc, #224]	; (80009e8 <MX_GPIO_Init+0x12c>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <MX_GPIO_Init+0x12c>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <MX_GPIO_Init+0x12c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a32      	ldr	r2, [pc, #200]	; (80009e8 <MX_GPIO_Init+0x12c>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <MX_GPIO_Init+0x12c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000936:	482d      	ldr	r0, [pc, #180]	; (80009ec <MX_GPIO_Init+0x130>)
 8000938:	f001 f846 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_BL_Pin|ST7735_DC_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000942:	482b      	ldr	r0, [pc, #172]	; (80009f0 <MX_GPIO_Init+0x134>)
 8000944:	f001 f840 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800094e:	4829      	ldr	r0, [pc, #164]	; (80009f4 <MX_GPIO_Init+0x138>)
 8000950:	f001 f83a 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2302      	movs	r3, #2
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	4619      	mov	r1, r3
 800096c:	481f      	ldr	r0, [pc, #124]	; (80009ec <MX_GPIO_Init+0x130>)
 800096e:	f000 fea7 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_Pin RIGHT_Pin FIRE_Pin LEFT_Pin
                           UP_Pin */
  GPIO_InitStruct.Pin = DOWN_Pin|RIGHT_Pin|FIRE_Pin|LEFT_Pin
 8000972:	231f      	movs	r3, #31
 8000974:	613b      	str	r3, [r7, #16]
                          |UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	481b      	ldr	r0, [pc, #108]	; (80009f4 <MX_GPIO_Init+0x138>)
 8000986:	f000 fe9b 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_BL_Pin ST7735_DC_Pin */
  GPIO_InitStruct.Pin = ST7735_BL_Pin|ST7735_DC_Pin;
 800098a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800098e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	4813      	ldr	r0, [pc, #76]	; (80009f0 <MX_GPIO_Init+0x134>)
 80009a4:	f000 fe8c 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4619      	mov	r1, r3
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_GPIO_Init+0x138>)
 80009be:	f000 fe7f 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin|ST7735_RES_Pin;
 80009c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <MX_GPIO_Init+0x138>)
 80009dc:	f000 fe70 	bl	80016c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40011000 	.word	0x40011000
 80009f0:	40010c00 	.word	0x40010c00
 80009f4:	40010800 	.word	0x40010800

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0e:	4802      	ldr	r0, [pc, #8]	; (8000a18 <ST7735_Select+0x14>)
 8000a10:	f000 ffda 	bl	80019c8 <HAL_GPIO_WritePin>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40010800 	.word	0x40010800

08000a1c <ST7735_Unselect>:

void ST7735_Unselect() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a26:	4802      	ldr	r0, [pc, #8]	; (8000a30 <ST7735_Unselect+0x14>)
 8000a28:	f000 ffce 	bl	80019c8 <HAL_GPIO_WritePin>
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40010800 	.word	0x40010800

08000a34 <ST7735_Reset>:

static void ST7735_Reset() {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <ST7735_Reset+0x28>)
 8000a40:	f000 ffc2 	bl	80019c8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a44:	2005      	movs	r0, #5
 8000a46:	f000 fba9 	bl	800119c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <ST7735_Reset+0x28>)
 8000a52:	f000 ffb9 	bl	80019c8 <HAL_GPIO_WritePin>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010800 	.word	0x40010800

08000a60 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <ST7735_WriteCommand+0x2c>)
 8000a72:	f000 ffa9 	bl	80019c8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000a76:	1df9      	adds	r1, r7, #7
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4804      	ldr	r0, [pc, #16]	; (8000a90 <ST7735_WriteCommand+0x30>)
 8000a80:	f001 fe00 	bl	8002684 <HAL_SPI_Transmit>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40010c00 	.word	0x40010c00
 8000a90:	200000d0 	.word	0x200000d0

08000a94 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <ST7735_WriteData+0x30>)
 8000aa6:	f000 ff8f 	bl	80019c8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <ST7735_WriteData+0x34>)
 8000ab6:	f001 fde5 	bl	8002684 <HAL_SPI_Transmit>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40010c00 	.word	0x40010c00
 8000ac8:	200000d0 	.word	0x200000d0

08000acc <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000ade:	e034      	b.n	8000b4a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000aea:	7afb      	ldrb	r3, [r7, #11]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ffb7 	bl	8000a60 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	1c5a      	adds	r2, r3, #1
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000afc:	7abb      	ldrb	r3, [r7, #10]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b04:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000b06:	7abb      	ldrb	r3, [r7, #10]
 8000b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b0c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000b0e:	7abb      	ldrb	r3, [r7, #10]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d008      	beq.n	8000b26 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000b14:	7abb      	ldrb	r3, [r7, #10]
 8000b16:	4619      	mov	r1, r3
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ffbb 	bl	8000a94 <ST7735_WriteData>
            addr += numArgs;
 8000b1e:	7abb      	ldrb	r3, [r7, #10]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000b26:	89bb      	ldrh	r3, [r7, #12]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00e      	beq.n	8000b4a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000b36:	89bb      	ldrh	r3, [r7, #12]
 8000b38:	2bff      	cmp	r3, #255	; 0xff
 8000b3a:	d102      	bne.n	8000b42 <ST7735_ExecuteCommandList+0x76>
 8000b3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b40:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000b42:	89bb      	ldrh	r3, [r7, #12]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 fb29 	bl	800119c <HAL_Delay>
    while(numCommands--) {
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	73fa      	strb	r2, [r7, #15]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1c5      	bne.n	8000ae0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000b5e:	b590      	push	{r4, r7, lr}
 8000b60:	b085      	sub	sp, #20
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4604      	mov	r4, r0
 8000b66:	4608      	mov	r0, r1
 8000b68:	4611      	mov	r1, r2
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4603      	mov	r3, r0
 8000b72:	71bb      	strb	r3, [r7, #6]
 8000b74:	460b      	mov	r3, r1
 8000b76:	717b      	strb	r3, [r7, #5]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000b7c:	202a      	movs	r0, #42	; 0x2a
 8000b7e:	f7ff ff6f 	bl	8000a60 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000b82:	2300      	movs	r3, #0
 8000b84:	733b      	strb	r3, [r7, #12]
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	737b      	strb	r3, [r7, #13]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	73bb      	strb	r3, [r7, #14]
 8000b92:	797b      	ldrb	r3, [r7, #5]
 8000b94:	3302      	adds	r3, #2
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff77 	bl	8000a94 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000ba6:	202b      	movs	r0, #43	; 0x2b
 8000ba8:	f7ff ff5a 	bl	8000a60 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	3303      	adds	r3, #3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000bb4:	793b      	ldrb	r3, [r7, #4]
 8000bb6:	3303      	adds	r3, #3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff66 	bl	8000a94 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000bc8:	202c      	movs	r0, #44	; 0x2c
 8000bca:	f7ff ff49 	bl	8000a60 <ST7735_WriteCommand>
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd90      	pop	{r4, r7, pc}
	...

08000bd8 <ST7735_Init>:

void ST7735_Init() {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000bdc:	f7ff ff12 	bl	8000a04 <ST7735_Select>
    ST7735_Reset();
 8000be0:	f7ff ff28 	bl	8000a34 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <ST7735_Init+0x28>)
 8000be6:	f7ff ff71 	bl	8000acc <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <ST7735_Init+0x2c>)
 8000bec:	f7ff ff6e 	bl	8000acc <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <ST7735_Init+0x30>)
 8000bf2:	f7ff ff6b 	bl	8000acc <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000bf6:	f7ff ff11 	bl	8000a1c <ST7735_Unselect>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	080030e4 	.word	0x080030e4
 8000c04:	08003120 	.word	0x08003120
 8000c08:	08003130 	.word	0x08003130

08000c0c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	460b      	mov	r3, r1
 8000c18:	80bb      	strh	r3, [r7, #4]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	2b7f      	cmp	r3, #127	; 0x7f
 8000c22:	d823      	bhi.n	8000c6c <ST7735_DrawPixel+0x60>
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	2b7f      	cmp	r3, #127	; 0x7f
 8000c28:	d820      	bhi.n	8000c6c <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8000c2a:	f7ff feeb 	bl	8000a04 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	b2d8      	uxtb	r0, r3
 8000c32:	88bb      	ldrh	r3, [r7, #4]
 8000c34:	b2d9      	uxtb	r1, r3
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	88bb      	ldrh	r3, [r7, #4]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	3301      	adds	r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f7ff ff8a 	bl	8000b5e <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	733b      	strb	r3, [r7, #12]
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	2102      	movs	r1, #2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff17 	bl	8000a94 <ST7735_WriteData>

    ST7735_Unselect();
 8000c66:	f7ff fed9 	bl	8000a1c <ST7735_Unselect>
 8000c6a:	e000      	b.n	8000c6e <ST7735_DrawPixel+0x62>
        return;
 8000c6c:	bf00      	nop
}
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <ST7735_FillRectangleFast>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	4611      	mov	r1, r2
 8000c80:	461a      	mov	r2, r3
 8000c82:	4623      	mov	r3, r4
 8000c84:	80fb      	strh	r3, [r7, #6]
 8000c86:	4603      	mov	r3, r0
 8000c88:	80bb      	strh	r3, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	807b      	strh	r3, [r7, #2]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	2b7f      	cmp	r3, #127	; 0x7f
 8000c96:	d86a      	bhi.n	8000d6e <ST7735_FillRectangleFast+0xfa>
 8000c98:	88bb      	ldrh	r3, [r7, #4]
 8000c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c9c:	d867      	bhi.n	8000d6e <ST7735_FillRectangleFast+0xfa>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000c9e:	88fa      	ldrh	r2, [r7, #6]
 8000ca0:	887b      	ldrh	r3, [r7, #2]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	2b80      	cmp	r3, #128	; 0x80
 8000ca6:	dd03      	ble.n	8000cb0 <ST7735_FillRectangleFast+0x3c>
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000cae:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000cb0:	88ba      	ldrh	r2, [r7, #4]
 8000cb2:	883b      	ldrh	r3, [r7, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2b80      	cmp	r3, #128	; 0x80
 8000cb8:	dd03      	ble.n	8000cc2 <ST7735_FillRectangleFast+0x4e>
 8000cba:	88bb      	ldrh	r3, [r7, #4]
 8000cbc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000cc0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000cc2:	f7ff fe9f 	bl	8000a04 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	b2d8      	uxtb	r0, r3
 8000cca:	88bb      	ldrh	r3, [r7, #4]
 8000ccc:	b2d9      	uxtb	r1, r3
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	887b      	ldrh	r3, [r7, #2]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b2dc      	uxtb	r4, r3
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	883b      	ldrh	r3, [r7, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4622      	mov	r2, r4
 8000cf0:	f7ff ff35 	bl	8000b5e <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8000cf4:	8c3b      	ldrh	r3, [r7, #32]
 8000cf6:	0a1b      	lsrs	r3, r3, #8
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	723b      	strb	r3, [r7, #8]
 8000cfe:	8c3b      	ldrh	r3, [r7, #32]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8000d04:	887b      	ldrh	r3, [r7, #2]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 ff13 	bl	8002b34 <malloc>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8000d12:	2300      	movs	r3, #0
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	e008      	b.n	8000d2a <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	893a      	ldrh	r2, [r7, #8]
 8000d22:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	3301      	adds	r3, #1
 8000d28:	80fb      	strh	r3, [r7, #6]
 8000d2a:	88fa      	ldrh	r2, [r7, #6]
 8000d2c:	887b      	ldrh	r3, [r7, #2]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d3f2      	bcc.n	8000d18 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d38:	480f      	ldr	r0, [pc, #60]	; (8000d78 <ST7735_FillRectangleFast+0x104>)
 8000d3a:	f000 fe45 	bl	80019c8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000d3e:	883b      	ldrh	r3, [r7, #0]
 8000d40:	80bb      	strh	r3, [r7, #4]
 8000d42:	e00b      	b.n	8000d5c <ST7735_FillRectangleFast+0xe8>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	68f9      	ldr	r1, [r7, #12]
 8000d50:	480a      	ldr	r0, [pc, #40]	; (8000d7c <ST7735_FillRectangleFast+0x108>)
 8000d52:	f001 fc97 	bl	8002684 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8000d56:	88bb      	ldrh	r3, [r7, #4]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	80bb      	strh	r3, [r7, #4]
 8000d5c:	88bb      	ldrh	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f0      	bne.n	8000d44 <ST7735_FillRectangleFast+0xd0>

    free(line);
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f001 feee 	bl	8002b44 <free>
    ST7735_Unselect();
 8000d68:	f7ff fe58 	bl	8000a1c <ST7735_Unselect>
 8000d6c:	e000      	b.n	8000d70 <ST7735_FillRectangleFast+0xfc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000d6e:	bf00      	nop
}
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	200000d0 	.word	0x200000d0

08000d80 <ST7735_FillScreenFast>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_FillScreenFast(uint16_t color) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af02      	add	r7, sp, #8
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	2100      	movs	r1, #0
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff ff6d 	bl	8000c74 <ST7735_FillRectangleFast>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000da2:	b590      	push	{r4, r7, lr}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4604      	mov	r4, r0
 8000daa:	4608      	mov	r0, r1
 8000dac:	4611      	mov	r1, r2
 8000dae:	461a      	mov	r2, r3
 8000db0:	4623      	mov	r3, r4
 8000db2:	80fb      	strh	r3, [r7, #6]
 8000db4:	4603      	mov	r3, r0
 8000db6:	80bb      	strh	r3, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc4:	d831      	bhi.n	8000e2a <ST7735_DrawImage+0x88>
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dca:	d82e      	bhi.n	8000e2a <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8000dcc:	88fa      	ldrh	r2, [r7, #6]
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	2b80      	cmp	r3, #128	; 0x80
 8000dd4:	dc2b      	bgt.n	8000e2e <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8000dd6:	88ba      	ldrh	r2, [r7, #4]
 8000dd8:	883b      	ldrh	r3, [r7, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	2b80      	cmp	r3, #128	; 0x80
 8000dde:	dc28      	bgt.n	8000e32 <ST7735_DrawImage+0x90>

    ST7735_Select();
 8000de0:	f7ff fe10 	bl	8000a04 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	b2d8      	uxtb	r0, r3
 8000de8:	88bb      	ldrh	r3, [r7, #4]
 8000dea:	b2d9      	uxtb	r1, r3
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	b2dc      	uxtb	r4, r3
 8000dfc:	88bb      	ldrh	r3, [r7, #4]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	883b      	ldrh	r3, [r7, #0]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4622      	mov	r2, r4
 8000e0e:	f7ff fea6 	bl	8000b5e <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000e12:	887b      	ldrh	r3, [r7, #2]
 8000e14:	883a      	ldrh	r2, [r7, #0]
 8000e16:	fb02 f303 	mul.w	r3, r2, r3
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	69b8      	ldr	r0, [r7, #24]
 8000e20:	f7ff fe38 	bl	8000a94 <ST7735_WriteData>
    ST7735_Unselect();
 8000e24:	f7ff fdfa 	bl	8000a1c <ST7735_Unselect>
 8000e28:	e004      	b.n	8000e34 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000e2a:	bf00      	nop
 8000e2c:	e002      	b.n	8000e34 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8000e2e:	bf00      	nop
 8000e30:	e000      	b.n	8000e34 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8000e32:	bf00      	nop
}
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd90      	pop	{r4, r7, pc}
	...

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_MspInit+0x60>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_MspInit+0x60>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <HAL_SPI_MspInit+0xc0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d14a      	bne.n	8000f56 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ec0:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <HAL_SPI_MspInit+0xc4>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <HAL_SPI_MspInit+0xc4>)
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eca:	61d3      	str	r3, [r2, #28]
 8000ecc:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <HAL_SPI_MspInit+0xc4>)
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <HAL_SPI_MspInit+0xc4>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <HAL_SPI_MspInit+0xc4>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_SPI_MspInit+0xc4>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ef0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ef4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	4619      	mov	r1, r3
 8000f04:	4818      	ldr	r0, [pc, #96]	; (8000f68 <HAL_SPI_MspInit+0xc8>)
 8000f06:	f000 fbdb 	bl	80016c0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_SPI_MspInit+0xcc>)
 8000f0c:	4a18      	ldr	r2, [pc, #96]	; (8000f70 <HAL_SPI_MspInit+0xd0>)
 8000f0e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_SPI_MspInit+0xcc>)
 8000f12:	2210      	movs	r2, #16
 8000f14:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_SPI_MspInit+0xcc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_SPI_MspInit+0xcc>)
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_SPI_MspInit+0xcc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_SPI_MspInit+0xcc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_SPI_MspInit+0xcc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_SPI_MspInit+0xcc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f3a:	480c      	ldr	r0, [pc, #48]	; (8000f6c <HAL_SPI_MspInit+0xcc>)
 8000f3c:	f000 fa60 	bl	8001400 <HAL_DMA_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8000f46:	f7ff fd57 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_SPI_MspInit+0xcc>)
 8000f4e:	649a      	str	r2, [r3, #72]	; 0x48
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_SPI_MspInit+0xcc>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40003800 	.word	0x40003800
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010c00 	.word	0x40010c00
 8000f6c:	20000128 	.word	0x20000128
 8000f70:	40020058 	.word	0x40020058

08000f74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <HAL_PCD_MspInit+0x34>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10b      	bne.n	8000f9e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_PCD_MspInit+0x38>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_PCD_MspInit+0x38>)
 8000f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_PCD_MspInit+0x38>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40005c00 	.word	0x40005c00
 8000fac:	40021000 	.word	0x40021000

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff6:	f000 f8b5 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <DMA1_Channel5_IRQHandler+0x10>)
 8001006:	f000 fa55 	bl	80014b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000128 	.word	0x20000128

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f001 fe4a 	bl	8002cdc <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20005000 	.word	0x20005000
 8001074:	00000400 	.word	0x00000400
 8001078:	20000644 	.word	0x20000644
 800107c:	20000798 	.word	0x20000798

08001080 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800108c:	f7ff fff8 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001092:	490c      	ldr	r1, [pc, #48]	; (80010c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a09      	ldr	r2, [pc, #36]	; (80010cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010a8:	4c09      	ldr	r4, [pc, #36]	; (80010d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b6:	f001 fe17 	bl	8002ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ba:	f7ff fa7b 	bl	80005b4 <main>
  bx lr
 80010be:	4770      	bx	lr
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80010c8:	08003188 	.word	0x08003188
  ldr r2, =_sbss
 80010cc:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80010d0:	20000794 	.word	0x20000794

080010d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_2_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_Init+0x28>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_Init+0x28>)
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f947 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	200f      	movs	r0, #15
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff fea2 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40022000 	.word	0x40022000

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f95f 	bl	80013e6 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f927 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	; (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000058 	.word	0x20000058
 800115c:	20000060 	.word	0x20000060
 8001160:	2000005c 	.word	0x2000005c

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x1c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x20>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a03      	ldr	r2, [pc, #12]	; (8001184 <HAL_IncTick+0x20>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000060 	.word	0x20000060
 8001184:	20000648 	.word	0x20000648

08001188 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <HAL_GetTick+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000648 	.word	0x20000648

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fff0 	bl	8001188 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffe0 	bl	8001188 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000060 	.word	0x20000060

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4906      	ldr	r1, [pc, #24]	; (800127c <__NVIC_EnableIRQ+0x34>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff90 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff2d 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff42 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff90 	bl	80012d4 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5f 	bl	8001280 <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff35 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa2 	bl	8001338 <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e043      	b.n	800149e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <HAL_DMA_Init+0xa8>)
 800141e:	4413      	add	r3, r2
 8001420:	4a22      	ldr	r2, [pc, #136]	; (80014ac <HAL_DMA_Init+0xac>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	009a      	lsls	r2, r3, #2
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a1f      	ldr	r2, [pc, #124]	; (80014b0 <HAL_DMA_Init+0xb0>)
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800144a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800144e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	bffdfff8 	.word	0xbffdfff8
 80014ac:	cccccccd 	.word	0xcccccccd
 80014b0:	40020000 	.word	0x40020000

080014b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	2204      	movs	r2, #4
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d04f      	beq.n	800157c <HAL_DMA_IRQHandler+0xc8>
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d04a      	beq.n	800157c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d107      	bne.n	8001504 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0204 	bic.w	r2, r2, #4
 8001502:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a66      	ldr	r2, [pc, #408]	; (80016a4 <HAL_DMA_IRQHandler+0x1f0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d029      	beq.n	8001562 <HAL_DMA_IRQHandler+0xae>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a65      	ldr	r2, [pc, #404]	; (80016a8 <HAL_DMA_IRQHandler+0x1f4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d022      	beq.n	800155e <HAL_DMA_IRQHandler+0xaa>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a63      	ldr	r2, [pc, #396]	; (80016ac <HAL_DMA_IRQHandler+0x1f8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d01a      	beq.n	8001558 <HAL_DMA_IRQHandler+0xa4>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a62      	ldr	r2, [pc, #392]	; (80016b0 <HAL_DMA_IRQHandler+0x1fc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d012      	beq.n	8001552 <HAL_DMA_IRQHandler+0x9e>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a60      	ldr	r2, [pc, #384]	; (80016b4 <HAL_DMA_IRQHandler+0x200>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00a      	beq.n	800154c <HAL_DMA_IRQHandler+0x98>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a5f      	ldr	r2, [pc, #380]	; (80016b8 <HAL_DMA_IRQHandler+0x204>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d102      	bne.n	8001546 <HAL_DMA_IRQHandler+0x92>
 8001540:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001544:	e00e      	b.n	8001564 <HAL_DMA_IRQHandler+0xb0>
 8001546:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800154a:	e00b      	b.n	8001564 <HAL_DMA_IRQHandler+0xb0>
 800154c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001550:	e008      	b.n	8001564 <HAL_DMA_IRQHandler+0xb0>
 8001552:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001556:	e005      	b.n	8001564 <HAL_DMA_IRQHandler+0xb0>
 8001558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155c:	e002      	b.n	8001564 <HAL_DMA_IRQHandler+0xb0>
 800155e:	2340      	movs	r3, #64	; 0x40
 8001560:	e000      	b.n	8001564 <HAL_DMA_IRQHandler+0xb0>
 8001562:	2304      	movs	r3, #4
 8001564:	4a55      	ldr	r2, [pc, #340]	; (80016bc <HAL_DMA_IRQHandler+0x208>)
 8001566:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8094 	beq.w	800169a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800157a:	e08e      	b.n	800169a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	2202      	movs	r2, #2
 8001582:	409a      	lsls	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4013      	ands	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d056      	beq.n	800163a <HAL_DMA_IRQHandler+0x186>
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d051      	beq.n	800163a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10b      	bne.n	80015bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 020a 	bic.w	r2, r2, #10
 80015b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a38      	ldr	r2, [pc, #224]	; (80016a4 <HAL_DMA_IRQHandler+0x1f0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d029      	beq.n	800161a <HAL_DMA_IRQHandler+0x166>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a37      	ldr	r2, [pc, #220]	; (80016a8 <HAL_DMA_IRQHandler+0x1f4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d022      	beq.n	8001616 <HAL_DMA_IRQHandler+0x162>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a35      	ldr	r2, [pc, #212]	; (80016ac <HAL_DMA_IRQHandler+0x1f8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01a      	beq.n	8001610 <HAL_DMA_IRQHandler+0x15c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a34      	ldr	r2, [pc, #208]	; (80016b0 <HAL_DMA_IRQHandler+0x1fc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d012      	beq.n	800160a <HAL_DMA_IRQHandler+0x156>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <HAL_DMA_IRQHandler+0x200>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00a      	beq.n	8001604 <HAL_DMA_IRQHandler+0x150>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a31      	ldr	r2, [pc, #196]	; (80016b8 <HAL_DMA_IRQHandler+0x204>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d102      	bne.n	80015fe <HAL_DMA_IRQHandler+0x14a>
 80015f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015fc:	e00e      	b.n	800161c <HAL_DMA_IRQHandler+0x168>
 80015fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001602:	e00b      	b.n	800161c <HAL_DMA_IRQHandler+0x168>
 8001604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001608:	e008      	b.n	800161c <HAL_DMA_IRQHandler+0x168>
 800160a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160e:	e005      	b.n	800161c <HAL_DMA_IRQHandler+0x168>
 8001610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001614:	e002      	b.n	800161c <HAL_DMA_IRQHandler+0x168>
 8001616:	2320      	movs	r3, #32
 8001618:	e000      	b.n	800161c <HAL_DMA_IRQHandler+0x168>
 800161a:	2302      	movs	r3, #2
 800161c:	4a27      	ldr	r2, [pc, #156]	; (80016bc <HAL_DMA_IRQHandler+0x208>)
 800161e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	2b00      	cmp	r3, #0
 800162e:	d034      	beq.n	800169a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001638:	e02f      	b.n	800169a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	2208      	movs	r2, #8
 8001640:	409a      	lsls	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d028      	beq.n	800169c <HAL_DMA_IRQHandler+0x1e8>
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d023      	beq.n	800169c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 020e 	bic.w	r2, r2, #14
 8001662:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    }
  }
  return;
 800169a:	bf00      	nop
 800169c:	bf00      	nop
}
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020008 	.word	0x40020008
 80016a8:	4002001c 	.word	0x4002001c
 80016ac:	40020030 	.word	0x40020030
 80016b0:	40020044 	.word	0x40020044
 80016b4:	40020058 	.word	0x40020058
 80016b8:	4002006c 	.word	0x4002006c
 80016bc:	40020000 	.word	0x40020000

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b08b      	sub	sp, #44	; 0x2c
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e169      	b.n	80019a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d4:	2201      	movs	r2, #1
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8158 	bne.w	80019a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a9a      	ldr	r2, [pc, #616]	; (8001960 <HAL_GPIO_Init+0x2a0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d05e      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 80016fc:	4a98      	ldr	r2, [pc, #608]	; (8001960 <HAL_GPIO_Init+0x2a0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d875      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001702:	4a98      	ldr	r2, [pc, #608]	; (8001964 <HAL_GPIO_Init+0x2a4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d058      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001708:	4a96      	ldr	r2, [pc, #600]	; (8001964 <HAL_GPIO_Init+0x2a4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d86f      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800170e:	4a96      	ldr	r2, [pc, #600]	; (8001968 <HAL_GPIO_Init+0x2a8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d052      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001714:	4a94      	ldr	r2, [pc, #592]	; (8001968 <HAL_GPIO_Init+0x2a8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d869      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800171a:	4a94      	ldr	r2, [pc, #592]	; (800196c <HAL_GPIO_Init+0x2ac>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d04c      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001720:	4a92      	ldr	r2, [pc, #584]	; (800196c <HAL_GPIO_Init+0x2ac>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d863      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001726:	4a92      	ldr	r2, [pc, #584]	; (8001970 <HAL_GPIO_Init+0x2b0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d046      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 800172c:	4a90      	ldr	r2, [pc, #576]	; (8001970 <HAL_GPIO_Init+0x2b0>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d85d      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d82a      	bhi.n	800178c <HAL_GPIO_Init+0xcc>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d859      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_GPIO_Init+0x80>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	080017bb 	.word	0x080017bb
 8001744:	08001795 	.word	0x08001795
 8001748:	080017a7 	.word	0x080017a7
 800174c:	080017e9 	.word	0x080017e9
 8001750:	080017ef 	.word	0x080017ef
 8001754:	080017ef 	.word	0x080017ef
 8001758:	080017ef 	.word	0x080017ef
 800175c:	080017ef 	.word	0x080017ef
 8001760:	080017ef 	.word	0x080017ef
 8001764:	080017ef 	.word	0x080017ef
 8001768:	080017ef 	.word	0x080017ef
 800176c:	080017ef 	.word	0x080017ef
 8001770:	080017ef 	.word	0x080017ef
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017ef 	.word	0x080017ef
 800177c:	080017ef 	.word	0x080017ef
 8001780:	080017ef 	.word	0x080017ef
 8001784:	0800179d 	.word	0x0800179d
 8001788:	080017b1 	.word	0x080017b1
 800178c:	4a79      	ldr	r2, [pc, #484]	; (8001974 <HAL_GPIO_Init+0x2b4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001792:	e02c      	b.n	80017ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e029      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e024      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e01f      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	330c      	adds	r3, #12
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e01a      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e013      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d0:	2308      	movs	r3, #8
 80017d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	611a      	str	r2, [r3, #16]
          break;
 80017da:	e009      	b.n	80017f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
          break;
 80017e6:	e003      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          break;
 80017ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2bff      	cmp	r3, #255	; 0xff
 80017f4:	d801      	bhi.n	80017fa <HAL_GPIO_Init+0x13a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e001      	b.n	80017fe <HAL_GPIO_Init+0x13e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2bff      	cmp	r3, #255	; 0xff
 8001804:	d802      	bhi.n	800180c <HAL_GPIO_Init+0x14c>
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x152>
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3b08      	subs	r3, #8
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	210f      	movs	r1, #15
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80b1 	beq.w	80019a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001840:	4b4d      	ldr	r3, [pc, #308]	; (8001978 <HAL_GPIO_Init+0x2b8>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <HAL_GPIO_Init+0x2b8>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <HAL_GPIO_Init+0x2b8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001858:	4a48      	ldr	r2, [pc, #288]	; (800197c <HAL_GPIO_Init+0x2bc>)
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a40      	ldr	r2, [pc, #256]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d013      	beq.n	80018ac <HAL_GPIO_Init+0x1ec>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a3f      	ldr	r2, [pc, #252]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d00d      	beq.n	80018a8 <HAL_GPIO_Init+0x1e8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a3e      	ldr	r2, [pc, #248]	; (8001988 <HAL_GPIO_Init+0x2c8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d007      	beq.n	80018a4 <HAL_GPIO_Init+0x1e4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a3d      	ldr	r2, [pc, #244]	; (800198c <HAL_GPIO_Init+0x2cc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d101      	bne.n	80018a0 <HAL_GPIO_Init+0x1e0>
 800189c:	2303      	movs	r3, #3
 800189e:	e006      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a0:	2304      	movs	r3, #4
 80018a2:	e004      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018ac:	2300      	movs	r3, #0
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	f002 0203 	and.w	r2, r2, #3
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	4093      	lsls	r3, r2
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018be:	492f      	ldr	r1, [pc, #188]	; (800197c <HAL_GPIO_Init+0x2bc>)
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	492c      	ldr	r1, [pc, #176]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4928      	ldr	r1, [pc, #160]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	4922      	ldr	r1, [pc, #136]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	491e      	ldr	r1, [pc, #120]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001918:	4013      	ands	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4918      	ldr	r1, [pc, #96]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	4914      	ldr	r1, [pc, #80]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001940:	4013      	ands	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d021      	beq.n	8001994 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	490e      	ldr	r1, [pc, #56]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e021      	b.n	80019a2 <HAL_GPIO_Init+0x2e2>
 800195e:	bf00      	nop
 8001960:	10320000 	.word	0x10320000
 8001964:	10310000 	.word	0x10310000
 8001968:	10220000 	.word	0x10220000
 800196c:	10210000 	.word	0x10210000
 8001970:	10120000 	.word	0x10120000
 8001974:	10110000 	.word	0x10110000
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	40010800 	.word	0x40010800
 8001984:	40010c00 	.word	0x40010c00
 8001988:	40011000 	.word	0x40011000
 800198c:	40011400 	.word	0x40011400
 8001990:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	43db      	mvns	r3, r3
 800199c:	4909      	ldr	r1, [pc, #36]	; (80019c4 <HAL_GPIO_Init+0x304>)
 800199e:	4013      	ands	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	3301      	adds	r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f47f ae8e 	bne.w	80016d4 <HAL_GPIO_Init+0x14>
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	372c      	adds	r7, #44	; 0x2c
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d8:	787b      	ldrb	r3, [r7, #1]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019e4:	e003      	b.n	80019ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	041a      	lsls	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0e8      	b.n	8001bdc <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff faa8 	bl	8000f74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2203      	movs	r2, #3
 8001a28:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 f82e 	bl	8002a98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a46:	f001 f81a 	bl	8002a7e <USB_CoreInit>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0bf      	b.n	8001bdc <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 f832 	bl	8002acc <USB_SetCurrentMode>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0b0      	b.n	8001bdc <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	e03e      	b.n	8001afe <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3311      	adds	r3, #17
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3310      	adds	r3, #16
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3313      	adds	r3, #19
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	3320      	adds	r3, #32
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	3324      	adds	r3, #36	; 0x24
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	3301      	adds	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	791b      	ldrb	r3, [r3, #4]
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3bb      	bcc.n	8001a80 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e044      	b.n	8001b98 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b50:	7bfa      	ldrb	r2, [r7, #15]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	3301      	adds	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	791b      	ldrb	r3, [r3, #4]
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3b5      	bcc.n	8001b0e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bac:	f000 ff9a 	bl	8002ae4 <USB_DevInit>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00c      	b.n	8001bdc <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 ffa2 	bl	8002b1e <USB_DevDisconnect>

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e272      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8087 	beq.w	8001d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c04:	4b92      	ldr	r3, [pc, #584]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c10:	4b8f      	ldr	r3, [pc, #572]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d112      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
 8001c1c:	4b8c      	ldr	r3, [pc, #560]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d10b      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2a:	4b89      	ldr	r3, [pc, #548]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d06c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x12c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d168      	bne.n	8001d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e24c      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x76>
 8001c4c:	4b80      	ldr	r3, [pc, #512]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a7f      	ldr	r2, [pc, #508]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e02e      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x98>
 8001c62:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a7a      	ldr	r2, [pc, #488]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a77      	ldr	r2, [pc, #476]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xbc>
 8001c86:	4b72      	ldr	r3, [pc, #456]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a71      	ldr	r2, [pc, #452]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6e      	ldr	r2, [pc, #440]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6a      	ldr	r2, [pc, #424]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a67      	ldr	r2, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fa62 	bl	8001188 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fa5e 	bl	8001188 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e200      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xe4>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fa4e 	bl	8001188 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fa4a 	bl	8001188 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1ec      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x10c>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d063      	beq.n	8001de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1e:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1c0      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4939      	ldr	r1, [pc, #228]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fa03 	bl	8001188 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff f9ff 	bl	8001188 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1a1      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4927      	ldr	r1, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f9e2 	bl	8001188 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f9de 	bl	8001188 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e180      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d03a      	beq.n	8001e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d019      	beq.n	8001e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff f9c2 	bl	8001188 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff f9be 	bl	8001188 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e160      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f000 fad4 	bl	80023d4 <RCC_Delay>
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7ff f9a8 	bl	8001188 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff f9a4 	bl	8001188 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d908      	bls.n	8001e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e146      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	42420000 	.word	0x42420000
 8001e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	4b92      	ldr	r3, [pc, #584]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e9      	bne.n	8001e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a6 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b8b      	ldr	r3, [pc, #556]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10d      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a87      	ldr	r2, [pc, #540]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b85      	ldr	r3, [pc, #532]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b82      	ldr	r3, [pc, #520]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d118      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eae:	4b7f      	ldr	r3, [pc, #508]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a7e      	ldr	r2, [pc, #504]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eba:	f7ff f965 	bl	8001188 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec2:	f7ff f961 	bl	8001188 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b64      	cmp	r3, #100	; 0x64
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e103      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	4b75      	ldr	r3, [pc, #468]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x312>
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a6e      	ldr	r2, [pc, #440]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e02d      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x334>
 8001efe:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a69      	ldr	r2, [pc, #420]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a66      	ldr	r2, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	e01c      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x356>
 8001f20:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a5d      	ldr	r2, [pc, #372]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e00b      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a5a      	ldr	r2, [pc, #360]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b58      	ldr	r3, [pc, #352]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a57      	ldr	r2, [pc, #348]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d015      	beq.n	8001f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff f915 	bl	8001188 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7ff f911 	bl	8001188 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0b1      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ee      	beq.n	8001f62 <HAL_RCC_OscConfig+0x37e>
 8001f84:	e014      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7ff f8ff 	bl	8001188 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff f8fb 	bl	8001188 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e09b      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ee      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4b3c      	ldr	r3, [pc, #240]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a3b      	ldr	r2, [pc, #236]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8087 	beq.w	80020da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d061      	beq.n	800209c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d146      	bne.n	800206e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f8cf 	bl	8001188 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff f8cb 	bl	8001188 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e06d      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d108      	bne.n	8002028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4921      	ldr	r1, [pc, #132]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002028:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a19      	ldr	r1, [r3, #32]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	430b      	orrs	r3, r1
 800203a:	491b      	ldr	r1, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7ff f89f 	bl	8001188 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff f89b 	bl	8001188 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e03d      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x46a>
 800206c:	e035      	b.n	80020da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff f888 	bl	8001188 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207c:	f7ff f884 	bl	8001188 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e026      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x498>
 800209a:	e01e      	b.n	80020da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e019      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
 80020b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x500>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0d0      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020fc:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d910      	bls.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4965      	ldr	r1, [pc, #404]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0b8      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a58      	ldr	r2, [pc, #352]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800214e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b50      	ldr	r3, [pc, #320]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	494d      	ldr	r1, [pc, #308]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d040      	beq.n	8002208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d115      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07f      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e073      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b6:	4b3d      	ldr	r3, [pc, #244]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06b      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c6:	4b39      	ldr	r3, [pc, #228]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f023 0203 	bic.w	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4936      	ldr	r1, [pc, #216]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d8:	f7fe ffd6 	bl	8001188 <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e0:	f7fe ffd2 	bl	8001188 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e053      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 020c 	and.w	r2, r3, #12
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	429a      	cmp	r2, r3
 8002206:	d1eb      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d210      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	4922      	ldr	r1, [pc, #136]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e032      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4916      	ldr	r1, [pc, #88]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002276:	f000 f859 	bl	800232c <HAL_RCC_GetSysClockFreq>
 800227a:	4602      	mov	r2, r0
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	490a      	ldr	r1, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002288:	5ccb      	ldrb	r3, [r1, r3]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe ff34 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	0800315c 	.word	0x0800315c
 80022b4:	20000058 	.word	0x20000058
 80022b8:	2000005c 	.word	0x2000005c

080022bc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80022c8:	f107 0318 	add.w	r3, r7, #24
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80022e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e6:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_RCC_MCOConfig+0x68>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <HAL_RCC_MCOConfig+0x68>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_MCOConfig+0x68>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002300:	f107 0318 	add.w	r3, r7, #24
 8002304:	4619      	mov	r1, r3
 8002306:	4808      	ldr	r0, [pc, #32]	; (8002328 <HAL_RCC_MCOConfig+0x6c>)
 8002308:	f7ff f9da 	bl	80016c0 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_MCOConfig+0x68>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002314:	4903      	ldr	r1, [pc, #12]	; (8002324 <HAL_RCC_MCOConfig+0x68>)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
}
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	; 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	40010800 	.word	0x40010800

0800232c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b04      	cmp	r3, #4
 8002354:	d002      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x30>
 8002356:	2b08      	cmp	r3, #8
 8002358:	d003      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0x36>
 800235a:	e027      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800235e:	613b      	str	r3, [r7, #16]
      break;
 8002360:	e027      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	0c9b      	lsrs	r3, r3, #18
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800236c:	5cd3      	ldrb	r3, [r2, r3]
 800236e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d010      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	0c5b      	lsrs	r3, r3, #17
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	4a11      	ldr	r2, [pc, #68]	; (80023cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800238e:	fb03 f202 	mul.w	r2, r3, r2
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	e004      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	613b      	str	r3, [r7, #16]
      break;
 80023aa:	e002      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ae:	613b      	str	r3, [r7, #16]
      break;
 80023b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b2:	693b      	ldr	r3, [r7, #16]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	007a1200 	.word	0x007a1200
 80023c8:	0800316c 	.word	0x0800316c
 80023cc:	0800317c 	.word	0x0800317c
 80023d0:	003d0900 	.word	0x003d0900

080023d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <RCC_Delay+0x34>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <RCC_Delay+0x38>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0a5b      	lsrs	r3, r3, #9
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f0:	bf00      	nop
  }
  while (Delay --);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1e5a      	subs	r2, r3, #1
 80023f6:	60fa      	str	r2, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f9      	bne.n	80023f0 <RCC_Delay+0x1c>
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	20000058 	.word	0x20000058
 800240c:	10624dd3 	.word	0x10624dd3

08002410 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d07d      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002430:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10d      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4a4b      	ldr	r2, [pc, #300]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	61d3      	str	r3, [r2, #28]
 8002448:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002454:	2301      	movs	r3, #1
 8002456:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d118      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002464:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a42      	ldr	r2, [pc, #264]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002470:	f7fe fe8a 	bl	8001188 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	e008      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002478:	f7fe fe86 	bl	8001188 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e06d      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248a:	4b3a      	ldr	r3, [pc, #232]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d02e      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d027      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024be:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c4:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024ca:	4a29      	ldr	r2, [pc, #164]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d014      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fe55 	bl	8001188 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe fe51 	bl	8001188 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e036      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ee      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4917      	ldr	r1, [pc, #92]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002512:	4313      	orrs	r3, r2
 8002514:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	4a13      	ldr	r2, [pc, #76]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002526:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	490b      	ldr	r1, [pc, #44]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4904      	ldr	r1, [pc, #16]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	40007000 	.word	0x40007000
 8002578:	42420440 	.word	0x42420440

0800257c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e076      	b.n	800267c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800259e:	d009      	beq.n	80025b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]
 80025a6:	e005      	b.n	80025b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fc66 	bl	8000ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002638:	ea42 0103 	orr.w	r1, r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	0c1a      	lsrs	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f002 0204 	and.w	r2, r2, #4
 800265a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002694:	f7fe fd78 	bl	8001188 <HAL_GetTick>
 8002698:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
 80026ac:	e12a      	b.n	8002904 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_SPI_Transmit+0x36>
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e122      	b.n	8002904 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_SPI_Transmit+0x48>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e11b      	b.n	8002904 <HAL_SPI_Transmit+0x280>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2203      	movs	r2, #3
 80026d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	88fa      	ldrh	r2, [r7, #6]
 80026ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	88fa      	ldrh	r2, [r7, #6]
 80026f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800271a:	d10f      	bne.n	800273c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800272a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800273a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b40      	cmp	r3, #64	; 0x40
 8002748:	d007      	beq.n	800275a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002762:	d152      	bne.n	800280a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_SPI_Transmit+0xee>
 800276c:	8b7b      	ldrh	r3, [r7, #26]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d145      	bne.n	80027fe <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	881a      	ldrh	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	1c9a      	adds	r2, r3, #2
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002796:	e032      	b.n	80027fe <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d112      	bne.n	80027cc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	881a      	ldrh	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	1c9a      	adds	r2, r3, #2
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80027ca:	e018      	b.n	80027fe <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027cc:	f7fe fcdc 	bl	8001188 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d803      	bhi.n	80027e4 <HAL_SPI_Transmit+0x160>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e2:	d102      	bne.n	80027ea <HAL_SPI_Transmit+0x166>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e082      	b.n	8002904 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1c7      	bne.n	8002798 <HAL_SPI_Transmit+0x114>
 8002808:	e053      	b.n	80028b2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_SPI_Transmit+0x194>
 8002812:	8b7b      	ldrh	r3, [r7, #26]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d147      	bne.n	80028a8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	7812      	ldrb	r2, [r2, #0]
 8002824:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800283e:	e033      	b.n	80028a8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b02      	cmp	r3, #2
 800284c:	d113      	bne.n	8002876 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	330c      	adds	r3, #12
 8002858:	7812      	ldrb	r2, [r2, #0]
 800285a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	86da      	strh	r2, [r3, #54]	; 0x36
 8002874:	e018      	b.n	80028a8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002876:	f7fe fc87 	bl	8001188 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d803      	bhi.n	800288e <HAL_SPI_Transmit+0x20a>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d102      	bne.n	8002894 <HAL_SPI_Transmit+0x210>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e02d      	b.n	8002904 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1c6      	bne.n	8002840 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	6839      	ldr	r1, [r7, #0]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f8b0 	bl	8002a1c <SPI_EndRxTxTransaction>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002902:	2300      	movs	r3, #0
  }
}
 8002904:	4618      	mov	r0, r3
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800291c:	f7fe fc34 	bl	8001188 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	4413      	add	r3, r2
 800292a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800292c:	f7fe fc2c 	bl	8001188 <HAL_GetTick>
 8002930:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002932:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	015b      	lsls	r3, r3, #5
 8002938:	0d1b      	lsrs	r3, r3, #20
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002942:	e054      	b.n	80029ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d050      	beq.n	80029ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800294c:	f7fe fc1c 	bl	8001188 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	429a      	cmp	r2, r3
 800295a:	d902      	bls.n	8002962 <SPI_WaitFlagStateUntilTimeout+0x56>
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d13d      	bne.n	80029de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002970:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297a:	d111      	bne.n	80029a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002984:	d004      	beq.n	8002990 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298e:	d107      	bne.n	80029a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a8:	d10f      	bne.n	80029ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e017      	b.n	8002a0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4013      	ands	r3, r2
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d19b      	bne.n	8002944 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000058 	.word	0x20000058

08002a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2102      	movs	r1, #2
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f7ff ff6a 	bl	800290c <SPI_WaitFlagStateUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	f043 0220 	orr.w	r2, r3, #32
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e013      	b.n	8002a76 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2180      	movs	r1, #128	; 0x80
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff ff57 	bl	800290c <SPI_WaitFlagStateUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e000      	b.n	8002a76 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	4638      	mov	r0, r7
 8002a88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002aa0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002aa4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	4638      	mov	r0, r7
 8002aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
	...

08002b34 <malloc>:
 8002b34:	4b02      	ldr	r3, [pc, #8]	; (8002b40 <malloc+0xc>)
 8002b36:	4601      	mov	r1, r0
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	f000 b82b 	b.w	8002b94 <_malloc_r>
 8002b3e:	bf00      	nop
 8002b40:	200000b0 	.word	0x200000b0

08002b44 <free>:
 8002b44:	4b02      	ldr	r3, [pc, #8]	; (8002b50 <free+0xc>)
 8002b46:	4601      	mov	r1, r0
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	f000 b8f3 	b.w	8002d34 <_free_r>
 8002b4e:	bf00      	nop
 8002b50:	200000b0 	.word	0x200000b0

08002b54 <sbrk_aligned>:
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	4e0e      	ldr	r6, [pc, #56]	; (8002b90 <sbrk_aligned+0x3c>)
 8002b58:	460c      	mov	r4, r1
 8002b5a:	6831      	ldr	r1, [r6, #0]
 8002b5c:	4605      	mov	r5, r0
 8002b5e:	b911      	cbnz	r1, 8002b66 <sbrk_aligned+0x12>
 8002b60:	f000 f8ac 	bl	8002cbc <_sbrk_r>
 8002b64:	6030      	str	r0, [r6, #0]
 8002b66:	4621      	mov	r1, r4
 8002b68:	4628      	mov	r0, r5
 8002b6a:	f000 f8a7 	bl	8002cbc <_sbrk_r>
 8002b6e:	1c43      	adds	r3, r0, #1
 8002b70:	d00a      	beq.n	8002b88 <sbrk_aligned+0x34>
 8002b72:	1cc4      	adds	r4, r0, #3
 8002b74:	f024 0403 	bic.w	r4, r4, #3
 8002b78:	42a0      	cmp	r0, r4
 8002b7a:	d007      	beq.n	8002b8c <sbrk_aligned+0x38>
 8002b7c:	1a21      	subs	r1, r4, r0
 8002b7e:	4628      	mov	r0, r5
 8002b80:	f000 f89c 	bl	8002cbc <_sbrk_r>
 8002b84:	3001      	adds	r0, #1
 8002b86:	d101      	bne.n	8002b8c <sbrk_aligned+0x38>
 8002b88:	f04f 34ff 	mov.w	r4, #4294967295
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	20000650 	.word	0x20000650

08002b94 <_malloc_r>:
 8002b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b98:	1ccd      	adds	r5, r1, #3
 8002b9a:	f025 0503 	bic.w	r5, r5, #3
 8002b9e:	3508      	adds	r5, #8
 8002ba0:	2d0c      	cmp	r5, #12
 8002ba2:	bf38      	it	cc
 8002ba4:	250c      	movcc	r5, #12
 8002ba6:	2d00      	cmp	r5, #0
 8002ba8:	4607      	mov	r7, r0
 8002baa:	db01      	blt.n	8002bb0 <_malloc_r+0x1c>
 8002bac:	42a9      	cmp	r1, r5
 8002bae:	d905      	bls.n	8002bbc <_malloc_r+0x28>
 8002bb0:	230c      	movs	r3, #12
 8002bb2:	2600      	movs	r6, #0
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	4630      	mov	r0, r6
 8002bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002c90 <_malloc_r+0xfc>
 8002bc0:	f000 f868 	bl	8002c94 <__malloc_lock>
 8002bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8002bc8:	461c      	mov	r4, r3
 8002bca:	bb5c      	cbnz	r4, 8002c24 <_malloc_r+0x90>
 8002bcc:	4629      	mov	r1, r5
 8002bce:	4638      	mov	r0, r7
 8002bd0:	f7ff ffc0 	bl	8002b54 <sbrk_aligned>
 8002bd4:	1c43      	adds	r3, r0, #1
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	d155      	bne.n	8002c86 <_malloc_r+0xf2>
 8002bda:	f8d8 4000 	ldr.w	r4, [r8]
 8002bde:	4626      	mov	r6, r4
 8002be0:	2e00      	cmp	r6, #0
 8002be2:	d145      	bne.n	8002c70 <_malloc_r+0xdc>
 8002be4:	2c00      	cmp	r4, #0
 8002be6:	d048      	beq.n	8002c7a <_malloc_r+0xe6>
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	4631      	mov	r1, r6
 8002bec:	4638      	mov	r0, r7
 8002bee:	eb04 0903 	add.w	r9, r4, r3
 8002bf2:	f000 f863 	bl	8002cbc <_sbrk_r>
 8002bf6:	4581      	cmp	r9, r0
 8002bf8:	d13f      	bne.n	8002c7a <_malloc_r+0xe6>
 8002bfa:	6821      	ldr	r1, [r4, #0]
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	1a6d      	subs	r5, r5, r1
 8002c00:	4629      	mov	r1, r5
 8002c02:	f7ff ffa7 	bl	8002b54 <sbrk_aligned>
 8002c06:	3001      	adds	r0, #1
 8002c08:	d037      	beq.n	8002c7a <_malloc_r+0xe6>
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	442b      	add	r3, r5
 8002c0e:	6023      	str	r3, [r4, #0]
 8002c10:	f8d8 3000 	ldr.w	r3, [r8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d038      	beq.n	8002c8a <_malloc_r+0xf6>
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	42a2      	cmp	r2, r4
 8002c1c:	d12b      	bne.n	8002c76 <_malloc_r+0xe2>
 8002c1e:	2200      	movs	r2, #0
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	e00f      	b.n	8002c44 <_malloc_r+0xb0>
 8002c24:	6822      	ldr	r2, [r4, #0]
 8002c26:	1b52      	subs	r2, r2, r5
 8002c28:	d41f      	bmi.n	8002c6a <_malloc_r+0xd6>
 8002c2a:	2a0b      	cmp	r2, #11
 8002c2c:	d917      	bls.n	8002c5e <_malloc_r+0xca>
 8002c2e:	1961      	adds	r1, r4, r5
 8002c30:	42a3      	cmp	r3, r4
 8002c32:	6025      	str	r5, [r4, #0]
 8002c34:	bf18      	it	ne
 8002c36:	6059      	strne	r1, [r3, #4]
 8002c38:	6863      	ldr	r3, [r4, #4]
 8002c3a:	bf08      	it	eq
 8002c3c:	f8c8 1000 	streq.w	r1, [r8]
 8002c40:	5162      	str	r2, [r4, r5]
 8002c42:	604b      	str	r3, [r1, #4]
 8002c44:	4638      	mov	r0, r7
 8002c46:	f104 060b 	add.w	r6, r4, #11
 8002c4a:	f000 f829 	bl	8002ca0 <__malloc_unlock>
 8002c4e:	f026 0607 	bic.w	r6, r6, #7
 8002c52:	1d23      	adds	r3, r4, #4
 8002c54:	1af2      	subs	r2, r6, r3
 8002c56:	d0ae      	beq.n	8002bb6 <_malloc_r+0x22>
 8002c58:	1b9b      	subs	r3, r3, r6
 8002c5a:	50a3      	str	r3, [r4, r2]
 8002c5c:	e7ab      	b.n	8002bb6 <_malloc_r+0x22>
 8002c5e:	42a3      	cmp	r3, r4
 8002c60:	6862      	ldr	r2, [r4, #4]
 8002c62:	d1dd      	bne.n	8002c20 <_malloc_r+0x8c>
 8002c64:	f8c8 2000 	str.w	r2, [r8]
 8002c68:	e7ec      	b.n	8002c44 <_malloc_r+0xb0>
 8002c6a:	4623      	mov	r3, r4
 8002c6c:	6864      	ldr	r4, [r4, #4]
 8002c6e:	e7ac      	b.n	8002bca <_malloc_r+0x36>
 8002c70:	4634      	mov	r4, r6
 8002c72:	6876      	ldr	r6, [r6, #4]
 8002c74:	e7b4      	b.n	8002be0 <_malloc_r+0x4c>
 8002c76:	4613      	mov	r3, r2
 8002c78:	e7cc      	b.n	8002c14 <_malloc_r+0x80>
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	4638      	mov	r0, r7
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	f000 f80e 	bl	8002ca0 <__malloc_unlock>
 8002c84:	e797      	b.n	8002bb6 <_malloc_r+0x22>
 8002c86:	6025      	str	r5, [r4, #0]
 8002c88:	e7dc      	b.n	8002c44 <_malloc_r+0xb0>
 8002c8a:	605b      	str	r3, [r3, #4]
 8002c8c:	deff      	udf	#255	; 0xff
 8002c8e:	bf00      	nop
 8002c90:	2000064c 	.word	0x2000064c

08002c94 <__malloc_lock>:
 8002c94:	4801      	ldr	r0, [pc, #4]	; (8002c9c <__malloc_lock+0x8>)
 8002c96:	f000 b84b 	b.w	8002d30 <__retarget_lock_acquire_recursive>
 8002c9a:	bf00      	nop
 8002c9c:	20000790 	.word	0x20000790

08002ca0 <__malloc_unlock>:
 8002ca0:	4801      	ldr	r0, [pc, #4]	; (8002ca8 <__malloc_unlock+0x8>)
 8002ca2:	f000 b846 	b.w	8002d32 <__retarget_lock_release_recursive>
 8002ca6:	bf00      	nop
 8002ca8:	20000790 	.word	0x20000790

08002cac <memset>:
 8002cac:	4603      	mov	r3, r0
 8002cae:	4402      	add	r2, r0
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d100      	bne.n	8002cb6 <memset+0xa>
 8002cb4:	4770      	bx	lr
 8002cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cba:	e7f9      	b.n	8002cb0 <memset+0x4>

08002cbc <_sbrk_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	4d05      	ldr	r5, [pc, #20]	; (8002cd8 <_sbrk_r+0x1c>)
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	602b      	str	r3, [r5, #0]
 8002cc8:	f7fe f9a4 	bl	8001014 <_sbrk>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	d102      	bne.n	8002cd6 <_sbrk_r+0x1a>
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	b103      	cbz	r3, 8002cd6 <_sbrk_r+0x1a>
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
 8002cd8:	2000078c 	.word	0x2000078c

08002cdc <__errno>:
 8002cdc:	4b01      	ldr	r3, [pc, #4]	; (8002ce4 <__errno+0x8>)
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	200000b0 	.word	0x200000b0

08002ce8 <__libc_init_array>:
 8002ce8:	b570      	push	{r4, r5, r6, lr}
 8002cea:	2600      	movs	r6, #0
 8002cec:	4d0c      	ldr	r5, [pc, #48]	; (8002d20 <__libc_init_array+0x38>)
 8002cee:	4c0d      	ldr	r4, [pc, #52]	; (8002d24 <__libc_init_array+0x3c>)
 8002cf0:	1b64      	subs	r4, r4, r5
 8002cf2:	10a4      	asrs	r4, r4, #2
 8002cf4:	42a6      	cmp	r6, r4
 8002cf6:	d109      	bne.n	8002d0c <__libc_init_array+0x24>
 8002cf8:	f000 f864 	bl	8002dc4 <_init>
 8002cfc:	2600      	movs	r6, #0
 8002cfe:	4d0a      	ldr	r5, [pc, #40]	; (8002d28 <__libc_init_array+0x40>)
 8002d00:	4c0a      	ldr	r4, [pc, #40]	; (8002d2c <__libc_init_array+0x44>)
 8002d02:	1b64      	subs	r4, r4, r5
 8002d04:	10a4      	asrs	r4, r4, #2
 8002d06:	42a6      	cmp	r6, r4
 8002d08:	d105      	bne.n	8002d16 <__libc_init_array+0x2e>
 8002d0a:	bd70      	pop	{r4, r5, r6, pc}
 8002d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d10:	4798      	blx	r3
 8002d12:	3601      	adds	r6, #1
 8002d14:	e7ee      	b.n	8002cf4 <__libc_init_array+0xc>
 8002d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d1a:	4798      	blx	r3
 8002d1c:	3601      	adds	r6, #1
 8002d1e:	e7f2      	b.n	8002d06 <__libc_init_array+0x1e>
 8002d20:	08003180 	.word	0x08003180
 8002d24:	08003180 	.word	0x08003180
 8002d28:	08003180 	.word	0x08003180
 8002d2c:	08003184 	.word	0x08003184

08002d30 <__retarget_lock_acquire_recursive>:
 8002d30:	4770      	bx	lr

08002d32 <__retarget_lock_release_recursive>:
 8002d32:	4770      	bx	lr

08002d34 <_free_r>:
 8002d34:	b538      	push	{r3, r4, r5, lr}
 8002d36:	4605      	mov	r5, r0
 8002d38:	2900      	cmp	r1, #0
 8002d3a:	d040      	beq.n	8002dbe <_free_r+0x8a>
 8002d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d40:	1f0c      	subs	r4, r1, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bfb8      	it	lt
 8002d46:	18e4      	addlt	r4, r4, r3
 8002d48:	f7ff ffa4 	bl	8002c94 <__malloc_lock>
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <_free_r+0x8c>)
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	b933      	cbnz	r3, 8002d60 <_free_r+0x2c>
 8002d52:	6063      	str	r3, [r4, #4]
 8002d54:	6014      	str	r4, [r2, #0]
 8002d56:	4628      	mov	r0, r5
 8002d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d5c:	f7ff bfa0 	b.w	8002ca0 <__malloc_unlock>
 8002d60:	42a3      	cmp	r3, r4
 8002d62:	d908      	bls.n	8002d76 <_free_r+0x42>
 8002d64:	6820      	ldr	r0, [r4, #0]
 8002d66:	1821      	adds	r1, r4, r0
 8002d68:	428b      	cmp	r3, r1
 8002d6a:	bf01      	itttt	eq
 8002d6c:	6819      	ldreq	r1, [r3, #0]
 8002d6e:	685b      	ldreq	r3, [r3, #4]
 8002d70:	1809      	addeq	r1, r1, r0
 8002d72:	6021      	streq	r1, [r4, #0]
 8002d74:	e7ed      	b.n	8002d52 <_free_r+0x1e>
 8002d76:	461a      	mov	r2, r3
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	b10b      	cbz	r3, 8002d80 <_free_r+0x4c>
 8002d7c:	42a3      	cmp	r3, r4
 8002d7e:	d9fa      	bls.n	8002d76 <_free_r+0x42>
 8002d80:	6811      	ldr	r1, [r2, #0]
 8002d82:	1850      	adds	r0, r2, r1
 8002d84:	42a0      	cmp	r0, r4
 8002d86:	d10b      	bne.n	8002da0 <_free_r+0x6c>
 8002d88:	6820      	ldr	r0, [r4, #0]
 8002d8a:	4401      	add	r1, r0
 8002d8c:	1850      	adds	r0, r2, r1
 8002d8e:	4283      	cmp	r3, r0
 8002d90:	6011      	str	r1, [r2, #0]
 8002d92:	d1e0      	bne.n	8002d56 <_free_r+0x22>
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4408      	add	r0, r1
 8002d9a:	6010      	str	r0, [r2, #0]
 8002d9c:	6053      	str	r3, [r2, #4]
 8002d9e:	e7da      	b.n	8002d56 <_free_r+0x22>
 8002da0:	d902      	bls.n	8002da8 <_free_r+0x74>
 8002da2:	230c      	movs	r3, #12
 8002da4:	602b      	str	r3, [r5, #0]
 8002da6:	e7d6      	b.n	8002d56 <_free_r+0x22>
 8002da8:	6820      	ldr	r0, [r4, #0]
 8002daa:	1821      	adds	r1, r4, r0
 8002dac:	428b      	cmp	r3, r1
 8002dae:	bf01      	itttt	eq
 8002db0:	6819      	ldreq	r1, [r3, #0]
 8002db2:	685b      	ldreq	r3, [r3, #4]
 8002db4:	1809      	addeq	r1, r1, r0
 8002db6:	6021      	streq	r1, [r4, #0]
 8002db8:	6063      	str	r3, [r4, #4]
 8002dba:	6054      	str	r4, [r2, #4]
 8002dbc:	e7cb      	b.n	8002d56 <_free_r+0x22>
 8002dbe:	bd38      	pop	{r3, r4, r5, pc}
 8002dc0:	2000064c 	.word	0x2000064c

08002dc4 <_init>:
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc6:	bf00      	nop
 8002dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dca:	bc08      	pop	{r3}
 8002dcc:	469e      	mov	lr, r3
 8002dce:	4770      	bx	lr

08002dd0 <_fini>:
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd2:	bf00      	nop
 8002dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd6:	bc08      	pop	{r3}
 8002dd8:	469e      	mov	lr, r3
 8002dda:	4770      	bx	lr
