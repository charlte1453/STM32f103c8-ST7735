
4am.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003278  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003628  08003628  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003628  08003628  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003628  08003628  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004530  2000000c  0800363c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000453c  0800363c  0002453c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001103e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002773  00000000  00000000  000310b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00033830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018977  00000000  00000000  000349d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014713  00000000  00000000  0004d347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f687  00000000  00000000  00061a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000db5  00000000  00000000  000f10e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b04  00000000  00000000  000f1e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003b  00000000  00000000  000f699c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800336c 	.word	0x0800336c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800336c 	.word	0x0800336c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fded 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f875 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9cd 	bl	80004f8 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f9ad 	bl	80004bc <MX_DMA_Init>
  MX_I2C1_Init();
 8000162:	f000 f8cf 	bl	8000304 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000166:	f000 f8fb 	bl	8000360 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 800016a:	f000 f985 	bl	8000478 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 800016e:	f000 f92f 	bl	80003d0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin , GPIO_PIN_SET);
 8000172:	2201      	movs	r2, #1
 8000174:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000178:	4830      	ldr	r0, [pc, #192]	; (800023c <main+0xf0>)
 800017a:	f001 fadf 	bl	800173c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin , GPIO_PIN_SET);
 800017e:	2201      	movs	r2, #1
 8000180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000184:	482d      	ldr	r0, [pc, #180]	; (800023c <main+0xf0>)
 8000186:	f001 fad9 	bl	800173c <HAL_GPIO_WritePin>
  ST7735_Init();
 800018a:	f000 fb61 	bl	8000850 <ST7735_Init>
  ST7735_FillScreen(0xFFFF);
 800018e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000192:	f000 fbeb 	bl	800096c <ST7735_FillScreen>
  HAL_Delay(1000);
 8000196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800019a:	f000 fe2b 	bl	8000df4 <HAL_Delay>
  static uint8_t Frame[128][128];

  for(uint8_t i = 0 ; i < 128 ; i++){
 800019e:	2300      	movs	r3, #0
 80001a0:	71fb      	strb	r3, [r7, #7]
 80001a2:	e014      	b.n	80001ce <main+0x82>
	  for(uint8_t j = 0 ; j < 128 ; j++){
 80001a4:	2300      	movs	r3, #0
 80001a6:	71bb      	strb	r3, [r7, #6]
 80001a8:	e00a      	b.n	80001c0 <main+0x74>
		  Frame[i][j] = i;
 80001aa:	79fa      	ldrb	r2, [r7, #7]
 80001ac:	79bb      	ldrb	r3, [r7, #6]
 80001ae:	4924      	ldr	r1, [pc, #144]	; (8000240 <main+0xf4>)
 80001b0:	01d2      	lsls	r2, r2, #7
 80001b2:	440a      	add	r2, r1
 80001b4:	4413      	add	r3, r2
 80001b6:	79fa      	ldrb	r2, [r7, #7]
 80001b8:	701a      	strb	r2, [r3, #0]
	  for(uint8_t j = 0 ; j < 128 ; j++){
 80001ba:	79bb      	ldrb	r3, [r7, #6]
 80001bc:	3301      	adds	r3, #1
 80001be:	71bb      	strb	r3, [r7, #6]
 80001c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	daf0      	bge.n	80001aa <main+0x5e>
  for(uint8_t i = 0 ; i < 128 ; i++){
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	3301      	adds	r3, #1
 80001cc:	71fb      	strb	r3, [r7, #7]
 80001ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	dae6      	bge.n	80001a4 <main+0x58>
	  }
  }

  ST7735_DrawFrame(Frame);
 80001d6:	481a      	ldr	r0, [pc, #104]	; (8000240 <main+0xf4>)
 80001d8:	f000 fbda 	bl	8000990 <ST7735_DrawFrame>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 for(uint8_t i = 0 ; i < 128 ; i++){
 80001dc:	2300      	movs	r3, #0
 80001de:	717b      	strb	r3, [r7, #5]
 80001e0:	e023      	b.n	800022a <main+0xde>
		  for(uint8_t j = 0 ; j < 128 ; j++){
 80001e2:	2300      	movs	r3, #0
 80001e4:	713b      	strb	r3, [r7, #4]
 80001e6:	e019      	b.n	800021c <main+0xd0>
			  Frame[i][j] = Frame[(i+1)%128][j];
 80001e8:	797b      	ldrb	r3, [r7, #5]
 80001ea:	3301      	adds	r3, #1
 80001ec:	425a      	negs	r2, r3
 80001ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80001f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80001f6:	bf58      	it	pl
 80001f8:	4253      	negpl	r3, r2
 80001fa:	7938      	ldrb	r0, [r7, #4]
 80001fc:	7979      	ldrb	r1, [r7, #5]
 80001fe:	793a      	ldrb	r2, [r7, #4]
 8000200:	4c0f      	ldr	r4, [pc, #60]	; (8000240 <main+0xf4>)
 8000202:	01db      	lsls	r3, r3, #7
 8000204:	4423      	add	r3, r4
 8000206:	4403      	add	r3, r0
 8000208:	781c      	ldrb	r4, [r3, #0]
 800020a:	480d      	ldr	r0, [pc, #52]	; (8000240 <main+0xf4>)
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	4403      	add	r3, r0
 8000210:	4413      	add	r3, r2
 8000212:	4622      	mov	r2, r4
 8000214:	701a      	strb	r2, [r3, #0]
		  for(uint8_t j = 0 ; j < 128 ; j++){
 8000216:	793b      	ldrb	r3, [r7, #4]
 8000218:	3301      	adds	r3, #1
 800021a:	713b      	strb	r3, [r7, #4]
 800021c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000220:	2b00      	cmp	r3, #0
 8000222:	dae1      	bge.n	80001e8 <main+0x9c>
	 for(uint8_t i = 0 ; i < 128 ; i++){
 8000224:	797b      	ldrb	r3, [r7, #5]
 8000226:	3301      	adds	r3, #1
 8000228:	717b      	strb	r3, [r7, #5]
 800022a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800022e:	2b00      	cmp	r3, #0
 8000230:	dad7      	bge.n	80001e2 <main+0x96>
		  }
	  }

	  ST7735_DrawFrame(Frame);
 8000232:	4803      	ldr	r0, [pc, #12]	; (8000240 <main+0xf4>)
 8000234:	f000 fbac 	bl	8000990 <ST7735_DrawFrame>
	 for(uint8_t i = 0 ; i < 128 ; i++){
 8000238:	e7d0      	b.n	80001dc <main+0x90>
 800023a:	bf00      	nop
 800023c:	40010800 	.word	0x40010800
 8000240:	20000438 	.word	0x20000438

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b094      	sub	sp, #80	; 0x50
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f003 f85e 	bl	8003314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000274:	2301      	movs	r3, #1
 8000276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000290:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000294:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fca0 	bl	8001be0 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002a6:	f000 f9e3 	bl	8000670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2102      	movs	r1, #2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 ff0c 	bl	80020e4 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002d2:	f000 f9cd 	bl	8000670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002d6:	2310      	movs	r3, #16
 80002d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 f8b1 	bl	8002448 <HAL_RCCEx_PeriphCLKConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002ec:	f000 f9c0 	bl	8000670 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 80002f6:	2000      	movs	r0, #0
 80002f8:	f001 ffde 	bl	80022b8 <HAL_RCC_MCOConfig>
}
 80002fc:	bf00      	nop
 80002fe:	3750      	adds	r7, #80	; 0x50
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_I2C1_Init+0x50>)
 800030a:	4a13      	ldr	r2, [pc, #76]	; (8000358 <MX_I2C1_Init+0x54>)
 800030c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_I2C1_Init+0x50>)
 8000310:	4a12      	ldr	r2, [pc, #72]	; (800035c <MX_I2C1_Init+0x58>)
 8000312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_I2C1_Init+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_I2C1_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_I2C1_Init+0x50>)
 8000322:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000326:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <MX_I2C1_Init+0x50>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_I2C1_Init+0x50>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <MX_I2C1_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_I2C1_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <MX_I2C1_Init+0x50>)
 8000342:	f001 fa13 	bl	800176c <HAL_I2C_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800034c:	f000 f990 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000028 	.word	0x20000028
 8000358:	40005400 	.word	0x40005400
 800035c:	000186a0 	.word	0x000186a0

08000360 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_SPI2_Init+0x68>)
 8000366:	4a19      	ldr	r2, [pc, #100]	; (80003cc <MX_SPI2_Init+0x6c>)
 8000368:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_SPI2_Init+0x68>)
 800036c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000370:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_SPI2_Init+0x68>)
 8000374:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000378:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800037a:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <MX_SPI2_Init+0x68>)
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_SPI2_Init+0x68>)
 8000382:	2202      	movs	r2, #2
 8000384:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MX_SPI2_Init+0x68>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_SPI2_Init+0x68>)
 800038e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000392:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_SPI2_Init+0x68>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_SPI2_Init+0x68>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_SPI2_Init+0x68>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_SPI2_Init+0x68>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_SPI2_Init+0x68>)
 80003ae:	220a      	movs	r2, #10
 80003b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <MX_SPI2_Init+0x68>)
 80003b4:	f002 f8fe 	bl	80025b4 <HAL_SPI_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80003be:	f000 f957 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2000007c 	.word	0x2000007c
 80003cc:	40003800 	.word	0x40003800

080003d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d6:	f107 0308 	add.w	r3, r7, #8
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e4:	463b      	mov	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ec:	4b20      	ldr	r3, [pc, #128]	; (8000470 <MX_TIM1_Init+0xa0>)
 80003ee:	4a21      	ldr	r2, [pc, #132]	; (8000474 <MX_TIM1_Init+0xa4>)
 80003f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <MX_TIM1_Init+0xa0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f8:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <MX_TIM1_Init+0xa0>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3;
 80003fe:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <MX_TIM1_Init+0xa0>)
 8000400:	2203      	movs	r2, #3
 8000402:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000404:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <MX_TIM1_Init+0xa0>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <MX_TIM1_Init+0xa0>)
 800040c:	2200      	movs	r2, #0
 800040e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000410:	4b17      	ldr	r3, [pc, #92]	; (8000470 <MX_TIM1_Init+0xa0>)
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000416:	4816      	ldr	r0, [pc, #88]	; (8000470 <MX_TIM1_Init+0xa0>)
 8000418:	f002 fca9 	bl	8002d6e <HAL_TIM_Base_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000422:	f000 f925 	bl	8000670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800042a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800042c:	f107 0308 	add.w	r3, r7, #8
 8000430:	4619      	mov	r1, r3
 8000432:	480f      	ldr	r0, [pc, #60]	; (8000470 <MX_TIM1_Init+0xa0>)
 8000434:	f002 fcea 	bl	8002e0c <HAL_TIM_ConfigClockSource>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800043e:	f000 f917 	bl	8000670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000442:	2300      	movs	r3, #0
 8000444:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044a:	463b      	mov	r3, r7
 800044c:	4619      	mov	r1, r3
 800044e:	4808      	ldr	r0, [pc, #32]	; (8000470 <MX_TIM1_Init+0xa0>)
 8000450:	f002 fea8 	bl	80031a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800045a:	f000 f909 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  htim1.Instance->BDTR = TIM_BDTR_MOE;
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <MX_TIM1_Init+0xa0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000466:	645a      	str	r2, [r3, #68]	; 0x44
  /* USER CODE END TIM1_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	3718      	adds	r7, #24
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000118 	.word	0x20000118
 8000474:	40012c00 	.word	0x40012c00

08000478 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800047c:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <MX_USB_PCD_Init+0x3c>)
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <MX_USB_PCD_Init+0x40>)
 8000480:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_USB_PCD_Init+0x3c>)
 8000484:	2208      	movs	r2, #8
 8000486:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <MX_USB_PCD_Init+0x3c>)
 800048a:	2202      	movs	r2, #2
 800048c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_USB_PCD_Init+0x3c>)
 8000490:	2200      	movs	r2, #0
 8000492:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <MX_USB_PCD_Init+0x3c>)
 8000496:	2200      	movs	r2, #0
 8000498:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_USB_PCD_Init+0x3c>)
 800049c:	2200      	movs	r2, #0
 800049e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004a0:	4804      	ldr	r0, [pc, #16]	; (80004b4 <MX_USB_PCD_Init+0x3c>)
 80004a2:	f001 faa7 	bl	80019f4 <HAL_PCD_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80004ac:	f000 f8e0 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000160 	.word	0x20000160
 80004b8:	40005c00 	.word	0x40005c00

080004bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_DMA_Init+0x38>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <MX_DMA_Init+0x38>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_DMA_Init+0x38>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2100      	movs	r1, #0
 80004de:	200f      	movs	r0, #15
 80004e0:	f000 fd83 	bl	8000fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004e4:	200f      	movs	r0, #15
 80004e6:	f000 fd9c 	bl	8001022 <HAL_NVIC_EnableIRQ>

}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050c:	4b52      	ldr	r3, [pc, #328]	; (8000658 <MX_GPIO_Init+0x160>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a51      	ldr	r2, [pc, #324]	; (8000658 <MX_GPIO_Init+0x160>)
 8000512:	f043 0310 	orr.w	r3, r3, #16
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b4f      	ldr	r3, [pc, #316]	; (8000658 <MX_GPIO_Init+0x160>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0310 	and.w	r3, r3, #16
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000524:	4b4c      	ldr	r3, [pc, #304]	; (8000658 <MX_GPIO_Init+0x160>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a4b      	ldr	r2, [pc, #300]	; (8000658 <MX_GPIO_Init+0x160>)
 800052a:	f043 0320 	orr.w	r3, r3, #32
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b49      	ldr	r3, [pc, #292]	; (8000658 <MX_GPIO_Init+0x160>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0320 	and.w	r3, r3, #32
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053c:	4b46      	ldr	r3, [pc, #280]	; (8000658 <MX_GPIO_Init+0x160>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a45      	ldr	r2, [pc, #276]	; (8000658 <MX_GPIO_Init+0x160>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b43      	ldr	r3, [pc, #268]	; (8000658 <MX_GPIO_Init+0x160>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0304 	and.w	r3, r3, #4
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000554:	4b40      	ldr	r3, [pc, #256]	; (8000658 <MX_GPIO_Init+0x160>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a3f      	ldr	r2, [pc, #252]	; (8000658 <MX_GPIO_Init+0x160>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b3d      	ldr	r3, [pc, #244]	; (8000658 <MX_GPIO_Init+0x160>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0308 	and.w	r3, r3, #8
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000572:	483a      	ldr	r0, [pc, #232]	; (800065c <MX_GPIO_Init+0x164>)
 8000574:	f001 f8e2 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWDN_Pin|CAMERA_RESET_Pin|ST7735_BL_Pin|ST7735_DC_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f245 0106 	movw	r1, #20486	; 0x5006
 800057e:	4838      	ldr	r0, [pc, #224]	; (8000660 <MX_GPIO_Init+0x168>)
 8000580:	f001 f8dc 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800058a:	4836      	ldr	r0, [pc, #216]	; (8000664 <MX_GPIO_Init+0x16c>)
 800058c:	f001 f8d6 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2302      	movs	r3, #2
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	482c      	ldr	r0, [pc, #176]	; (800065c <MX_GPIO_Init+0x164>)
 80005aa:	f000 ff43 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80005ae:	23ff      	movs	r3, #255	; 0xff
 80005b0:	613b      	str	r3, [r7, #16]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	4828      	ldr	r0, [pc, #160]	; (8000664 <MX_GPIO_Init+0x16c>)
 80005c2:	f000 ff37 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWDN_Pin CAMERA_RESET_Pin ST7735_BL_Pin ST7735_DC_Pin */
  GPIO_InitStruct.Pin = PWDN_Pin|CAMERA_RESET_Pin|ST7735_BL_Pin|ST7735_DC_Pin;
 80005c6:	f245 0306 	movw	r3, #20486	; 0x5006
 80005ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	4820      	ldr	r0, [pc, #128]	; (8000660 <MX_GPIO_Init+0x168>)
 80005e0:	f000 ff28 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCLK_Pin */
  GPIO_InitStruct.Pin = MCLK_Pin;
 80005e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	2302      	movs	r3, #2
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCLK_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	4619      	mov	r1, r3
 80005f8:	481a      	ldr	r0, [pc, #104]	; (8000664 <MX_GPIO_Init+0x16c>)
 80005fa:	f000 ff1b 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin|ST7735_RES_Pin;
 80005fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	4813      	ldr	r0, [pc, #76]	; (8000664 <MX_GPIO_Init+0x16c>)
 8000618:	f000 ff0c 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIXCLK_Pin */
  GPIO_InitStruct.Pin = PIXCLK_Pin;
 800061c:	2320      	movs	r3, #32
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_GPIO_Init+0x170>)
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PIXCLK_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	480c      	ldr	r0, [pc, #48]	; (8000660 <MX_GPIO_Init+0x168>)
 8000630:	f000 ff00 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : vSYNC_Pin HSYNC_Pin */
  GPIO_InitStruct.Pin = vSYNC_Pin|HSYNC_Pin;
 8000634:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_GPIO_Init+0x174>)
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_GPIO_Init+0x168>)
 800064a:	f000 fef3 	bl	8001434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	40011000 	.word	0x40011000
 8000660:	40010c00 	.word	0x40010c00
 8000664:	40010800 	.word	0x40010800
 8000668:	10210000 	.word	0x10210000
 800066c:	10310000 	.word	0x10310000

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <ST7735_Select+0x14>)
 8000688:	f001 f858 	bl	800173c <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40010800 	.word	0x40010800

08000694 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069e:	4802      	ldr	r0, [pc, #8]	; (80006a8 <ST7735_Unselect+0x14>)
 80006a0:	f001 f84c 	bl	800173c <HAL_GPIO_WritePin>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40010800 	.word	0x40010800

080006ac <ST7735_Reset>:

static void ST7735_Reset() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <ST7735_Reset+0x28>)
 80006b8:	f001 f840 	bl	800173c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80006bc:	2005      	movs	r0, #5
 80006be:	f000 fb99 	bl	8000df4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <ST7735_Reset+0x28>)
 80006ca:	f001 f837 	bl	800173c <HAL_GPIO_WritePin>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40010800 	.word	0x40010800

080006d8 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <ST7735_WriteCommand+0x2c>)
 80006ea:	f001 f827 	bl	800173c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80006ee:	1df9      	adds	r1, r7, #7
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	2201      	movs	r2, #1
 80006f6:	4804      	ldr	r0, [pc, #16]	; (8000708 <ST7735_WriteCommand+0x30>)
 80006f8:	f001 ffe0 	bl	80026bc <HAL_SPI_Transmit>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40010c00 	.word	0x40010c00
 8000708:	2000007c 	.word	0x2000007c

0800070c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <ST7735_WriteData+0x30>)
 800071e:	f001 f80d 	bl	800173c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b29a      	uxth	r2, r3
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <ST7735_WriteData+0x34>)
 800072e:	f001 ffc5 	bl	80026bc <HAL_SPI_Transmit>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40010c00 	.word	0x40010c00
 8000740:	2000007c 	.word	0x2000007c

08000744 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000756:	e034      	b.n	80007c2 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000762:	7afb      	ldrb	r3, [r7, #11]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ffb7 	bl	80006d8 <ST7735_WriteCommand>

        numArgs = *addr++;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000774:	7abb      	ldrb	r3, [r7, #10]
 8000776:	b29b      	uxth	r3, r3
 8000778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800077e:	7abb      	ldrb	r3, [r7, #10]
 8000780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000784:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000786:	7abb      	ldrb	r3, [r7, #10]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d008      	beq.n	800079e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800078c:	7abb      	ldrb	r3, [r7, #10]
 800078e:	4619      	mov	r1, r3
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ffbb 	bl	800070c <ST7735_WriteData>
            addr += numArgs;
 8000796:	7abb      	ldrb	r3, [r7, #10]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800079e:	89bb      	ldrh	r3, [r7, #12]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00e      	beq.n	80007c2 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80007ae:	89bb      	ldrh	r3, [r7, #12]
 80007b0:	2bff      	cmp	r3, #255	; 0xff
 80007b2:	d102      	bne.n	80007ba <ST7735_ExecuteCommandList+0x76>
 80007b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007b8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80007ba:	89bb      	ldrh	r3, [r7, #12]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fb19 	bl	8000df4 <HAL_Delay>
    while(numCommands--) {
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	73fa      	strb	r2, [r7, #15]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1c5      	bne.n	8000758 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80007d6:	b590      	push	{r4, r7, lr}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4604      	mov	r4, r0
 80007de:	4608      	mov	r0, r1
 80007e0:	4611      	mov	r1, r2
 80007e2:	461a      	mov	r2, r3
 80007e4:	4623      	mov	r3, r4
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4603      	mov	r3, r0
 80007ea:	71bb      	strb	r3, [r7, #6]
 80007ec:	460b      	mov	r3, r1
 80007ee:	717b      	strb	r3, [r7, #5]
 80007f0:	4613      	mov	r3, r2
 80007f2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80007f4:	202a      	movs	r0, #42	; 0x2a
 80007f6:	f7ff ff6f 	bl	80006d8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80007fa:	2300      	movs	r3, #0
 80007fc:	733b      	strb	r3, [r7, #12]
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	3302      	adds	r3, #2
 8000802:	b2db      	uxtb	r3, r3
 8000804:	737b      	strb	r3, [r7, #13]
 8000806:	2300      	movs	r3, #0
 8000808:	73bb      	strb	r3, [r7, #14]
 800080a:	797b      	ldrb	r3, [r7, #5]
 800080c:	3302      	adds	r3, #2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2104      	movs	r1, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff77 	bl	800070c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800081e:	202b      	movs	r0, #43	; 0x2b
 8000820:	f7ff ff5a 	bl	80006d8 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	3303      	adds	r3, #3
 8000828:	b2db      	uxtb	r3, r3
 800082a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800082c:	793b      	ldrb	r3, [r7, #4]
 800082e:	3303      	adds	r3, #3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2104      	movs	r1, #4
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff66 	bl	800070c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000840:	202c      	movs	r0, #44	; 0x2c
 8000842:	f7ff ff49 	bl	80006d8 <ST7735_WriteCommand>
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bd90      	pop	{r4, r7, pc}
	...

08000850 <ST7735_Init>:

void ST7735_Init() {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000854:	f7ff ff12 	bl	800067c <ST7735_Select>
    ST7735_Reset();
 8000858:	f7ff ff28 	bl	80006ac <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <ST7735_Init+0x28>)
 800085e:	f7ff ff71 	bl	8000744 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <ST7735_Init+0x2c>)
 8000864:	f7ff ff6e 	bl	8000744 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <ST7735_Init+0x30>)
 800086a:	f7ff ff6b 	bl	8000744 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800086e:	f7ff ff11 	bl	8000694 <ST7735_Unselect>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	08003584 	.word	0x08003584
 800087c:	080035c0 	.word	0x080035c0
 8000880:	080035d0 	.word	0x080035d0

08000884 <ST7735_FillRectangle>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	4604      	mov	r4, r0
 800088c:	4608      	mov	r0, r1
 800088e:	4611      	mov	r1, r2
 8000890:	461a      	mov	r2, r3
 8000892:	4623      	mov	r3, r4
 8000894:	80fb      	strh	r3, [r7, #6]
 8000896:	4603      	mov	r3, r0
 8000898:	80bb      	strh	r3, [r7, #4]
 800089a:	460b      	mov	r3, r1
 800089c:	807b      	strh	r3, [r7, #2]
 800089e:	4613      	mov	r3, r2
 80008a0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	2b7f      	cmp	r3, #127	; 0x7f
 80008a6:	d858      	bhi.n	800095a <ST7735_FillRectangle+0xd6>
 80008a8:	88bb      	ldrh	r3, [r7, #4]
 80008aa:	2b7f      	cmp	r3, #127	; 0x7f
 80008ac:	d855      	bhi.n	800095a <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80008ae:	88fa      	ldrh	r2, [r7, #6]
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	4413      	add	r3, r2
 80008b4:	2b80      	cmp	r3, #128	; 0x80
 80008b6:	dd03      	ble.n	80008c0 <ST7735_FillRectangle+0x3c>
 80008b8:	88fb      	ldrh	r3, [r7, #6]
 80008ba:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80008be:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80008c0:	88ba      	ldrh	r2, [r7, #4]
 80008c2:	883b      	ldrh	r3, [r7, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	2b80      	cmp	r3, #128	; 0x80
 80008c8:	dd03      	ble.n	80008d2 <ST7735_FillRectangle+0x4e>
 80008ca:	88bb      	ldrh	r3, [r7, #4]
 80008cc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80008d0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80008d2:	f7ff fed3 	bl	800067c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	b2d8      	uxtb	r0, r3
 80008da:	88bb      	ldrh	r3, [r7, #4]
 80008dc:	b2d9      	uxtb	r1, r3
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4413      	add	r3, r2
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	3b01      	subs	r3, #1
 80008ec:	b2dc      	uxtb	r4, r3
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	883b      	ldrh	r3, [r7, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4413      	add	r3, r2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	3b01      	subs	r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4622      	mov	r2, r4
 8000900:	f7ff ff69 	bl	80007d6 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000904:	8c3b      	ldrh	r3, [r7, #32]
 8000906:	0a1b      	lsrs	r3, r3, #8
 8000908:	b29b      	uxth	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	733b      	strb	r3, [r7, #12]
 800090e:	8c3b      	ldrh	r3, [r7, #32]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091a:	4812      	ldr	r0, [pc, #72]	; (8000964 <ST7735_FillRectangle+0xe0>)
 800091c:	f000 ff0e 	bl	800173c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000920:	883b      	ldrh	r3, [r7, #0]
 8000922:	80bb      	strh	r3, [r7, #4]
 8000924:	e013      	b.n	800094e <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8000926:	887b      	ldrh	r3, [r7, #2]
 8000928:	80fb      	strh	r3, [r7, #6]
 800092a:	e00a      	b.n	8000942 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800092c:	f107 010c 	add.w	r1, r7, #12
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	2202      	movs	r2, #2
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <ST7735_FillRectangle+0xe4>)
 8000938:	f001 fec0 	bl	80026bc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	3b01      	subs	r3, #1
 8000940:	80fb      	strh	r3, [r7, #6]
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f1      	bne.n	800092c <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8000948:	88bb      	ldrh	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	80bb      	strh	r3, [r7, #4]
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1e8      	bne.n	8000926 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8000954:	f7ff fe9e 	bl	8000694 <ST7735_Unselect>
 8000958:	e000      	b.n	800095c <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800095a:	bf00      	nop
}
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	bf00      	nop
 8000964:	40010c00 	.word	0x40010c00
 8000968:	2000007c 	.word	0x2000007c

0800096c <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af02      	add	r7, sp, #8
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	2100      	movs	r1, #0
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff ff7f 	bl	8000884 <ST7735_FillRectangle>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <ST7735_DrawFrame>:
/*This function takes GrayScale data*/

static uint8_t LineBuf[256];


void ST7735_DrawFrame(uint8_t Frame[128][128]) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    for (uint16_t y = 0; y < 128; y++) {
 8000998:	2300      	movs	r3, #0
 800099a:	81fb      	strh	r3, [r7, #14]
 800099c:	e044      	b.n	8000a28 <ST7735_DrawFrame+0x98>
        // Convert grayscale line to RGB565
        for (uint16_t x = 0; x < 128; x++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	81bb      	strh	r3, [r7, #12]
 80009a2:	e01c      	b.n	80009de <ST7735_DrawFrame+0x4e>
            uint16_t color = RGB565[Frame[y][x]];
 80009a4:	89fb      	ldrh	r3, [r7, #14]
 80009a6:	01db      	lsls	r3, r3, #7
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	441a      	add	r2, r3
 80009ac:	89bb      	ldrh	r3, [r7, #12]
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <ST7735_DrawFrame+0xa8>)
 80009b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80009b8:	817b      	strh	r3, [r7, #10]
            LineBuf[x * 2]     = color >> 8;      // MSB
 80009ba:	897b      	ldrh	r3, [r7, #10]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	b29a      	uxth	r2, r3
 80009c0:	89bb      	ldrh	r3, [r7, #12]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	b2d1      	uxtb	r1, r2
 80009c6:	4a1d      	ldr	r2, [pc, #116]	; (8000a3c <ST7735_DrawFrame+0xac>)
 80009c8:	54d1      	strb	r1, [r2, r3]
            LineBuf[x * 2 + 1] = color & 0xFF;    // LSB
 80009ca:	89bb      	ldrh	r3, [r7, #12]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	3301      	adds	r3, #1
 80009d0:	897a      	ldrh	r2, [r7, #10]
 80009d2:	b2d1      	uxtb	r1, r2
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <ST7735_DrawFrame+0xac>)
 80009d6:	54d1      	strb	r1, [r2, r3]
        for (uint16_t x = 0; x < 128; x++) {
 80009d8:	89bb      	ldrh	r3, [r7, #12]
 80009da:	3301      	adds	r3, #1
 80009dc:	81bb      	strh	r3, [r7, #12]
 80009de:	89bb      	ldrh	r3, [r7, #12]
 80009e0:	2b7f      	cmp	r3, #127	; 0x7f
 80009e2:	d9df      	bls.n	80009a4 <ST7735_DrawFrame+0x14>
        }

        // Set address window to the current line
        ST7735_Select();
 80009e4:	f7ff fe4a 	bl	800067c <ST7735_Select>
        ST7735_SetAddressWindow(0, y, 127, y);
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	b2d9      	uxtb	r1, r3
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	227f      	movs	r2, #127	; 0x7f
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff feef 	bl	80007d6 <ST7735_SetAddressWindow>
        HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fe:	4810      	ldr	r0, [pc, #64]	; (8000a40 <ST7735_DrawFrame+0xb0>)
 8000a00:	f000 fe9c 	bl	800173c <HAL_GPIO_WritePin>

        HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, LineBuf, 128 * 2);
 8000a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <ST7735_DrawFrame+0xac>)
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <ST7735_DrawFrame+0xb4>)
 8000a0c:	f001 ff9a 	bl	8002944 <HAL_SPI_Transmit_DMA>

        while (HAL_SPI_GetState(&ST7735_SPI_PORT) != HAL_SPI_STATE_READY);
 8000a10:	bf00      	nop
 8000a12:	480c      	ldr	r0, [pc, #48]	; (8000a44 <ST7735_DrawFrame+0xb4>)
 8000a14:	f002 f863 	bl	8002ade <HAL_SPI_GetState>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d1f9      	bne.n	8000a12 <ST7735_DrawFrame+0x82>

        ST7735_Unselect();
 8000a1e:	f7ff fe39 	bl	8000694 <ST7735_Unselect>
    for (uint16_t y = 0; y < 128; y++) {
 8000a22:	89fb      	ldrh	r3, [r7, #14]
 8000a24:	3301      	adds	r3, #1
 8000a26:	81fb      	strh	r3, [r7, #14]
 8000a28:	89fb      	ldrh	r3, [r7, #14]
 8000a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a2c:	d9b7      	bls.n	800099e <ST7735_DrawFrame+0xe>
    }
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	08003384 	.word	0x08003384
 8000a3c:	20004438 	.word	0x20004438
 8000a40:	40010c00 	.word	0x40010c00
 8000a44:	2000007c 	.word	0x2000007c

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	61d3      	str	r3, [r2, #28]
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_MspInit+0x60>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_MspInit+0x60>)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010000 	.word	0x40010000

08000aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <HAL_I2C_MspInit+0x70>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d123      	bne.n	8000b14 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_I2C_MspInit+0x74>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_I2C_MspInit+0x74>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_I2C_MspInit+0x74>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ae4:	23c0      	movs	r3, #192	; 0xc0
 8000ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae8:	2312      	movs	r3, #18
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	480b      	ldr	r0, [pc, #44]	; (8000b24 <HAL_I2C_MspInit+0x78>)
 8000af8:	f000 fc9c 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_I2C_MspInit+0x74>)
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_I2C_MspInit+0x74>)
 8000b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b06:	61d3      	str	r3, [r2, #28]
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_I2C_MspInit+0x74>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a29      	ldr	r2, [pc, #164]	; (8000be8 <HAL_SPI_MspInit+0xc0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d14a      	bne.n	8000bde <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	4a27      	ldr	r2, [pc, #156]	; (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b52:	61d3      	str	r3, [r2, #28]
 8000b54:	4b25      	ldr	r3, [pc, #148]	; (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a21      	ldr	r2, [pc, #132]	; (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000b78:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000b7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <HAL_SPI_MspInit+0xc8>)
 8000b8e:	f000 fc51 	bl	8001434 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <HAL_SPI_MspInit+0xd0>)
 8000b96:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000b9a:	2210      	movs	r2, #16
 8000b9c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000ba6:	2280      	movs	r2, #128	; 0x80
 8000ba8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000bc2:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000bc4:	f000 fa48 	bl	8001058 <HAL_DMA_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8000bce:	f7ff fd4f 	bl	8000670 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000bd6:	649a      	str	r2, [r3, #72]	; 0x48
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40003800 	.word	0x40003800
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010c00 	.word	0x40010c00
 8000bf4:	200000d4 	.word	0x200000d4
 8000bf8:	40020058 	.word	0x40020058

08000bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <HAL_TIM_Base_MspInit+0x34>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d10b      	bne.n	8000c26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_TIM_Base_MspInit+0x38>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_TIM_Base_MspInit+0x38>)
 8000c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_TIM_Base_MspInit+0x38>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40012c00 	.word	0x40012c00
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <HAL_PCD_MspInit+0x34>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d10b      	bne.n	8000c62 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_PCD_MspInit+0x38>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_PCD_MspInit+0x38>)
 8000c50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_PCD_MspInit+0x38>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	40005c00 	.word	0x40005c00
 8000c70:	40021000 	.word	0x40021000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cba:	f000 f87f 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <DMA1_Channel5_IRQHandler+0x10>)
 8000cca:	f000 fa7f 	bl	80011cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000d4 	.word	0x200000d4

08000cd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce4:	f7ff fff8 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cea:	490c      	ldr	r1, [pc, #48]	; (8000d1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cec:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d00:	4c09      	ldr	r4, [pc, #36]	; (8000d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f002 fb09 	bl	8003324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d12:	f7ff fa1b 	bl	800014c <main>
  bx lr
 8000d16:	4770      	bx	lr
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d20:	08003630 	.word	0x08003630
  ldr r2, =_sbss
 8000d24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d28:	2000453c 	.word	0x2000453c

08000d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_2_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x28>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x28>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f947 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	200f      	movs	r0, #15
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fe7c 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40022000 	.word	0x40022000

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f95f 	bl	800103e <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f927 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_IncTick+0x1c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a03      	ldr	r2, [pc, #12]	; (8000ddc <HAL_IncTick+0x20>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20004538 	.word	0x20004538

08000de0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <HAL_GetTick+0x10>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	20004538 	.word	0x20004538

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff fff0 	bl	8000de0 <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_Delay+0x44>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffe0 	bl	8000de0 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4906      	ldr	r1, [pc, #24]	; (8000ed4 <__NVIC_EnableIRQ+0x34>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff90 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff2d 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff42 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff90 	bl	8000f2c <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5f 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff35 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e043      	b.n	80010f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <HAL_DMA_Init+0xa8>)
 8001076:	4413      	add	r3, r2
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <HAL_DMA_Init+0xac>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	009a      	lsls	r2, r3, #2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <HAL_DMA_Init+0xb0>)
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2202      	movs	r2, #2
 8001090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80010a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	bffdfff8 	.word	0xbffdfff8
 8001104:	cccccccd 	.word	0xcccccccd
 8001108:	40020000 	.word	0x40020000

0800110c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <HAL_DMA_Start_IT+0x20>
 8001128:	2302      	movs	r3, #2
 800112a:	e04b      	b.n	80011c4 <HAL_DMA_Start_IT+0xb8>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d13a      	bne.n	80011b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2202      	movs	r2, #2
 8001144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f937 	bl	80013d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	2b00      	cmp	r3, #0
 8001170:	d008      	beq.n	8001184 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 020e 	orr.w	r2, r2, #14
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e00f      	b.n	80011a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0204 	bic.w	r2, r2, #4
 8001192:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 020a 	orr.w	r2, r2, #10
 80011a2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e005      	b.n	80011c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011be:	2302      	movs	r3, #2
 80011c0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	2204      	movs	r2, #4
 80011ea:	409a      	lsls	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d04f      	beq.n	8001294 <HAL_DMA_IRQHandler+0xc8>
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d04a      	beq.n	8001294 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0320 	and.w	r3, r3, #32
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0204 	bic.w	r2, r2, #4
 800121a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a66      	ldr	r2, [pc, #408]	; (80013bc <HAL_DMA_IRQHandler+0x1f0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d029      	beq.n	800127a <HAL_DMA_IRQHandler+0xae>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a65      	ldr	r2, [pc, #404]	; (80013c0 <HAL_DMA_IRQHandler+0x1f4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d022      	beq.n	8001276 <HAL_DMA_IRQHandler+0xaa>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a63      	ldr	r2, [pc, #396]	; (80013c4 <HAL_DMA_IRQHandler+0x1f8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01a      	beq.n	8001270 <HAL_DMA_IRQHandler+0xa4>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a62      	ldr	r2, [pc, #392]	; (80013c8 <HAL_DMA_IRQHandler+0x1fc>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d012      	beq.n	800126a <HAL_DMA_IRQHandler+0x9e>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a60      	ldr	r2, [pc, #384]	; (80013cc <HAL_DMA_IRQHandler+0x200>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00a      	beq.n	8001264 <HAL_DMA_IRQHandler+0x98>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a5f      	ldr	r2, [pc, #380]	; (80013d0 <HAL_DMA_IRQHandler+0x204>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d102      	bne.n	800125e <HAL_DMA_IRQHandler+0x92>
 8001258:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125c:	e00e      	b.n	800127c <HAL_DMA_IRQHandler+0xb0>
 800125e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001262:	e00b      	b.n	800127c <HAL_DMA_IRQHandler+0xb0>
 8001264:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001268:	e008      	b.n	800127c <HAL_DMA_IRQHandler+0xb0>
 800126a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800126e:	e005      	b.n	800127c <HAL_DMA_IRQHandler+0xb0>
 8001270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001274:	e002      	b.n	800127c <HAL_DMA_IRQHandler+0xb0>
 8001276:	2340      	movs	r3, #64	; 0x40
 8001278:	e000      	b.n	800127c <HAL_DMA_IRQHandler+0xb0>
 800127a:	2304      	movs	r3, #4
 800127c:	4a55      	ldr	r2, [pc, #340]	; (80013d4 <HAL_DMA_IRQHandler+0x208>)
 800127e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 8094 	beq.w	80013b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001292:	e08e      	b.n	80013b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	2202      	movs	r2, #2
 800129a:	409a      	lsls	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d056      	beq.n	8001352 <HAL_DMA_IRQHandler+0x186>
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d051      	beq.n	8001352 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0320 	and.w	r3, r3, #32
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10b      	bne.n	80012d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 020a 	bic.w	r2, r2, #10
 80012ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a38      	ldr	r2, [pc, #224]	; (80013bc <HAL_DMA_IRQHandler+0x1f0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d029      	beq.n	8001332 <HAL_DMA_IRQHandler+0x166>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a37      	ldr	r2, [pc, #220]	; (80013c0 <HAL_DMA_IRQHandler+0x1f4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d022      	beq.n	800132e <HAL_DMA_IRQHandler+0x162>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a35      	ldr	r2, [pc, #212]	; (80013c4 <HAL_DMA_IRQHandler+0x1f8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d01a      	beq.n	8001328 <HAL_DMA_IRQHandler+0x15c>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a34      	ldr	r2, [pc, #208]	; (80013c8 <HAL_DMA_IRQHandler+0x1fc>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d012      	beq.n	8001322 <HAL_DMA_IRQHandler+0x156>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a32      	ldr	r2, [pc, #200]	; (80013cc <HAL_DMA_IRQHandler+0x200>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00a      	beq.n	800131c <HAL_DMA_IRQHandler+0x150>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a31      	ldr	r2, [pc, #196]	; (80013d0 <HAL_DMA_IRQHandler+0x204>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d102      	bne.n	8001316 <HAL_DMA_IRQHandler+0x14a>
 8001310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001314:	e00e      	b.n	8001334 <HAL_DMA_IRQHandler+0x168>
 8001316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800131a:	e00b      	b.n	8001334 <HAL_DMA_IRQHandler+0x168>
 800131c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001320:	e008      	b.n	8001334 <HAL_DMA_IRQHandler+0x168>
 8001322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001326:	e005      	b.n	8001334 <HAL_DMA_IRQHandler+0x168>
 8001328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132c:	e002      	b.n	8001334 <HAL_DMA_IRQHandler+0x168>
 800132e:	2320      	movs	r3, #32
 8001330:	e000      	b.n	8001334 <HAL_DMA_IRQHandler+0x168>
 8001332:	2302      	movs	r3, #2
 8001334:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <HAL_DMA_IRQHandler+0x208>)
 8001336:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001344:	2b00      	cmp	r3, #0
 8001346:	d034      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001350:	e02f      	b.n	80013b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	2208      	movs	r2, #8
 8001358:	409a      	lsls	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4013      	ands	r3, r2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d028      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x1e8>
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b00      	cmp	r3, #0
 800136a:	d023      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 020e 	bic.w	r2, r2, #14
 800137a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f202 	lsl.w	r2, r1, r2
 800138a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d004      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	4798      	blx	r3
    }
  }
  return;
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
}
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40020008 	.word	0x40020008
 80013c0:	4002001c 	.word	0x4002001c
 80013c4:	40020030 	.word	0x40020030
 80013c8:	40020044 	.word	0x40020044
 80013cc:	40020058 	.word	0x40020058
 80013d0:	4002006c 	.word	0x4002006c
 80013d4:	40020000 	.word	0x40020000

080013d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f202 	lsl.w	r2, r1, r2
 80013f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b10      	cmp	r3, #16
 8001404:	d108      	bne.n	8001418 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001416:	e007      	b.n	8001428 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	60da      	str	r2, [r3, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b08b      	sub	sp, #44	; 0x2c
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001446:	e169      	b.n	800171c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001448:	2201      	movs	r2, #1
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 8158 	bne.w	8001716 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a9a      	ldr	r2, [pc, #616]	; (80016d4 <HAL_GPIO_Init+0x2a0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d05e      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001470:	4a98      	ldr	r2, [pc, #608]	; (80016d4 <HAL_GPIO_Init+0x2a0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d875      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001476:	4a98      	ldr	r2, [pc, #608]	; (80016d8 <HAL_GPIO_Init+0x2a4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d058      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 800147c:	4a96      	ldr	r2, [pc, #600]	; (80016d8 <HAL_GPIO_Init+0x2a4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d86f      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001482:	4a96      	ldr	r2, [pc, #600]	; (80016dc <HAL_GPIO_Init+0x2a8>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d052      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001488:	4a94      	ldr	r2, [pc, #592]	; (80016dc <HAL_GPIO_Init+0x2a8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d869      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800148e:	4a94      	ldr	r2, [pc, #592]	; (80016e0 <HAL_GPIO_Init+0x2ac>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d04c      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001494:	4a92      	ldr	r2, [pc, #584]	; (80016e0 <HAL_GPIO_Init+0x2ac>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d863      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800149a:	4a92      	ldr	r2, [pc, #584]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d046      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 80014a0:	4a90      	ldr	r2, [pc, #576]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d85d      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d82a      	bhi.n	8001500 <HAL_GPIO_Init+0xcc>
 80014aa:	2b12      	cmp	r3, #18
 80014ac:	d859      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014ae:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <HAL_GPIO_Init+0x80>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	0800152f 	.word	0x0800152f
 80014b8:	08001509 	.word	0x08001509
 80014bc:	0800151b 	.word	0x0800151b
 80014c0:	0800155d 	.word	0x0800155d
 80014c4:	08001563 	.word	0x08001563
 80014c8:	08001563 	.word	0x08001563
 80014cc:	08001563 	.word	0x08001563
 80014d0:	08001563 	.word	0x08001563
 80014d4:	08001563 	.word	0x08001563
 80014d8:	08001563 	.word	0x08001563
 80014dc:	08001563 	.word	0x08001563
 80014e0:	08001563 	.word	0x08001563
 80014e4:	08001563 	.word	0x08001563
 80014e8:	08001563 	.word	0x08001563
 80014ec:	08001563 	.word	0x08001563
 80014f0:	08001563 	.word	0x08001563
 80014f4:	08001563 	.word	0x08001563
 80014f8:	08001511 	.word	0x08001511
 80014fc:	08001525 	.word	0x08001525
 8001500:	4a79      	ldr	r2, [pc, #484]	; (80016e8 <HAL_GPIO_Init+0x2b4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001506:	e02c      	b.n	8001562 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e029      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	3304      	adds	r3, #4
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e024      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	3308      	adds	r3, #8
 8001520:	623b      	str	r3, [r7, #32]
          break;
 8001522:	e01f      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	330c      	adds	r3, #12
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	e01a      	b.n	8001564 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001536:	2304      	movs	r3, #4
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e013      	b.n	8001564 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d105      	bne.n	8001550 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001544:	2308      	movs	r3, #8
 8001546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	611a      	str	r2, [r3, #16]
          break;
 800154e:	e009      	b.n	8001564 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	615a      	str	r2, [r3, #20]
          break;
 800155a:	e003      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x130>
          break;
 8001562:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2bff      	cmp	r3, #255	; 0xff
 8001568:	d801      	bhi.n	800156e <HAL_GPIO_Init+0x13a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	e001      	b.n	8001572 <HAL_GPIO_Init+0x13e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3304      	adds	r3, #4
 8001572:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2bff      	cmp	r3, #255	; 0xff
 8001578:	d802      	bhi.n	8001580 <HAL_GPIO_Init+0x14c>
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0x152>
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	3b08      	subs	r3, #8
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	210f      	movs	r1, #15
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	401a      	ands	r2, r3
 8001598:	6a39      	ldr	r1, [r7, #32]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80b1 	beq.w	8001716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b4:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <HAL_GPIO_Init+0x2b8>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a4c      	ldr	r2, [pc, #304]	; (80016ec <HAL_GPIO_Init+0x2b8>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <HAL_GPIO_Init+0x2b8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015cc:	4a48      	ldr	r2, [pc, #288]	; (80016f0 <HAL_GPIO_Init+0x2bc>)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a40      	ldr	r2, [pc, #256]	; (80016f4 <HAL_GPIO_Init+0x2c0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d013      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3f      	ldr	r2, [pc, #252]	; (80016f8 <HAL_GPIO_Init+0x2c4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d00d      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3e      	ldr	r2, [pc, #248]	; (80016fc <HAL_GPIO_Init+0x2c8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d007      	beq.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3d      	ldr	r2, [pc, #244]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d101      	bne.n	8001614 <HAL_GPIO_Init+0x1e0>
 8001610:	2303      	movs	r3, #3
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001614:	2304      	movs	r3, #4
 8001616:	e004      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001618:	2302      	movs	r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001620:	2300      	movs	r3, #0
 8001622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001624:	f002 0203 	and.w	r2, r2, #3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4093      	lsls	r3, r2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001632:	492f      	ldr	r1, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x2bc>)
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	492c      	ldr	r1, [pc, #176]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4928      	ldr	r1, [pc, #160]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001664:	4013      	ands	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	4922      	ldr	r1, [pc, #136]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	43db      	mvns	r3, r3
 800168a:	491e      	ldr	r1, [pc, #120]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800168c:	4013      	ands	r3, r2
 800168e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4918      	ldr	r1, [pc, #96]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4914      	ldr	r1, [pc, #80]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d021      	beq.n	8001708 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	490e      	ldr	r1, [pc, #56]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e021      	b.n	8001716 <HAL_GPIO_Init+0x2e2>
 80016d2:	bf00      	nop
 80016d4:	10320000 	.word	0x10320000
 80016d8:	10310000 	.word	0x10310000
 80016dc:	10220000 	.word	0x10220000
 80016e0:	10210000 	.word	0x10210000
 80016e4:	10120000 	.word	0x10120000
 80016e8:	10110000 	.word	0x10110000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40011000 	.word	0x40011000
 8001700:	40011400 	.word	0x40011400
 8001704:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_GPIO_Init+0x304>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	43db      	mvns	r3, r3
 8001710:	4909      	ldr	r1, [pc, #36]	; (8001738 <HAL_GPIO_Init+0x304>)
 8001712:	4013      	ands	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	3301      	adds	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	f47f ae8e 	bne.w	8001448 <HAL_GPIO_Init+0x14>
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	372c      	adds	r7, #44	; 0x2c
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	40010400 	.word	0x40010400

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e12b      	b.n	80019d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff f98a 	bl	8000aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2224      	movs	r2, #36	; 0x24
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017d0:	f000 fe08 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 80017d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4a81      	ldr	r2, [pc, #516]	; (80019e0 <HAL_I2C_Init+0x274>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d807      	bhi.n	80017f0 <HAL_I2C_Init+0x84>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4a80      	ldr	r2, [pc, #512]	; (80019e4 <HAL_I2C_Init+0x278>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	bf94      	ite	ls
 80017e8:	2301      	movls	r3, #1
 80017ea:	2300      	movhi	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	e006      	b.n	80017fe <HAL_I2C_Init+0x92>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4a7d      	ldr	r2, [pc, #500]	; (80019e8 <HAL_I2C_Init+0x27c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	bf94      	ite	ls
 80017f8:	2301      	movls	r3, #1
 80017fa:	2300      	movhi	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0e7      	b.n	80019d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4a78      	ldr	r2, [pc, #480]	; (80019ec <HAL_I2C_Init+0x280>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0c9b      	lsrs	r3, r3, #18
 8001810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a6a      	ldr	r2, [pc, #424]	; (80019e0 <HAL_I2C_Init+0x274>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d802      	bhi.n	8001840 <HAL_I2C_Init+0xd4>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	e009      	b.n	8001854 <HAL_I2C_Init+0xe8>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	4a69      	ldr	r2, [pc, #420]	; (80019f0 <HAL_I2C_Init+0x284>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	3301      	adds	r3, #1
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	430b      	orrs	r3, r1
 800185a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001866:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	495c      	ldr	r1, [pc, #368]	; (80019e0 <HAL_I2C_Init+0x274>)
 8001870:	428b      	cmp	r3, r1
 8001872:	d819      	bhi.n	80018a8 <HAL_I2C_Init+0x13c>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1e59      	subs	r1, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001882:	1c59      	adds	r1, r3, #1
 8001884:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001888:	400b      	ands	r3, r1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <HAL_I2C_Init+0x138>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e59      	subs	r1, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fbb1 f3f3 	udiv	r3, r1, r3
 800189c:	3301      	adds	r3, #1
 800189e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a2:	e051      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 80018a4:	2304      	movs	r3, #4
 80018a6:	e04f      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d111      	bne.n	80018d4 <HAL_I2C_Init+0x168>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	440b      	add	r3, r1
 80018be:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf0c      	ite	eq
 80018cc:	2301      	moveq	r3, #1
 80018ce:	2300      	movne	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	e012      	b.n	80018fa <HAL_I2C_Init+0x18e>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1e58      	subs	r0, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	0099      	lsls	r1, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf0c      	ite	eq
 80018f4:	2301      	moveq	r3, #1
 80018f6:	2300      	movne	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Init+0x196>
 80018fe:	2301      	movs	r3, #1
 8001900:	e022      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10e      	bne.n	8001928 <HAL_I2C_Init+0x1bc>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1e58      	subs	r0, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	460b      	mov	r3, r1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	440b      	add	r3, r1
 8001918:	fbb0 f3f3 	udiv	r3, r0, r3
 800191c:	3301      	adds	r3, #1
 800191e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001926:	e00f      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1e58      	subs	r0, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	0099      	lsls	r1, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	fbb0 f3f3 	udiv	r3, r0, r3
 800193e:	3301      	adds	r3, #1
 8001940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	6809      	ldr	r1, [r1, #0]
 800194c:	4313      	orrs	r3, r2
 800194e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001976:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6911      	ldr	r1, [r2, #16]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68d2      	ldr	r2, [r2, #12]
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	430b      	orrs	r3, r1
 800198a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	000186a0 	.word	0x000186a0
 80019e4:	001e847f 	.word	0x001e847f
 80019e8:	003d08ff 	.word	0x003d08ff
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	10624dd3 	.word	0x10624dd3

080019f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0e8      	b.n	8001bd8 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff f90c 	bl	8000c38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2203      	movs	r2, #3
 8001a24:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 fc21 	bl	800327a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a42:	f001 fc0d 	bl	8003260 <USB_CoreInit>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0bf      	b.n	8001bd8 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f001 fc25 	bl	80032ae <USB_SetCurrentMode>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0b0      	b.n	8001bd8 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e03e      	b.n	8001afa <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	3311      	adds	r3, #17
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3310      	adds	r3, #16
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3313      	adds	r3, #19
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3320      	adds	r3, #32
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	3324      	adds	r3, #36	; 0x24
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	3301      	adds	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	791b      	ldrb	r3, [r3, #4]
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d3bb      	bcc.n	8001a7c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e044      	b.n	8001b94 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	440b      	add	r3, r1
 8001b44:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	3301      	adds	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	791b      	ldrb	r3, [r3, #4]
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d3b5      	bcc.n	8001b0a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba8:	f001 fb8d 	bl	80032c6 <USB_DevInit>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00c      	b.n	8001bd8 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fb95 	bl	8003300 <USB_DevDisconnect>

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e272      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8087 	beq.w	8001d0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c00:	4b92      	ldr	r3, [pc, #584]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d00c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c0c:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d112      	bne.n	8001c3e <HAL_RCC_OscConfig+0x5e>
 8001c18:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d10b      	bne.n	8001c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d06c      	beq.n	8001d0c <HAL_RCC_OscConfig+0x12c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d168      	bne.n	8001d0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e24c      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x76>
 8001c48:	4b80      	ldr	r3, [pc, #512]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a7f      	ldr	r2, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e02e      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x98>
 8001c5e:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7a      	ldr	r2, [pc, #488]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b78      	ldr	r3, [pc, #480]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a77      	ldr	r2, [pc, #476]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0xbc>
 8001c82:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a71      	ldr	r2, [pc, #452]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6e      	ldr	r2, [pc, #440]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	4b6b      	ldr	r3, [pc, #428]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6a      	ldr	r2, [pc, #424]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a67      	ldr	r2, [pc, #412]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f890 	bl	8000de0 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f88c 	bl	8000de0 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e200      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xe4>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f87c 	bl	8000de0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff f878 	bl	8000de0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1ec      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x10c>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d063      	beq.n	8001de2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1a:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d11c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x18c>
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x176>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1c0      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4939      	ldr	r1, [pc, #228]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	e03a      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f831 	bl	8000de0 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff f82d 	bl	8000de0 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1a1      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4927      	ldr	r1, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f810 	bl	8000de0 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f80c 	bl	8000de0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e180      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03a      	beq.n	8001e64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d019      	beq.n	8001e2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_RCC_OscConfig+0x274>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7fe fff0 	bl	8000de0 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e04:	f7fe ffec 	bl	8000de0 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e160      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f000 faf2 	bl	800240c <RCC_Delay>
 8001e28:	e01c      	b.n	8001e64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7fe ffd6 	bl	8000de0 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e36:	e00f      	b.n	8001e58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e38:	f7fe ffd2 	bl	8000de0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d908      	bls.n	8001e58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e146      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	42420000 	.word	0x42420000
 8001e54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e9      	bne.n	8001e38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a6 	beq.w	8001fbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10d      	bne.n	8001e9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a87      	ldr	r2, [pc, #540]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b85      	ldr	r3, [pc, #532]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b7f      	ldr	r3, [pc, #508]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7e      	ldr	r2, [pc, #504]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe ff93 	bl	8000de0 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7fe ff8f 	bl	8000de0 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b64      	cmp	r3, #100	; 0x64
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e103      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b75      	ldr	r3, [pc, #468]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x312>
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a6e      	ldr	r2, [pc, #440]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e02d      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x334>
 8001efa:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a69      	ldr	r2, [pc, #420]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a66      	ldr	r2, [pc, #408]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	e01c      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x356>
 8001f1c:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a60      	ldr	r2, [pc, #384]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	4b5e      	ldr	r3, [pc, #376]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a5d      	ldr	r2, [pc, #372]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6213      	str	r3, [r2, #32]
 8001f34:	e00b      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001f36:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a5a      	ldr	r2, [pc, #360]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a57      	ldr	r2, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d015      	beq.n	8001f82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe ff43 	bl	8000de0 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7fe ff3f 	bl	8000de0 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0b1      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ee      	beq.n	8001f5e <HAL_RCC_OscConfig+0x37e>
 8001f80:	e014      	b.n	8001fac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7fe ff2d 	bl	8000de0 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe ff29 	bl	8000de0 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e09b      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ee      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d105      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a3b      	ldr	r2, [pc, #236]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8087 	beq.w	80020d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d061      	beq.n	8002098 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d146      	bne.n	800206a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fdc:	4b33      	ldr	r3, [pc, #204]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fefd 	bl	8000de0 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fea:	f7fe fef9 	bl	8000de0 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e06d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d108      	bne.n	8002024 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4921      	ldr	r1, [pc, #132]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a19      	ldr	r1, [r3, #32]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	430b      	orrs	r3, r1
 8002036:	491b      	ldr	r1, [pc, #108]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe fecd 	bl	8000de0 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe fec9 	bl	8000de0 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e03d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x46a>
 8002068:	e035      	b.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe feb6 	bl	8000de0 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe feb2 	bl	8000de0 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e026      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x498>
 8002096:	e01e      	b.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e019      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40007000 	.word	0x40007000
 80020ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x500>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0d0      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d910      	bls.n	8002128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4965      	ldr	r1, [pc, #404]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0b8      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002140:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800214a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002158:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4a52      	ldr	r2, [pc, #328]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	494d      	ldr	r1, [pc, #308]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d040      	beq.n	8002204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d115      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e07f      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e073      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e06b      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f023 0203 	bic.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4936      	ldr	r1, [pc, #216]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d4:	f7fe fe04 	bl	8000de0 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7fe fe00 	bl	8000de0 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e053      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 020c 	and.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d210      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 0207 	bic.w	r2, r3, #7
 800221a:	4922      	ldr	r1, [pc, #136]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e032      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4916      	ldr	r1, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	490e      	ldr	r1, [pc, #56]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002272:	f000 f859 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 8002276:	4602      	mov	r2, r0
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	490a      	ldr	r1, [pc, #40]	; (80022ac <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	5ccb      	ldrb	r3, [r1, r3]
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <HAL_RCC_ClockConfig+0x1cc>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fd62 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	080035fc 	.word	0x080035fc
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80022c4:	f107 0318 	add.w	r3, r7, #24
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80022de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e2:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_RCC_MCOConfig+0x68>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <HAL_RCC_MCOConfig+0x68>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_MCOConfig+0x68>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80022fc:	f107 0318 	add.w	r3, r7, #24
 8002300:	4619      	mov	r1, r3
 8002302:	4808      	ldr	r0, [pc, #32]	; (8002324 <HAL_RCC_MCOConfig+0x6c>)
 8002304:	f7ff f896 	bl	8001434 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_MCOConfig+0x68>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002310:	4903      	ldr	r1, [pc, #12]	; (8002320 <HAL_RCC_MCOConfig+0x68>)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
}
 8002318:	bf00      	nop
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	40010800 	.word	0x40010800

08002328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d002      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x30>
 8002352:	2b08      	cmp	r3, #8
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x36>
 8002356:	e027      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800235a:	613b      	str	r3, [r7, #16]
      break;
 800235c:	e027      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	0c9b      	lsrs	r3, r3, #18
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002368:	5cd3      	ldrb	r3, [r2, r3]
 800236a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d010      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	0c5b      	lsrs	r3, r3, #17
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800238a:	fb03 f202 	mul.w	r2, r3, r2
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	fbb2 f3f3 	udiv	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e004      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	613b      	str	r3, [r7, #16]
      break;
 80023a6:	e002      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023aa:	613b      	str	r3, [r7, #16]
      break;
 80023ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ae:	693b      	ldr	r3, [r7, #16]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	007a1200 	.word	0x007a1200
 80023c4:	08003614 	.word	0x08003614
 80023c8:	08003624 	.word	0x08003624
 80023cc:	003d0900 	.word	0x003d0900

080023d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	20000000 	.word	0x20000000

080023e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e8:	f7ff fff2 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4903      	ldr	r1, [pc, #12]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	0800360c 	.word	0x0800360c

0800240c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <RCC_Delay+0x34>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <RCC_Delay+0x38>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002428:	bf00      	nop
  }
  while (Delay --);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	60fa      	str	r2, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f9      	bne.n	8002428 <RCC_Delay+0x1c>
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000000 	.word	0x20000000
 8002444:	10624dd3 	.word	0x10624dd3

08002448 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d07d      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002468:	4b4f      	ldr	r3, [pc, #316]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	4a4b      	ldr	r2, [pc, #300]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	61d3      	str	r3, [r2, #28]
 8002480:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248c:	2301      	movs	r3, #1
 800248e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	4b46      	ldr	r3, [pc, #280]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d118      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249c:	4b43      	ldr	r3, [pc, #268]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a42      	ldr	r2, [pc, #264]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a8:	f7fe fc9a 	bl	8000de0 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	e008      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b0:	f7fe fc96 	bl	8000de0 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e06d      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d02e      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d027      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024ec:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002502:	4a29      	ldr	r2, [pc, #164]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d014      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe fc65 	bl	8000de0 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe fc61 	bl	8000de0 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e036      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ee      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4917      	ldr	r1, [pc, #92]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254a:	4313      	orrs	r3, r2
 800254c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	4a13      	ldr	r2, [pc, #76]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	490b      	ldr	r1, [pc, #44]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	4904      	ldr	r1, [pc, #16]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42420440 	.word	0x42420440

080025b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e076      	b.n	80026b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d108      	bne.n	80025e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025d6:	d009      	beq.n	80025ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
 80025de:	e005      	b.n	80025ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fa8e 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002622:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002670:	ea42 0103 	orr.w	r1, r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	0c1a      	lsrs	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f002 0204 	and.w	r2, r2, #4
 8002692:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026cc:	f7fe fb88 	bl	8000de0 <HAL_GetTick>
 80026d0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d001      	beq.n	80026e6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
 80026e4:	e12a      	b.n	800293c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_SPI_Transmit+0x36>
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e122      	b.n	800293c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_SPI_Transmit+0x48>
 8002700:	2302      	movs	r3, #2
 8002702:	e11b      	b.n	800293c <HAL_SPI_Transmit+0x280>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2203      	movs	r2, #3
 8002710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	88fa      	ldrh	r2, [r7, #6]
 800272a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002752:	d10f      	bne.n	8002774 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002762:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002772:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b40      	cmp	r3, #64	; 0x40
 8002780:	d007      	beq.n	8002792 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800279a:	d152      	bne.n	8002842 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_SPI_Transmit+0xee>
 80027a4:	8b7b      	ldrh	r3, [r7, #26]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d145      	bne.n	8002836 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	881a      	ldrh	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	1c9a      	adds	r2, r3, #2
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027ce:	e032      	b.n	8002836 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d112      	bne.n	8002804 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	881a      	ldrh	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	1c9a      	adds	r2, r3, #2
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	86da      	strh	r2, [r3, #54]	; 0x36
 8002802:	e018      	b.n	8002836 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002804:	f7fe faec 	bl	8000de0 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d803      	bhi.n	800281c <HAL_SPI_Transmit+0x160>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d102      	bne.n	8002822 <HAL_SPI_Transmit+0x166>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e082      	b.n	800293c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1c7      	bne.n	80027d0 <HAL_SPI_Transmit+0x114>
 8002840:	e053      	b.n	80028ea <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_SPI_Transmit+0x194>
 800284a:	8b7b      	ldrh	r3, [r7, #26]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d147      	bne.n	80028e0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	7812      	ldrb	r2, [r2, #0]
 800285c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002876:	e033      	b.n	80028e0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	d113      	bne.n	80028ae <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	7812      	ldrb	r2, [r2, #0]
 8002892:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80028ac:	e018      	b.n	80028e0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028ae:	f7fe fa97 	bl	8000de0 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d803      	bhi.n	80028c6 <HAL_SPI_Transmit+0x20a>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d102      	bne.n	80028cc <HAL_SPI_Transmit+0x210>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d109      	bne.n	80028e0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e02d      	b.n	800293c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1c6      	bne.n	8002878 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	6839      	ldr	r1, [r7, #0]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fa0c 	bl	8002d0c <SPI_EndRxTxTransaction>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800293a:	2300      	movs	r3, #0
  }
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d001      	beq.n	8002962 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
 8002960:	e097      	b.n	8002a92 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <HAL_SPI_Transmit_DMA+0x2a>
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e08f      	b.n	8002a92 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_SPI_Transmit_DMA+0x3c>
 800297c:	2302      	movs	r3, #2
 800297e:	e088      	b.n	8002a92 <HAL_SPI_Transmit_DMA+0x14e>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2203      	movs	r2, #3
 800298c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	88fa      	ldrh	r2, [r7, #6]
 80029a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ce:	d10f      	bne.n	80029f0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f4:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <HAL_SPI_Transmit_DMA+0x158>)
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_SPI_Transmit_DMA+0x15c>)
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a04:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <HAL_SPI_Transmit_DMA+0x160>)
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	4619      	mov	r1, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	330c      	adds	r3, #12
 8002a20:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002a28:	f7fe fb70 	bl	800110c <HAL_DMA_Start_IT>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f043 0210 	orr.w	r2, r3, #16
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e023      	b.n	8002a92 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d007      	beq.n	8002a68 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a66:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0220 	orr.w	r2, r2, #32
 8002a7e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0202 	orr.w	r2, r2, #2
 8002a8e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	08002b9f 	.word	0x08002b9f
 8002aa0:	08002af9 	.word	0x08002af9
 8002aa4:	08002bbb 	.word	0x08002bbb

08002aa8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aec:	b2db      	uxtb	r3, r3
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b06:	f7fe f96b 	bl	8000de0 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d03b      	beq.n	8002b92 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0220 	bic.w	r2, r2, #32
 8002b28:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0202 	bic.w	r2, r2, #2
 8002b38:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	2164      	movs	r1, #100	; 0x64
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f000 f8e4 	bl	8002d0c <SPI_EndRxTxTransaction>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2200      	movs	r2, #0
 8002b78:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002b8a:	6978      	ldr	r0, [r7, #20]
 8002b8c:	f7ff ff9e 	bl	8002acc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002b90:	e002      	b.n	8002b98 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	f7ff ff88 	bl	8002aa8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7ff ff84 	bl	8002aba <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0203 	bic.w	r2, r2, #3
 8002bd6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bdc:	f043 0210 	orr.w	r2, r3, #16
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff ff6d 	bl	8002acc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c0c:	f7fe f8e8 	bl	8000de0 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	4413      	add	r3, r2
 8002c1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c1c:	f7fe f8e0 	bl	8000de0 <HAL_GetTick>
 8002c20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c22:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	015b      	lsls	r3, r3, #5
 8002c28:	0d1b      	lsrs	r3, r3, #20
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c32:	e054      	b.n	8002cde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3a:	d050      	beq.n	8002cde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c3c:	f7fe f8d0 	bl	8000de0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d902      	bls.n	8002c52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d13d      	bne.n	8002cce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c6a:	d111      	bne.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c74:	d004      	beq.n	8002c80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d107      	bne.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c98:	d10f      	bne.n	8002cba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e017      	b.n	8002cfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d19b      	bne.n	8002c34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000000 	.word	0x20000000

08002d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2102      	movs	r1, #2
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7ff ff6a 	bl	8002bfc <SPI_WaitFlagStateUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	f043 0220 	orr.w	r2, r3, #32
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e013      	b.n	8002d66 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2180      	movs	r1, #128	; 0x80
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff ff57 	bl	8002bfc <SPI_WaitFlagStateUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e000      	b.n	8002d66 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e041      	b.n	8002e04 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fd ff31 	bl	8000bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f000 f8f5 	bl	8002f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_TIM_ConfigClockSource+0x1c>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e0b4      	b.n	8002f92 <HAL_TIM_ConfigClockSource+0x186>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e60:	d03e      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0xd4>
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e66:	f200 8087 	bhi.w	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6e:	f000 8086 	beq.w	8002f7e <HAL_TIM_ConfigClockSource+0x172>
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e76:	d87f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b70      	cmp	r3, #112	; 0x70
 8002e7a:	d01a      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xa6>
 8002e7c:	2b70      	cmp	r3, #112	; 0x70
 8002e7e:	d87b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b60      	cmp	r3, #96	; 0x60
 8002e82:	d050      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x11a>
 8002e84:	2b60      	cmp	r3, #96	; 0x60
 8002e86:	d877      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b50      	cmp	r3, #80	; 0x50
 8002e8a:	d03c      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xfa>
 8002e8c:	2b50      	cmp	r3, #80	; 0x50
 8002e8e:	d873      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d058      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x13a>
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d86f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b30      	cmp	r3, #48	; 0x30
 8002e9a:	d064      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002e9c:	2b30      	cmp	r3, #48	; 0x30
 8002e9e:	d86b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d060      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d867      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d05c      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d05a      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb0:	e062      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ec2:	f000 f950 	bl	8003166 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	609a      	str	r2, [r3, #8]
      break;
 8002ede:	e04f      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ef0:	f000 f939 	bl	8003166 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f02:	609a      	str	r2, [r3, #8]
      break;
 8002f04:	e03c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 f8b0 	bl	8003078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2150      	movs	r1, #80	; 0x50
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f907 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 8002f24:	e02c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 f8ce 	bl	80030d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2160      	movs	r1, #96	; 0x60
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f8f7 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 8002f44:	e01c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 f890 	bl	8003078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f8e7 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 8002f64:	e00c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f000 f8de 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 8002f76:	e003      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e000      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a2f      	ldr	r2, [pc, #188]	; (800306c <TIM_Base_SetConfig+0xd0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fba:	d007      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <TIM_Base_SetConfig+0xd4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <TIM_Base_SetConfig+0xd8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d108      	bne.n	8002fde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <TIM_Base_SetConfig+0xd0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00b      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fec:	d007      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <TIM_Base_SetConfig+0xd4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d003      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <TIM_Base_SetConfig+0xd8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d108      	bne.n	8003010 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a0d      	ldr	r2, [pc, #52]	; (800306c <TIM_Base_SetConfig+0xd0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d103      	bne.n	8003044 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f023 0201 	bic.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	611a      	str	r2, [r3, #16]
  }
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	40012c00 	.word	0x40012c00
 8003070:	40000400 	.word	0x40000400
 8003074:	40000800 	.word	0x40000800

08003078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f023 0201 	bic.w	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f023 030a 	bic.w	r3, r3, #10
 80030b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	621a      	str	r2, [r3, #32]
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f023 0210 	bic.w	r2, r3, #16
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	031b      	lsls	r3, r3, #12
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003110:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	621a      	str	r2, [r3, #32]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	f043 0307 	orr.w	r3, r3, #7
 8003154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	609a      	str	r2, [r3, #8]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003166:	b480      	push	{r7}
 8003168:	b087      	sub	sp, #28
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003180:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	021a      	lsls	r2, r3, #8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	431a      	orrs	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4313      	orrs	r3, r2
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	609a      	str	r2, [r3, #8]
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e046      	b.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a16      	ldr	r2, [pc, #88]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00e      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d009      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a12      	ldr	r2, [pc, #72]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10c      	bne.n	8003238 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4313      	orrs	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800

08003260 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	4638      	mov	r0, r7
 800326a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003282:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003286:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	b29b      	uxth	r3, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	b29b      	uxth	r3, r3
 8003298:	4013      	ands	r3, r2
 800329a:	b29a      	uxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	4638      	mov	r0, r7
 80032d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <memset>:
 8003314:	4603      	mov	r3, r0
 8003316:	4402      	add	r2, r0
 8003318:	4293      	cmp	r3, r2
 800331a:	d100      	bne.n	800331e <memset+0xa>
 800331c:	4770      	bx	lr
 800331e:	f803 1b01 	strb.w	r1, [r3], #1
 8003322:	e7f9      	b.n	8003318 <memset+0x4>

08003324 <__libc_init_array>:
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	2600      	movs	r6, #0
 8003328:	4d0c      	ldr	r5, [pc, #48]	; (800335c <__libc_init_array+0x38>)
 800332a:	4c0d      	ldr	r4, [pc, #52]	; (8003360 <__libc_init_array+0x3c>)
 800332c:	1b64      	subs	r4, r4, r5
 800332e:	10a4      	asrs	r4, r4, #2
 8003330:	42a6      	cmp	r6, r4
 8003332:	d109      	bne.n	8003348 <__libc_init_array+0x24>
 8003334:	f000 f81a 	bl	800336c <_init>
 8003338:	2600      	movs	r6, #0
 800333a:	4d0a      	ldr	r5, [pc, #40]	; (8003364 <__libc_init_array+0x40>)
 800333c:	4c0a      	ldr	r4, [pc, #40]	; (8003368 <__libc_init_array+0x44>)
 800333e:	1b64      	subs	r4, r4, r5
 8003340:	10a4      	asrs	r4, r4, #2
 8003342:	42a6      	cmp	r6, r4
 8003344:	d105      	bne.n	8003352 <__libc_init_array+0x2e>
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	f855 3b04 	ldr.w	r3, [r5], #4
 800334c:	4798      	blx	r3
 800334e:	3601      	adds	r6, #1
 8003350:	e7ee      	b.n	8003330 <__libc_init_array+0xc>
 8003352:	f855 3b04 	ldr.w	r3, [r5], #4
 8003356:	4798      	blx	r3
 8003358:	3601      	adds	r6, #1
 800335a:	e7f2      	b.n	8003342 <__libc_init_array+0x1e>
 800335c:	08003628 	.word	0x08003628
 8003360:	08003628 	.word	0x08003628
 8003364:	08003628 	.word	0x08003628
 8003368:	0800362c 	.word	0x0800362c

0800336c <_init>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	bf00      	nop
 8003370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003372:	bc08      	pop	{r3}
 8003374:	469e      	mov	lr, r3
 8003376:	4770      	bx	lr

08003378 <_fini>:
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	bf00      	nop
 800337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337e:	bc08      	pop	{r3}
 8003380:	469e      	mov	lr, r3
 8003382:	4770      	bx	lr
