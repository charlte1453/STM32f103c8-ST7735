
4am.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003074  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08003180  08003180  00004180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003524  08003524  00005138  2**0
                  CONTENTS
  4 .ARM          00000000  08003524  08003524  00005138  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003524  08003524  00005138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003524  08003524  00004524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003528  08003528  00004528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800352c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  20000138  08003664  00005138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  08003664  00005914  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a70a  00000000  00000000  00005161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002135  00000000  00000000  0000f86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  000119a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000772  00000000  00000000  000123a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d38  00000000  00000000  00012b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb65  00000000  00000000  00029852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085526  00000000  00000000  000353b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba8dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af8  00000000  00000000  000ba920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000bd418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000138 	.word	0x20000138
 8000128:	00000000 	.word	0x00000000
 800012c:	08003168 	.word	0x08003168

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000013c 	.word	0x2000013c
 8000148:	08003168 	.word	0x08003168

0800014c <init_Bullets>:
 };

struct  bullet Bullets[MAXBULLETS];
struct enemyBullets evilBullets[MAXENEMYBULLETS];

void init_Bullets(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAXBULLETS ; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e019      	b.n	800018c <init_Bullets+0x40>
		Bullets[i].x = 0;
 8000158:	4a11      	ldr	r2, [pc, #68]	@ (80001a0 <init_Bullets+0x54>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		Bullets[i].y = 0;
 8000162:	4a0f      	ldr	r2, [pc, #60]	@ (80001a0 <init_Bullets+0x54>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	009b      	lsls	r3, r3, #2
 8000168:	4413      	add	r3, r2
 800016a:	2200      	movs	r2, #0
 800016c:	705a      	strb	r2, [r3, #1]
		Bullets[i].speed = 0;
 800016e:	4a0c      	ldr	r2, [pc, #48]	@ (80001a0 <init_Bullets+0x54>)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	4413      	add	r3, r2
 8000176:	2200      	movs	r2, #0
 8000178:	709a      	strb	r2, [r3, #2]
		Bullets[i].isActive = 0;
 800017a:	4a09      	ldr	r2, [pc, #36]	@ (80001a0 <init_Bullets+0x54>)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	009b      	lsls	r3, r3, #2
 8000180:	4413      	add	r3, r2
 8000182:	2200      	movs	r2, #0
 8000184:	70da      	strb	r2, [r3, #3]
	for(int i = 0 ; i < MAXBULLETS ; i++){
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	3301      	adds	r3, #1
 800018a:	607b      	str	r3, [r7, #4]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000190:	dde2      	ble.n	8000158 <init_Bullets+0xc>
	};
}
 8000192:	bf00      	nop
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	200004c8 	.word	0x200004c8

080001a4 <killEnemy>:
//
//	EXTI->PR |= EXTI_PR_PR4;
//
//}

void killEnemy(struct enemy* enemy){
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	enemy->isDying = 1;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2201      	movs	r2, #1
 80001b0:	70da      	strb	r2, [r3, #3]
}
 80001b2:	bf00      	nop
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr

080001bc <calculateCollisions>:
void calculateCollisions(){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAXBULLETS ; i++){
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]
 80001c6:	e064      	b.n	8000292 <calculateCollisions+0xd6>
		if(Bullets[i].isActive == 0){
 80001c8:	4a36      	ldr	r2, [pc, #216]	@ (80002a4 <calculateCollisions+0xe8>)
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	4413      	add	r3, r2
 80001d0:	78db      	ldrb	r3, [r3, #3]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d061      	beq.n	800029a <calculateCollisions+0xde>
			return;
		}

		for(int j = 0 ; j <20 ; j++){
 80001d6:	2300      	movs	r3, #0
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	e054      	b.n	8000286 <calculateCollisions+0xca>
			if(enemyList[j].isAlive == 0){
 80001dc:	4a32      	ldr	r2, [pc, #200]	@ (80002a8 <calculateCollisions+0xec>)
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	00db      	lsls	r3, r3, #3
 80001e2:	4413      	add	r3, r2
 80001e4:	789b      	ldrb	r3, [r3, #2]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d049      	beq.n	800027e <calculateCollisions+0xc2>
				continue;
			}

			int8_t disp_x = enemyList[j].x-Bullets[i].x;
 80001ea:	4a2f      	ldr	r2, [pc, #188]	@ (80002a8 <calculateCollisions+0xec>)
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80001f2:	492c      	ldr	r1, [pc, #176]	@ (80002a4 <calculateCollisions+0xe8>)
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 80001fa:	1ad3      	subs	r3, r2, r3
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	71fb      	strb	r3, [r7, #7]
			int8_t disp_y = enemyList[j].y-Bullets[i].y;
 8000200:	4a29      	ldr	r2, [pc, #164]	@ (80002a8 <calculateCollisions+0xec>)
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	00db      	lsls	r3, r3, #3
 8000206:	4413      	add	r3, r2
 8000208:	785a      	ldrb	r2, [r3, #1]
 800020a:	4926      	ldr	r1, [pc, #152]	@ (80002a4 <calculateCollisions+0xe8>)
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	440b      	add	r3, r1
 8000212:	785b      	ldrb	r3, [r3, #1]
 8000214:	1ad3      	subs	r3, r2, r3
 8000216:	b2db      	uxtb	r3, r3
 8000218:	71bb      	strb	r3, [r7, #6]
			disp_x = abs(disp_x);
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	bfb8      	it	lt
 8000222:	425b      	neglt	r3, r3
 8000224:	b2db      	uxtb	r3, r3
 8000226:	71fb      	strb	r3, [r7, #7]
			disp_y = abs(disp_y);
 8000228:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800022c:	2b00      	cmp	r3, #0
 800022e:	bfb8      	it	lt
 8000230:	425b      	neglt	r3, r3
 8000232:	b2db      	uxtb	r3, r3
 8000234:	71bb      	strb	r3, [r7, #6]

			if(disp_x < 8 && disp_y < 8){
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	2b07      	cmp	r3, #7
 800023c:	dc20      	bgt.n	8000280 <calculateCollisions+0xc4>
 800023e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000242:	2b07      	cmp	r3, #7
 8000244:	dc1c      	bgt.n	8000280 <calculateCollisions+0xc4>
				killEnemy(&enemyList[j]);
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	00db      	lsls	r3, r3, #3
 800024a:	4a17      	ldr	r2, [pc, #92]	@ (80002a8 <calculateCollisions+0xec>)
 800024c:	4413      	add	r3, r2
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffa8 	bl	80001a4 <killEnemy>
				Bullets[i].isActive = 0;
 8000254:	4a13      	ldr	r2, [pc, #76]	@ (80002a4 <calculateCollisions+0xe8>)
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	4413      	add	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	70da      	strb	r2, [r3, #3]
				ST7735_DrawPixel(Bullets[i].x , Bullets[i].y , 0x0000);
 8000260:	4a10      	ldr	r2, [pc, #64]	@ (80002a4 <calculateCollisions+0xe8>)
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000268:	4618      	mov	r0, r3
 800026a:	4a0e      	ldr	r2, [pc, #56]	@ (80002a4 <calculateCollisions+0xe8>)
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	4413      	add	r3, r2
 8000272:	785b      	ldrb	r3, [r3, #1]
 8000274:	2200      	movs	r2, #0
 8000276:	4619      	mov	r1, r3
 8000278:	f000 fe94 	bl	8000fa4 <ST7735_DrawPixel>
				break;
 800027c:	e006      	b.n	800028c <calculateCollisions+0xd0>
				continue;
 800027e:	bf00      	nop
		for(int j = 0 ; j <20 ; j++){
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	3301      	adds	r3, #1
 8000284:	60bb      	str	r3, [r7, #8]
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	2b13      	cmp	r3, #19
 800028a:	dda7      	ble.n	80001dc <calculateCollisions+0x20>
	for(int i = 0 ; i < MAXBULLETS ; i++){
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	3301      	adds	r3, #1
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	2b7f      	cmp	r3, #127	@ 0x7f
 8000296:	dd97      	ble.n	80001c8 <calculateCollisions+0xc>
 8000298:	e000      	b.n	800029c <calculateCollisions+0xe0>
			return;
 800029a:	bf00      	nop
			}
		}

	}
}
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	200004c8 	.word	0x200004c8
 80002a8:	20000000 	.word	0x20000000

080002ac <update_Bullets>:

void update_Bullets(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAXBULLETS ; i++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	e058      	b.n	800036a <update_Bullets+0xbe>
		if(!Bullets[i].isActive){
 80002b8:	4a72      	ldr	r2, [pc, #456]	@ (8000484 <update_Bullets+0x1d8>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	4413      	add	r3, r2
 80002c0:	78db      	ldrb	r3, [r3, #3]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d04d      	beq.n	8000362 <update_Bullets+0xb6>
			continue;
		}

		if(Bullets[i].y >= 128){
 80002c6:	4a6f      	ldr	r2, [pc, #444]	@ (8000484 <update_Bullets+0x1d8>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	4413      	add	r3, r2
 80002ce:	785b      	ldrb	r3, [r3, #1]
 80002d0:	b25b      	sxtb	r3, r3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	da13      	bge.n	80002fe <update_Bullets+0x52>
			Bullets[i].isActive = 0;
 80002d6:	4a6b      	ldr	r2, [pc, #428]	@ (8000484 <update_Bullets+0x1d8>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	4413      	add	r3, r2
 80002de:	2200      	movs	r2, #0
 80002e0:	70da      	strb	r2, [r3, #3]
			ST7735_DrawPixel(Bullets[i].x , Bullets[i].y , 0x0000);
 80002e2:	4a68      	ldr	r2, [pc, #416]	@ (8000484 <update_Bullets+0x1d8>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80002ea:	4618      	mov	r0, r3
 80002ec:	4a65      	ldr	r2, [pc, #404]	@ (8000484 <update_Bullets+0x1d8>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4413      	add	r3, r2
 80002f4:	785b      	ldrb	r3, [r3, #1]
 80002f6:	2200      	movs	r2, #0
 80002f8:	4619      	mov	r1, r3
 80002fa:	f000 fe53 	bl	8000fa4 <ST7735_DrawPixel>
		}

		ST7735_DrawPixel(Bullets[i].x , Bullets[i].y , 0x0000);
 80002fe:	4a61      	ldr	r2, [pc, #388]	@ (8000484 <update_Bullets+0x1d8>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000306:	4618      	mov	r0, r3
 8000308:	4a5e      	ldr	r2, [pc, #376]	@ (8000484 <update_Bullets+0x1d8>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	4413      	add	r3, r2
 8000310:	785b      	ldrb	r3, [r3, #1]
 8000312:	2200      	movs	r2, #0
 8000314:	4619      	mov	r1, r3
 8000316:	f000 fe45 	bl	8000fa4 <ST7735_DrawPixel>
		Bullets[i].y -= Bullets[i].speed;
 800031a:	4a5a      	ldr	r2, [pc, #360]	@ (8000484 <update_Bullets+0x1d8>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	4413      	add	r3, r2
 8000322:	785a      	ldrb	r2, [r3, #1]
 8000324:	4957      	ldr	r1, [pc, #348]	@ (8000484 <update_Bullets+0x1d8>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	440b      	add	r3, r1
 800032c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	1ad3      	subs	r3, r2, r3
 8000334:	b2d9      	uxtb	r1, r3
 8000336:	4a53      	ldr	r2, [pc, #332]	@ (8000484 <update_Bullets+0x1d8>)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	4413      	add	r3, r2
 800033e:	460a      	mov	r2, r1
 8000340:	705a      	strb	r2, [r3, #1]
		ST7735_DrawPixel(Bullets[i].x , Bullets[i].y , 0xFFFF);
 8000342:	4a50      	ldr	r2, [pc, #320]	@ (8000484 <update_Bullets+0x1d8>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800034a:	4618      	mov	r0, r3
 800034c:	4a4d      	ldr	r2, [pc, #308]	@ (8000484 <update_Bullets+0x1d8>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	4413      	add	r3, r2
 8000354:	785b      	ldrb	r3, [r3, #1]
 8000356:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800035a:	4619      	mov	r1, r3
 800035c:	f000 fe22 	bl	8000fa4 <ST7735_DrawPixel>
 8000360:	e000      	b.n	8000364 <update_Bullets+0xb8>
			continue;
 8000362:	bf00      	nop
	for(int i = 0 ; i < MAXBULLETS ; i++){
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3301      	adds	r3, #1
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2b7f      	cmp	r3, #127	@ 0x7f
 800036e:	dda3      	ble.n	80002b8 <update_Bullets+0xc>
	}

	for(int i = 0 ; i < MAXENEMYBULLETS ; i++){
 8000370:	2300      	movs	r3, #0
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	e07c      	b.n	8000470 <update_Bullets+0x1c4>
		if(!evilBullets[i].isActive){
 8000376:	4944      	ldr	r1, [pc, #272]	@ (8000488 <update_Bullets+0x1dc>)
 8000378:	683a      	ldr	r2, [r7, #0]
 800037a:	4613      	mov	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	440b      	add	r3, r1
 8000382:	3304      	adds	r3, #4
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d06e      	beq.n	8000468 <update_Bullets+0x1bc>
			continue;
		}
		if(evilBullets[i].y >= 128){
 800038a:	493f      	ldr	r1, [pc, #252]	@ (8000488 <update_Bullets+0x1dc>)
 800038c:	683a      	ldr	r2, [r7, #0]
 800038e:	4613      	mov	r3, r2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	4413      	add	r3, r2
 8000394:	440b      	add	r3, r1
 8000396:	3301      	adds	r3, #1
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	b25b      	sxtb	r3, r3
 800039c:	2b00      	cmp	r3, #0
 800039e:	da1c      	bge.n	80003da <update_Bullets+0x12e>
			evilBullets[i].isActive = 0;
 80003a0:	4939      	ldr	r1, [pc, #228]	@ (8000488 <update_Bullets+0x1dc>)
 80003a2:	683a      	ldr	r2, [r7, #0]
 80003a4:	4613      	mov	r3, r2
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	4413      	add	r3, r2
 80003aa:	440b      	add	r3, r1
 80003ac:	3304      	adds	r3, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
			ST7735_DrawPixel(evilBullets[i].x , evilBullets[i].y , 0x0000);
 80003b2:	4935      	ldr	r1, [pc, #212]	@ (8000488 <update_Bullets+0x1dc>)
 80003b4:	683a      	ldr	r2, [r7, #0]
 80003b6:	4613      	mov	r3, r2
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	4413      	add	r3, r2
 80003bc:	440b      	add	r3, r1
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	4618      	mov	r0, r3
 80003c2:	4931      	ldr	r1, [pc, #196]	@ (8000488 <update_Bullets+0x1dc>)
 80003c4:	683a      	ldr	r2, [r7, #0]
 80003c6:	4613      	mov	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	4413      	add	r3, r2
 80003cc:	440b      	add	r3, r1
 80003ce:	3301      	adds	r3, #1
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2200      	movs	r2, #0
 80003d4:	4619      	mov	r1, r3
 80003d6:	f000 fde5 	bl	8000fa4 <ST7735_DrawPixel>
		}

		ST7735_DrawPixel(evilBullets[i].x , evilBullets[i].y , 0x0000);
 80003da:	492b      	ldr	r1, [pc, #172]	@ (8000488 <update_Bullets+0x1dc>)
 80003dc:	683a      	ldr	r2, [r7, #0]
 80003de:	4613      	mov	r3, r2
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4413      	add	r3, r2
 80003e4:	440b      	add	r3, r1
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	4927      	ldr	r1, [pc, #156]	@ (8000488 <update_Bullets+0x1dc>)
 80003ec:	683a      	ldr	r2, [r7, #0]
 80003ee:	4613      	mov	r3, r2
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	4413      	add	r3, r2
 80003f4:	440b      	add	r3, r1
 80003f6:	3301      	adds	r3, #1
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2200      	movs	r2, #0
 80003fc:	4619      	mov	r1, r3
 80003fe:	f000 fdd1 	bl	8000fa4 <ST7735_DrawPixel>
		evilBullets[i].y -= evilBullets[i].dy;
 8000402:	4921      	ldr	r1, [pc, #132]	@ (8000488 <update_Bullets+0x1dc>)
 8000404:	683a      	ldr	r2, [r7, #0]
 8000406:	4613      	mov	r3, r2
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	4413      	add	r3, r2
 800040c:	440b      	add	r3, r1
 800040e:	3301      	adds	r3, #1
 8000410:	7819      	ldrb	r1, [r3, #0]
 8000412:	481d      	ldr	r0, [pc, #116]	@ (8000488 <update_Bullets+0x1dc>)
 8000414:	683a      	ldr	r2, [r7, #0]
 8000416:	4613      	mov	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4413      	add	r3, r2
 800041c:	4403      	add	r3, r0
 800041e:	3303      	adds	r3, #3
 8000420:	f993 3000 	ldrsb.w	r3, [r3]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	1acb      	subs	r3, r1, r3
 8000428:	b2d8      	uxtb	r0, r3
 800042a:	4917      	ldr	r1, [pc, #92]	@ (8000488 <update_Bullets+0x1dc>)
 800042c:	683a      	ldr	r2, [r7, #0]
 800042e:	4613      	mov	r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4413      	add	r3, r2
 8000434:	440b      	add	r3, r1
 8000436:	3301      	adds	r3, #1
 8000438:	4602      	mov	r2, r0
 800043a:	701a      	strb	r2, [r3, #0]
		ST7735_DrawPixel(evilBullets[i].x , evilBullets[i].y , 0xFFFF);
 800043c:	4912      	ldr	r1, [pc, #72]	@ (8000488 <update_Bullets+0x1dc>)
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	4613      	mov	r3, r2
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	4413      	add	r3, r2
 8000446:	440b      	add	r3, r1
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	490e      	ldr	r1, [pc, #56]	@ (8000488 <update_Bullets+0x1dc>)
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	4613      	mov	r3, r2
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	4413      	add	r3, r2
 8000456:	440b      	add	r3, r1
 8000458:	3301      	adds	r3, #1
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000460:	4619      	mov	r1, r3
 8000462:	f000 fd9f 	bl	8000fa4 <ST7735_DrawPixel>
 8000466:	e000      	b.n	800046a <update_Bullets+0x1be>
			continue;
 8000468:	bf00      	nop
	for(int i = 0 ; i < MAXENEMYBULLETS ; i++){
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	2b31      	cmp	r3, #49	@ 0x31
 8000474:	f77f af7f 	ble.w	8000376 <update_Bullets+0xca>

	}
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200004c8 	.word	0x200004c8
 8000488:	200006c8 	.word	0x200006c8

0800048c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0

		return;

	}*/

	for (int i = 0; i < MAXBULLETS; i++) {
 8000492:	2300      	movs	r3, #0
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	e028      	b.n	80004ea <EXTI2_IRQHandler+0x5e>
	            if (!Bullets[i].isActive) {
 8000498:	4a1b      	ldr	r2, [pc, #108]	@ (8000508 <EXTI2_IRQHandler+0x7c>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	78db      	ldrb	r3, [r3, #3]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d11e      	bne.n	80004e4 <EXTI2_IRQHandler+0x58>
	                Bullets[i].x = playerObj.x+5;
 80004a6:	4b19      	ldr	r3, [pc, #100]	@ (800050c <EXTI2_IRQHandler+0x80>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	3305      	adds	r3, #5
 80004ac:	b2d9      	uxtb	r1, r3
 80004ae:	4a16      	ldr	r2, [pc, #88]	@ (8000508 <EXTI2_IRQHandler+0x7c>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	                Bullets[i].y = playerObj.y+1;
 80004b6:	4b15      	ldr	r3, [pc, #84]	@ (800050c <EXTI2_IRQHandler+0x80>)
 80004b8:	785b      	ldrb	r3, [r3, #1]
 80004ba:	3301      	adds	r3, #1
 80004bc:	b2d9      	uxtb	r1, r3
 80004be:	4a12      	ldr	r2, [pc, #72]	@ (8000508 <EXTI2_IRQHandler+0x7c>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	4413      	add	r3, r2
 80004c6:	460a      	mov	r2, r1
 80004c8:	705a      	strb	r2, [r3, #1]
	                Bullets[i].speed = 4;
 80004ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000508 <EXTI2_IRQHandler+0x7c>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	4413      	add	r3, r2
 80004d2:	2204      	movs	r2, #4
 80004d4:	709a      	strb	r2, [r3, #2]
	                Bullets[i].isActive = 1;
 80004d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000508 <EXTI2_IRQHandler+0x7c>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	70da      	strb	r2, [r3, #3]
	                break;
 80004e2:	e005      	b.n	80004f0 <EXTI2_IRQHandler+0x64>
	for (int i = 0; i < MAXBULLETS; i++) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3301      	adds	r3, #1
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80004ee:	ddd3      	ble.n	8000498 <EXTI2_IRQHandler+0xc>
	            }
	}

	EXTI->PR |= EXTI_PR_PR3;
 80004f0:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <EXTI2_IRQHandler+0x84>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	4a06      	ldr	r2, [pc, #24]	@ (8000510 <EXTI2_IRQHandler+0x84>)
 80004f6:	f043 0308 	orr.w	r3, r3, #8
 80004fa:	6153      	str	r3, [r2, #20]

}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	200004c8 	.word	0x200004c8
 800050c:	200000d4 	.word	0x200000d4
 8000510:	40010400 	.word	0x40010400

08000514 <updateEnemyStates>:
//	ST7735_DrawImage(playerObj.x , playerObj.y , 9 , 9 , player_ship_flat);
//	EXTI->PR |= EXTI_PR_PR1;
//
//}

void updateEnemyStates(){
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 20 ; i++){
 800051a:	2300      	movs	r3, #0
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	e094      	b.n	800064a <updateEnemyStates+0x136>
		if(enemyList[i].isAlive == 0){
 8000520:	4a4e      	ldr	r2, [pc, #312]	@ (800065c <updateEnemyStates+0x148>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	4413      	add	r3, r2
 8000528:	789b      	ldrb	r3, [r3, #2]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d10d      	bne.n	800054a <updateEnemyStates+0x36>
			enemyList[i].ticksSinceLastChange++;
 800052e:	4a4b      	ldr	r2, [pc, #300]	@ (800065c <updateEnemyStates+0x148>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	4413      	add	r3, r2
 8000536:	79db      	ldrb	r3, [r3, #7]
 8000538:	3301      	adds	r3, #1
 800053a:	b2d9      	uxtb	r1, r3
 800053c:	4a47      	ldr	r2, [pc, #284]	@ (800065c <updateEnemyStates+0x148>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	4413      	add	r3, r2
 8000544:	460a      	mov	r2, r1
 8000546:	71da      	strb	r2, [r3, #7]
			continue;
 8000548:	e07c      	b.n	8000644 <updateEnemyStates+0x130>
		}else if(enemyList[i].isDying == 1){
 800054a:	4a44      	ldr	r2, [pc, #272]	@ (800065c <updateEnemyStates+0x148>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	4413      	add	r3, r2
 8000552:	78db      	ldrb	r3, [r3, #3]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d12b      	bne.n	80005b0 <updateEnemyStates+0x9c>
			enemyList[i].ticksSinceLastChange++;
 8000558:	4a40      	ldr	r2, [pc, #256]	@ (800065c <updateEnemyStates+0x148>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	4413      	add	r3, r2
 8000560:	79db      	ldrb	r3, [r3, #7]
 8000562:	3301      	adds	r3, #1
 8000564:	b2d9      	uxtb	r1, r3
 8000566:	4a3d      	ldr	r2, [pc, #244]	@ (800065c <updateEnemyStates+0x148>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	4413      	add	r3, r2
 800056e:	460a      	mov	r2, r1
 8000570:	71da      	strb	r2, [r3, #7]
			enemyList[i].isDying++ ;
 8000572:	4a3a      	ldr	r2, [pc, #232]	@ (800065c <updateEnemyStates+0x148>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	4413      	add	r3, r2
 800057a:	78db      	ldrb	r3, [r3, #3]
 800057c:	3301      	adds	r3, #1
 800057e:	b2d9      	uxtb	r1, r3
 8000580:	4a36      	ldr	r2, [pc, #216]	@ (800065c <updateEnemyStates+0x148>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	4413      	add	r3, r2
 8000588:	460a      	mov	r2, r1
 800058a:	70da      	strb	r2, [r3, #3]
			ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_dying1);
 800058c:	4a33      	ldr	r2, [pc, #204]	@ (800065c <updateEnemyStates+0x148>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000594:	4618      	mov	r0, r3
 8000596:	4a31      	ldr	r2, [pc, #196]	@ (800065c <updateEnemyStates+0x148>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	4413      	add	r3, r2
 800059e:	785b      	ldrb	r3, [r3, #1]
 80005a0:	4619      	mov	r1, r3
 80005a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000660 <updateEnemyStates+0x14c>)
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2308      	movs	r3, #8
 80005a8:	2208      	movs	r2, #8
 80005aa:	f000 fdc6 	bl	800113a <ST7735_DrawImage>
 80005ae:	e049      	b.n	8000644 <updateEnemyStates+0x130>
		}else if(enemyList[i].isDying == 2){
 80005b0:	4a2a      	ldr	r2, [pc, #168]	@ (800065c <updateEnemyStates+0x148>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	4413      	add	r3, r2
 80005b8:	78db      	ldrb	r3, [r3, #3]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d11e      	bne.n	80005fc <updateEnemyStates+0xe8>
			enemyList[i].isDying++ ;
 80005be:	4a27      	ldr	r2, [pc, #156]	@ (800065c <updateEnemyStates+0x148>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	4413      	add	r3, r2
 80005c6:	78db      	ldrb	r3, [r3, #3]
 80005c8:	3301      	adds	r3, #1
 80005ca:	b2d9      	uxtb	r1, r3
 80005cc:	4a23      	ldr	r2, [pc, #140]	@ (800065c <updateEnemyStates+0x148>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	4413      	add	r3, r2
 80005d4:	460a      	mov	r2, r1
 80005d6:	70da      	strb	r2, [r3, #3]
			ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_dying2);
 80005d8:	4a20      	ldr	r2, [pc, #128]	@ (800065c <updateEnemyStates+0x148>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80005e0:	4618      	mov	r0, r3
 80005e2:	4a1e      	ldr	r2, [pc, #120]	@ (800065c <updateEnemyStates+0x148>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	4413      	add	r3, r2
 80005ea:	785b      	ldrb	r3, [r3, #1]
 80005ec:	4619      	mov	r1, r3
 80005ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <updateEnemyStates+0x150>)
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2308      	movs	r3, #8
 80005f4:	2208      	movs	r2, #8
 80005f6:	f000 fda0 	bl	800113a <ST7735_DrawImage>
 80005fa:	e023      	b.n	8000644 <updateEnemyStates+0x130>
		}else if(enemyList[i].isDying == 3){
 80005fc:	4a17      	ldr	r2, [pc, #92]	@ (800065c <updateEnemyStates+0x148>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	4413      	add	r3, r2
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d11c      	bne.n	8000644 <updateEnemyStates+0x130>
			enemyList[i].isAlive = 0;
 800060a:	4a14      	ldr	r2, [pc, #80]	@ (800065c <updateEnemyStates+0x148>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	4413      	add	r3, r2
 8000612:	2200      	movs	r2, #0
 8000614:	709a      	strb	r2, [r3, #2]
			enemyList[i].isDying = 0;
 8000616:	4a11      	ldr	r2, [pc, #68]	@ (800065c <updateEnemyStates+0x148>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4413      	add	r3, r2
 800061e:	2200      	movs	r2, #0
 8000620:	70da      	strb	r2, [r3, #3]
			ST7735_FillRectangleFast(enemyList[i].x , enemyList[i].y , 8 , 8 , 0x0000);
 8000622:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <updateEnemyStates+0x148>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800062a:	4618      	mov	r0, r3
 800062c:	4a0b      	ldr	r2, [pc, #44]	@ (800065c <updateEnemyStates+0x148>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	4413      	add	r3, r2
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	4619      	mov	r1, r3
 8000638:	2300      	movs	r3, #0
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2308      	movs	r3, #8
 800063e:	2208      	movs	r2, #8
 8000640:	f000 fce4 	bl	800100c <ST7735_FillRectangleFast>
	for(int i = 0 ; i < 20 ; i++){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b13      	cmp	r3, #19
 800064e:	f77f af67 	ble.w	8000520 <updateEnemyStates+0xc>
		}
	}
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	08003388 	.word	0x08003388
 8000664:	08003408 	.word	0x08003408

08000668 <updatePlayerSpeed>:

void updatePlayerSpeed(){
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
	int8_t speed = GPIOA->IDR;
 800066e:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <updatePlayerSpeed+0xc0>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	71fb      	strb	r3, [r7, #7]
	if((speed & 0x1B )== 0){
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 031b 	and.w	r3, r3, #27
 800067a:	2b00      	cmp	r3, #0
 800067c:	d106      	bne.n	800068c <updatePlayerSpeed+0x24>
		playerObj.dx = 0;
 800067e:	4b2b      	ldr	r3, [pc, #172]	@ (800072c <updatePlayerSpeed+0xc4>)
 8000680:	2200      	movs	r2, #0
 8000682:	709a      	strb	r2, [r3, #2]
		playerObj.dy = 0;
 8000684:	4b29      	ldr	r3, [pc, #164]	@ (800072c <updatePlayerSpeed+0xc4>)
 8000686:	2200      	movs	r2, #0
 8000688:	70da      	strb	r2, [r3, #3]
		return;
 800068a:	e049      	b.n	8000720 <updatePlayerSpeed+0xb8>
	}

	if(playerObj.dx == 0x3) speed &= ~(0x09);
 800068c:	4b27      	ldr	r3, [pc, #156]	@ (800072c <updatePlayerSpeed+0xc4>)
 800068e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d103      	bne.n	800069e <updatePlayerSpeed+0x36>
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f023 0309 	bic.w	r3, r3, #9
 800069c:	71fb      	strb	r3, [r7, #7]
	if(playerObj.dy == 0x3) speed &= ~(0x11);
 800069e:	4b23      	ldr	r3, [pc, #140]	@ (800072c <updatePlayerSpeed+0xc4>)
 80006a0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d103      	bne.n	80006b0 <updatePlayerSpeed+0x48>
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f023 0311 	bic.w	r3, r3, #17
 80006ae:	71fb      	strb	r3, [r7, #7]


	if(speed & DOWN_Pin) playerObj.dy++;
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d008      	beq.n	80006cc <updatePlayerSpeed+0x64>
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <updatePlayerSpeed+0xc4>)
 80006bc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	3301      	adds	r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	b25a      	sxtb	r2, r3
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <updatePlayerSpeed+0xc4>)
 80006ca:	70da      	strb	r2, [r3, #3]
	if(speed & UP_Pin) playerObj.dy--;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 0310 	and.w	r3, r3, #16
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d008      	beq.n	80006e8 <updatePlayerSpeed+0x80>
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <updatePlayerSpeed+0xc4>)
 80006d8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	3b01      	subs	r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	b25a      	sxtb	r2, r3
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <updatePlayerSpeed+0xc4>)
 80006e6:	70da      	strb	r2, [r3, #3]
	if(speed & LEFT_Pin) playerObj.dx--;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d008      	beq.n	8000704 <updatePlayerSpeed+0x9c>
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <updatePlayerSpeed+0xc4>)
 80006f4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	3b01      	subs	r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	b25a      	sxtb	r2, r3
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <updatePlayerSpeed+0xc4>)
 8000702:	709a      	strb	r2, [r3, #2]
	if(speed & RIGHT_Pin) playerObj.dx++;
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	2b00      	cmp	r3, #0
 800070c:	d008      	beq.n	8000720 <updatePlayerSpeed+0xb8>
 800070e:	4b07      	ldr	r3, [pc, #28]	@ (800072c <updatePlayerSpeed+0xc4>)
 8000710:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	3301      	adds	r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	b25a      	sxtb	r2, r3
 800071c:	4b03      	ldr	r3, [pc, #12]	@ (800072c <updatePlayerSpeed+0xc4>)
 800071e:	709a      	strb	r2, [r3, #2]
}
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	40010800 	.word	0x40010800
 800072c:	200000d4 	.word	0x200000d4

08000730 <updatePlayerPosition>:

void updatePlayerPosition(){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af02      	add	r7, sp, #8
	ST7735_FillRectangleFast(playerObj.x , playerObj.y , 12 , 11 , 0x0000);
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <updatePlayerPosition+0x64>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <updatePlayerPosition+0x64>)
 800073e:	785b      	ldrb	r3, [r3, #1]
 8000740:	4619      	mov	r1, r3
 8000742:	2300      	movs	r3, #0
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	230b      	movs	r3, #11
 8000748:	220c      	movs	r2, #12
 800074a:	f000 fc5f 	bl	800100c <ST7735_FillRectangleFast>
	playerObj.x += playerObj.dx ;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <updatePlayerPosition+0x64>)
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <updatePlayerPosition+0x64>)
 8000754:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4413      	add	r3, r2
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <updatePlayerPosition+0x64>)
 8000760:	701a      	strb	r2, [r3, #0]
	playerObj.y += playerObj.dy ;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <updatePlayerPosition+0x64>)
 8000764:	785a      	ldrb	r2, [r3, #1]
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <updatePlayerPosition+0x64>)
 8000768:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4413      	add	r3, r2
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <updatePlayerPosition+0x64>)
 8000774:	705a      	strb	r2, [r3, #1]

	ST7735_DrawImage(playerObj.x , playerObj.y , 12 , 11 , player_ship_flat);
 8000776:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <updatePlayerPosition+0x64>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <updatePlayerPosition+0x64>)
 800077e:	785b      	ldrb	r3, [r3, #1]
 8000780:	4619      	mov	r1, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <updatePlayerPosition+0x68>)
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	230b      	movs	r3, #11
 8000788:	220c      	movs	r2, #12
 800078a:	f000 fcd6 	bl	800113a <ST7735_DrawImage>
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000d4 	.word	0x200000d4
 8000798:	08003180 	.word	0x08003180

0800079c <createEnemyBullets>:
  */


uint8_t tickSpeed = 50;

void createEnemyBullets(uint8_t patternIteration){
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]

	for(int k = 0; k < 5 ; k++){
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e057      	b.n	800085c <createEnemyBullets+0xc0>
		for (int i = 0; i < MAXENEMYBULLETS; i++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	e04e      	b.n	8000850 <createEnemyBullets+0xb4>
		            if (!(evilBullets[i].isActive)) {
 80007b2:	492f      	ldr	r1, [pc, #188]	@ (8000870 <createEnemyBullets+0xd4>)
 80007b4:	68ba      	ldr	r2, [r7, #8]
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	440b      	add	r3, r1
 80007be:	3304      	adds	r3, #4
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d141      	bne.n	800084a <createEnemyBullets+0xae>
		                evilBullets[i].x = enemyList[attackPattern[patternIteration][k]].x+4;
 80007c6:	79fa      	ldrb	r2, [r7, #7]
 80007c8:	492a      	ldr	r1, [pc, #168]	@ (8000874 <createEnemyBullets+0xd8>)
 80007ca:	4613      	mov	r3, r2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	18ca      	adds	r2, r1, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	4413      	add	r3, r2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <createEnemyBullets+0xdc>)
 80007dc:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 80007e0:	3304      	adds	r3, #4
 80007e2:	b2d8      	uxtb	r0, r3
 80007e4:	4922      	ldr	r1, [pc, #136]	@ (8000870 <createEnemyBullets+0xd4>)
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	440b      	add	r3, r1
 80007f0:	4602      	mov	r2, r0
 80007f2:	701a      	strb	r2, [r3, #0]
		                evilBullets[i].y = enemyList[attackPattern[patternIteration][k]].y+9;
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	491f      	ldr	r1, [pc, #124]	@ (8000874 <createEnemyBullets+0xd8>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	18ca      	adds	r2, r1, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4a1c      	ldr	r2, [pc, #112]	@ (8000878 <createEnemyBullets+0xdc>)
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	4413      	add	r3, r2
 800080c:	785b      	ldrb	r3, [r3, #1]
 800080e:	3309      	adds	r3, #9
 8000810:	b2d8      	uxtb	r0, r3
 8000812:	4917      	ldr	r1, [pc, #92]	@ (8000870 <createEnemyBullets+0xd4>)
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	440b      	add	r3, r1
 800081e:	3301      	adds	r3, #1
 8000820:	4602      	mov	r2, r0
 8000822:	701a      	strb	r2, [r3, #0]
		                evilBullets[i].dy = -3;
 8000824:	4912      	ldr	r1, [pc, #72]	@ (8000870 <createEnemyBullets+0xd4>)
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	4613      	mov	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4413      	add	r3, r2
 800082e:	440b      	add	r3, r1
 8000830:	3303      	adds	r3, #3
 8000832:	22fd      	movs	r2, #253	@ 0xfd
 8000834:	701a      	strb	r2, [r3, #0]
		                evilBullets[i].isActive = 1;
 8000836:	490e      	ldr	r1, [pc, #56]	@ (8000870 <createEnemyBullets+0xd4>)
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	440b      	add	r3, r1
 8000842:	3304      	adds	r3, #4
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
		                break;
 8000848:	e005      	b.n	8000856 <createEnemyBullets+0xba>
		for (int i = 0; i < MAXENEMYBULLETS; i++) {
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	3301      	adds	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b31      	cmp	r3, #49	@ 0x31
 8000854:	ddad      	ble.n	80007b2 <createEnemyBullets+0x16>
	for(int k = 0; k < 5 ; k++){
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2b04      	cmp	r3, #4
 8000860:	dda4      	ble.n	80007ac <createEnemyBullets+0x10>
		            }
		}
	}

}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	200006c8 	.word	0x200006c8
 8000874:	200000a0 	.word	0x200000a0
 8000878:	20000000 	.word	0x20000000

0800087c <updateEnemyAnimations>:


void updateEnemyAnimations(){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af02      	add	r7, sp, #8
	  for(int i = 0 ; i < 20 ; i++){
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	e06a      	b.n	800095e <updateEnemyAnimations+0xe2>
		  if(enemyList[i].isAlive == 0 || enemyList[i].isDying == 1){
 8000888:	4a39      	ldr	r2, [pc, #228]	@ (8000970 <updateEnemyAnimations+0xf4>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4413      	add	r3, r2
 8000890:	789b      	ldrb	r3, [r3, #2]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d05f      	beq.n	8000956 <updateEnemyAnimations+0xda>
 8000896:	4a36      	ldr	r2, [pc, #216]	@ (8000970 <updateEnemyAnimations+0xf4>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4413      	add	r3, r2
 800089e:	78db      	ldrb	r3, [r3, #3]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d058      	beq.n	8000956 <updateEnemyAnimations+0xda>
			  continue;
		  }

		  if(enemyList[i].ticksSinceLastChange == enemyList[i].ticksUntilSpriteChange){
 80008a4:	4a32      	ldr	r2, [pc, #200]	@ (8000970 <updateEnemyAnimations+0xf4>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	4413      	add	r3, r2
 80008ac:	79da      	ldrb	r2, [r3, #7]
 80008ae:	4930      	ldr	r1, [pc, #192]	@ (8000970 <updateEnemyAnimations+0xf4>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	440b      	add	r3, r1
 80008b6:	799b      	ldrb	r3, [r3, #6]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d13e      	bne.n	800093a <updateEnemyAnimations+0xbe>
			  enemyList[i].sprite ^= 1;
 80008bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000970 <updateEnemyAnimations+0xf4>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	4413      	add	r3, r2
 80008c4:	795b      	ldrb	r3, [r3, #5]
 80008c6:	f083 0301 	eor.w	r3, r3, #1
 80008ca:	b2d9      	uxtb	r1, r3
 80008cc:	4a28      	ldr	r2, [pc, #160]	@ (8000970 <updateEnemyAnimations+0xf4>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	4413      	add	r3, r2
 80008d4:	460a      	mov	r2, r1
 80008d6:	715a      	strb	r2, [r3, #5]
			  if(!enemyList[i].sprite){
 80008d8:	4a25      	ldr	r2, [pc, #148]	@ (8000970 <updateEnemyAnimations+0xf4>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	4413      	add	r3, r2
 80008e0:	795b      	ldrb	r3, [r3, #5]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d111      	bne.n	800090a <updateEnemyAnimations+0x8e>
				  ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_flat1);
 80008e6:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <updateEnemyAnimations+0xf4>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80008ee:	4618      	mov	r0, r3
 80008f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000970 <updateEnemyAnimations+0xf4>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	4413      	add	r3, r2
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	4619      	mov	r1, r3
 80008fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <updateEnemyAnimations+0xf8>)
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2308      	movs	r3, #8
 8000902:	2208      	movs	r2, #8
 8000904:	f000 fc19 	bl	800113a <ST7735_DrawImage>
 8000908:	e010      	b.n	800092c <updateEnemyAnimations+0xb0>
			  }else{
				  ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_flat2);
 800090a:	4a19      	ldr	r2, [pc, #100]	@ (8000970 <updateEnemyAnimations+0xf4>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000912:	4618      	mov	r0, r3
 8000914:	4a16      	ldr	r2, [pc, #88]	@ (8000970 <updateEnemyAnimations+0xf4>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	4413      	add	r3, r2
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	4619      	mov	r1, r3
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <updateEnemyAnimations+0xfc>)
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2308      	movs	r3, #8
 8000926:	2208      	movs	r2, #8
 8000928:	f000 fc07 	bl	800113a <ST7735_DrawImage>
			  }

			  enemyList[i].ticksSinceLastChange = 0;
 800092c:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <updateEnemyAnimations+0xf4>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	4413      	add	r3, r2
 8000934:	2200      	movs	r2, #0
 8000936:	71da      	strb	r2, [r3, #7]
 8000938:	e00e      	b.n	8000958 <updateEnemyAnimations+0xdc>
		  }else{
			  enemyList[i].ticksSinceLastChange++;
 800093a:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <updateEnemyAnimations+0xf4>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	4413      	add	r3, r2
 8000942:	79db      	ldrb	r3, [r3, #7]
 8000944:	3301      	adds	r3, #1
 8000946:	b2d9      	uxtb	r1, r3
 8000948:	4a09      	ldr	r2, [pc, #36]	@ (8000970 <updateEnemyAnimations+0xf4>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	4413      	add	r3, r2
 8000950:	460a      	mov	r2, r1
 8000952:	71da      	strb	r2, [r3, #7]
 8000954:	e000      	b.n	8000958 <updateEnemyAnimations+0xdc>
			  continue;
 8000956:	bf00      	nop
	  for(int i = 0 ; i < 20 ; i++){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3301      	adds	r3, #1
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b13      	cmp	r3, #19
 8000962:	dd91      	ble.n	8000888 <updateEnemyAnimations+0xc>
		  }

	  }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000
 8000974:	08003288 	.word	0x08003288
 8000978:	08003308 	.word	0x08003308

0800097c <main>:
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f000 fd79 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f877 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f000 f94d 	bl	8000c28 <MX_GPIO_Init>
  MX_DMA_Init();
 800098e:	f000 f92d 	bl	8000bec <MX_DMA_Init>
  MX_SPI2_Init();
 8000992:	f000 f8d1 	bl	8000b38 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 8000996:	f000 f907 	bl	8000ba8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 800099a:	f000 fae9 	bl	8000f70 <ST7735_Init>
  ST7735_FillScreenFast(0x0000);
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 fbba 	bl	8001118 <ST7735_FillScreenFast>

  init_Bullets();
 80009a4:	f7ff fbd2 	bl	800014c <init_Bullets>

  for(int i = 0 ; i <20 ; i++){
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	e013      	b.n	80009d6 <main+0x5a>
	  ST7735_DrawImage(enemyList[i].x , enemyList[i].y , 8 , 8 , enemy_ship_flat1 );
 80009ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000a60 <main+0xe4>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80009b6:	4618      	mov	r0, r3
 80009b8:	4a29      	ldr	r2, [pc, #164]	@ (8000a60 <main+0xe4>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	4413      	add	r3, r2
 80009c0:	785b      	ldrb	r3, [r3, #1]
 80009c2:	4619      	mov	r1, r3
 80009c4:	4b27      	ldr	r3, [pc, #156]	@ (8000a64 <main+0xe8>)
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2308      	movs	r3, #8
 80009ca:	2208      	movs	r2, #8
 80009cc:	f000 fbb5 	bl	800113a <ST7735_DrawImage>
  for(int i = 0 ; i <20 ; i++){
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3301      	adds	r3, #1
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b13      	cmp	r3, #19
 80009da:	dde8      	ble.n	80009ae <main+0x32>
  }

  ST7735_DrawImage(playerObj.x , playerObj.y , 12 , 11 , player_ship_flat);
 80009dc:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <main+0xec>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <main+0xec>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <main+0xf0>)
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	230b      	movs	r3, #11
 80009ee:	220c      	movs	r2, #12
 80009f0:	f000 fba3 	bl	800113a <ST7735_DrawImage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t timeSinceLastAttack = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	70fb      	strb	r3, [r7, #3]
  uint8_t currentPatternIteration = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	70bb      	strb	r3, [r7, #2]
  while (1)
  {
	  if(timeSinceLastAttack%10 == 0){
 80009fc:	78fa      	ldrb	r2, [r7, #3]
 80009fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <main+0xf4>)
 8000a00:	fba3 1302 	umull	r1, r3, r3, r2
 8000a04:	08d9      	lsrs	r1, r3, #3
 8000a06:	460b      	mov	r3, r1
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d10e      	bne.n	8000a34 <main+0xb8>
		  createEnemyBullets(currentPatternIteration);
 8000a16:	78bb      	ldrb	r3, [r7, #2]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff febf 	bl	800079c <createEnemyBullets>
		  if(currentPatternIteration == 10){
 8000a1e:	78bb      	ldrb	r3, [r7, #2]
 8000a20:	2b0a      	cmp	r3, #10
 8000a22:	d101      	bne.n	8000a28 <main+0xac>
			  currentPatternIteration = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	70bb      	strb	r3, [r7, #2]
		  }
		  currentPatternIteration++;
 8000a28:	78bb      	ldrb	r3, [r7, #2]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	70bb      	strb	r3, [r7, #2]
		  timeSinceLastAttack = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	70fb      	strb	r3, [r7, #3]
 8000a32:	e002      	b.n	8000a3a <main+0xbe>
	  }else{
		  timeSinceLastAttack++;
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	3301      	adds	r3, #1
 8000a38:	70fb      	strb	r3, [r7, #3]
	  }
	  updatePlayerSpeed();
 8000a3a:	f7ff fe15 	bl	8000668 <updatePlayerSpeed>
	  updatePlayerPosition();
 8000a3e:	f7ff fe77 	bl	8000730 <updatePlayerPosition>
	  update_Bullets();
 8000a42:	f7ff fc33 	bl	80002ac <update_Bullets>
	  calculateCollisions();
 8000a46:	f7ff fbb9 	bl	80001bc <calculateCollisions>
	  updateEnemyStates();
 8000a4a:	f7ff fd63 	bl	8000514 <updateEnemyStates>
	  updateEnemyAnimations();
 8000a4e:	f7ff ff15 	bl	800087c <updateEnemyAnimations>
	  HAL_Delay(tickSpeed);
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <main+0xf8>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fd70 	bl	800153c <HAL_Delay>
	  if(timeSinceLastAttack%10 == 0){
 8000a5c:	e7ce      	b.n	80009fc <main+0x80>
 8000a5e:	bf00      	nop
 8000a60:	20000000 	.word	0x20000000
 8000a64:	08003288 	.word	0x08003288
 8000a68:	200000d4 	.word	0x200000d4
 8000a6c:	08003180 	.word	0x08003180
 8000a70:	cccccccd 	.word	0xcccccccd
 8000a74:	200000da 	.word	0x200000da

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	@ 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a82:	2228      	movs	r2, #40	@ 0x28
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 fae2 	bl	8003050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ac4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fa58 	bl	8001f84 <HAL_RCC_OscConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ada:	f000 f959 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2102      	movs	r1, #2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fcc4 	bl	8002488 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b06:	f000 f943 	bl	8000d90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fe4b 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b20:	f000 f936 	bl	8000d90 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f001 fd96 	bl	800265c <HAL_RCC_MCOConfig>
}
 8000b30:	bf00      	nop
 8000b32:	3750      	adds	r7, #80	@ 0x50
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ba4 <MX_SPI2_Init+0x6c>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b50:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b6a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b86:	220a      	movs	r2, #10
 8000b88:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_SPI2_Init+0x68>)
 8000b8c:	f001 fec6 	bl	800291c <HAL_SPI_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000b96:	f000 f8fb 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000154 	.word	0x20000154
 8000ba4:	40003800 	.word	0x40003800

08000ba8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000bac:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <MX_USB_PCD_Init+0x3c>)
 8000bae:	4a0e      	ldr	r2, [pc, #56]	@ (8000be8 <MX_USB_PCD_Init+0x40>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <MX_USB_PCD_Init+0x3c>)
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <MX_USB_PCD_Init+0x3c>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <MX_USB_PCD_Init+0x3c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <MX_USB_PCD_Init+0x3c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <MX_USB_PCD_Init+0x3c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <MX_USB_PCD_Init+0x3c>)
 8000bd2:	f001 f8e1 	bl	8001d98 <HAL_PCD_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000bdc:	f000 f8d8 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200001f0 	.word	0x200001f0
 8000be8:	40005c00 	.word	0x40005c00

08000bec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_DMA_Init+0x38>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <MX_DMA_Init+0x38>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_DMA_Init+0x38>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 fd8f 	bl	8001732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c14:	200f      	movs	r0, #15
 8000c16:	f000 fda8 	bl	800176a <HAL_NVIC_EnableIRQ>

}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a4e      	ldr	r2, [pc, #312]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b4c      	ldr	r3, [pc, #304]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c54:	4b49      	ldr	r3, [pc, #292]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a48      	ldr	r2, [pc, #288]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c5a:	f043 0320 	orr.w	r3, r3, #32
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b46      	ldr	r3, [pc, #280]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0320 	and.w	r3, r3, #32
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b43      	ldr	r3, [pc, #268]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a42      	ldr	r2, [pc, #264]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b40      	ldr	r3, [pc, #256]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b3d      	ldr	r3, [pc, #244]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a3c      	ldr	r2, [pc, #240]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b3a      	ldr	r3, [pc, #232]	@ (8000d7c <MX_GPIO_Init+0x154>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ca2:	4837      	ldr	r0, [pc, #220]	@ (8000d80 <MX_GPIO_Init+0x158>)
 8000ca4:	f001 f860 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_BL_Pin|ST7735_DC_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000cae:	4835      	ldr	r0, [pc, #212]	@ (8000d84 <MX_GPIO_Init+0x15c>)
 8000cb0:	f001 f85a 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000cba:	4833      	ldr	r0, [pc, #204]	@ (8000d88 <MX_GPIO_Init+0x160>)
 8000cbc:	f001 f854 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4829      	ldr	r0, [pc, #164]	@ (8000d80 <MX_GPIO_Init+0x158>)
 8000cda:	f000 fec1 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_Pin RIGHT_Pin LEFT_Pin UP_Pin */
  GPIO_InitStruct.Pin = DOWN_Pin|RIGHT_Pin|LEFT_Pin|UP_Pin;
 8000cde:	231b      	movs	r3, #27
 8000ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4825      	ldr	r0, [pc, #148]	@ (8000d88 <MX_GPIO_Init+0x160>)
 8000cf2:	f000 feb5 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfa:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <MX_GPIO_Init+0x164>)
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4619      	mov	r1, r3
 8000d08:	481f      	ldr	r0, [pc, #124]	@ (8000d88 <MX_GPIO_Init+0x160>)
 8000d0a:	f000 fea9 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_BL_Pin ST7735_DC_Pin */
  GPIO_InitStruct.Pin = ST7735_BL_Pin|ST7735_DC_Pin;
 8000d0e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4619      	mov	r1, r3
 8000d26:	4817      	ldr	r0, [pc, #92]	@ (8000d84 <MX_GPIO_Init+0x15c>)
 8000d28:	f000 fe9a 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4811      	ldr	r0, [pc, #68]	@ (8000d88 <MX_GPIO_Init+0x160>)
 8000d42:	f000 fe8d 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin|ST7735_RES_Pin;
 8000d46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480a      	ldr	r0, [pc, #40]	@ (8000d88 <MX_GPIO_Init+0x160>)
 8000d60:	f000 fe7e 	bl	8001a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2008      	movs	r0, #8
 8000d6a:	f000 fce2 	bl	8001732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d6e:	2008      	movs	r0, #8
 8000d70:	f000 fcfb 	bl	800176a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40011000 	.word	0x40011000
 8000d84:	40010c00 	.word	0x40010c00
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	10110000 	.word	0x10110000

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <Error_Handler+0x8>

08000d9c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000da6:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <ST7735_Select+0x14>)
 8000da8:	f000 ffde 	bl	8001d68 <HAL_GPIO_WritePin>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40010800 	.word	0x40010800

08000db4 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dbe:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <ST7735_Unselect+0x14>)
 8000dc0:	f000 ffd2 	bl	8001d68 <HAL_GPIO_WritePin>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010800 	.word	0x40010800

08000dcc <ST7735_Reset>:

static void ST7735_Reset() {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dd6:	4807      	ldr	r0, [pc, #28]	@ (8000df4 <ST7735_Reset+0x28>)
 8000dd8:	f000 ffc6 	bl	8001d68 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000ddc:	2005      	movs	r0, #5
 8000dde:	f000 fbad 	bl	800153c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <ST7735_Reset+0x28>)
 8000dea:	f000 ffbd 	bl	8001d68 <HAL_GPIO_WritePin>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010800 	.word	0x40010800

08000df8 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e08:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <ST7735_WriteCommand+0x2c>)
 8000e0a:	f000 ffad 	bl	8001d68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000e0e:	1df9      	adds	r1, r7, #7
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e14:	2201      	movs	r2, #1
 8000e16:	4804      	ldr	r0, [pc, #16]	@ (8000e28 <ST7735_WriteCommand+0x30>)
 8000e18:	f001 fe04 	bl	8002a24 <HAL_SPI_Transmit>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	20000154 	.word	0x20000154

08000e2c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3c:	4807      	ldr	r0, [pc, #28]	@ (8000e5c <ST7735_WriteData+0x30>)
 8000e3e:	f000 ff93 	bl	8001d68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <ST7735_WriteData+0x34>)
 8000e4e:	f001 fde9 	bl	8002a24 <HAL_SPI_Transmit>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	20000154 	.word	0x20000154

08000e64 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000e76:	e034      	b.n	8000ee2 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000e82:	7afb      	ldrb	r3, [r7, #11]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ffb7 	bl	8000df8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000e94:	7abb      	ldrb	r3, [r7, #10]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000e9e:	7abb      	ldrb	r3, [r7, #10]
 8000ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ea4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000ea6:	7abb      	ldrb	r3, [r7, #10]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d008      	beq.n	8000ebe <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000eac:	7abb      	ldrb	r3, [r7, #10]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ffbb 	bl	8000e2c <ST7735_WriteData>
            addr += numArgs;
 8000eb6:	7abb      	ldrb	r3, [r7, #10]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000ebe:	89bb      	ldrh	r3, [r7, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00e      	beq.n	8000ee2 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000ece:	89bb      	ldrh	r3, [r7, #12]
 8000ed0:	2bff      	cmp	r3, #255	@ 0xff
 8000ed2:	d102      	bne.n	8000eda <ST7735_ExecuteCommandList+0x76>
 8000ed4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ed8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000eda:	89bb      	ldrh	r3, [r7, #12]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fb2d 	bl	800153c <HAL_Delay>
    while(numCommands--) {
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	1e5a      	subs	r2, r3, #1
 8000ee6:	73fa      	strb	r2, [r7, #15]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1c5      	bne.n	8000e78 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000ef6:	b590      	push	{r4, r7, lr}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4604      	mov	r4, r0
 8000efe:	4608      	mov	r0, r1
 8000f00:	4611      	mov	r1, r2
 8000f02:	461a      	mov	r2, r3
 8000f04:	4623      	mov	r3, r4
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71bb      	strb	r3, [r7, #6]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	717b      	strb	r3, [r7, #5]
 8000f10:	4613      	mov	r3, r2
 8000f12:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000f14:	202a      	movs	r0, #42	@ 0x2a
 8000f16:	f7ff ff6f 	bl	8000df8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	733b      	strb	r3, [r7, #12]
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	3302      	adds	r3, #2
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	737b      	strb	r3, [r7, #13]
 8000f26:	2300      	movs	r3, #0
 8000f28:	73bb      	strb	r3, [r7, #14]
 8000f2a:	797b      	ldrb	r3, [r7, #5]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	2104      	movs	r1, #4
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff77 	bl	8000e2c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000f3e:	202b      	movs	r0, #43	@ 0x2b
 8000f40:	f7ff ff5a 	bl	8000df8 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	3303      	adds	r3, #3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000f4c:	793b      	ldrb	r3, [r7, #4]
 8000f4e:	3303      	adds	r3, #3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2104      	movs	r1, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff66 	bl	8000e2c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000f60:	202c      	movs	r0, #44	@ 0x2c
 8000f62:	f7ff ff49 	bl	8000df8 <ST7735_WriteCommand>
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd90      	pop	{r4, r7, pc}
	...

08000f70 <ST7735_Init>:

void ST7735_Init() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000f74:	f7ff ff12 	bl	8000d9c <ST7735_Select>
    ST7735_Reset();
 8000f78:	f7ff ff28 	bl	8000dcc <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000f7c:	4806      	ldr	r0, [pc, #24]	@ (8000f98 <ST7735_Init+0x28>)
 8000f7e:	f7ff ff71 	bl	8000e64 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000f82:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <ST7735_Init+0x2c>)
 8000f84:	f7ff ff6e 	bl	8000e64 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <ST7735_Init+0x30>)
 8000f8a:	f7ff ff6b 	bl	8000e64 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000f8e:	f7ff ff11 	bl	8000db4 <ST7735_Unselect>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	08003488 	.word	0x08003488
 8000f9c:	080034c4 	.word	0x080034c4
 8000fa0:	080034d4 	.word	0x080034d4

08000fa4 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	80bb      	strh	r3, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fba:	d823      	bhi.n	8001004 <ST7735_DrawPixel+0x60>
 8000fbc:	88bb      	ldrh	r3, [r7, #4]
 8000fbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fc0:	d820      	bhi.n	8001004 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8000fc2:	f7ff feeb 	bl	8000d9c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2d8      	uxtb	r0, r3
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	b2d9      	uxtb	r1, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f7ff ff8a 	bl	8000ef6 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	733b      	strb	r3, [r7, #12]
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff17 	bl	8000e2c <ST7735_WriteData>

    ST7735_Unselect();
 8000ffe:	f7ff fed9 	bl	8000db4 <ST7735_Unselect>
 8001002:	e000      	b.n	8001006 <ST7735_DrawPixel+0x62>
        return;
 8001004:	bf00      	nop
}
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <ST7735_FillRectangleFast>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	4611      	mov	r1, r2
 8001018:	461a      	mov	r2, r3
 800101a:	4623      	mov	r3, r4
 800101c:	80fb      	strh	r3, [r7, #6]
 800101e:	4603      	mov	r3, r0
 8001020:	80bb      	strh	r3, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	807b      	strh	r3, [r7, #2]
 8001026:	4613      	mov	r3, r2
 8001028:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	2b7f      	cmp	r3, #127	@ 0x7f
 800102e:	d86a      	bhi.n	8001106 <ST7735_FillRectangleFast+0xfa>
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	2b7f      	cmp	r3, #127	@ 0x7f
 8001034:	d867      	bhi.n	8001106 <ST7735_FillRectangleFast+0xfa>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	4413      	add	r3, r2
 800103c:	2b80      	cmp	r3, #128	@ 0x80
 800103e:	dd03      	ble.n	8001048 <ST7735_FillRectangleFast+0x3c>
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001046:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001048:	88ba      	ldrh	r2, [r7, #4]
 800104a:	883b      	ldrh	r3, [r7, #0]
 800104c:	4413      	add	r3, r2
 800104e:	2b80      	cmp	r3, #128	@ 0x80
 8001050:	dd03      	ble.n	800105a <ST7735_FillRectangleFast+0x4e>
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001058:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800105a:	f7ff fe9f 	bl	8000d9c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	b2d8      	uxtb	r0, r3
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	b2d9      	uxtb	r1, r3
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4413      	add	r3, r2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	3b01      	subs	r3, #1
 8001074:	b2dc      	uxtb	r4, r3
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	883b      	ldrh	r3, [r7, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4413      	add	r3, r2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3b01      	subs	r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4622      	mov	r2, r4
 8001088:	f7ff ff35 	bl	8000ef6 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 800108c:	8c3b      	ldrh	r3, [r7, #32]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	b29b      	uxth	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	723b      	strb	r3, [r7, #8]
 8001096:	8c3b      	ldrh	r3, [r7, #32]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 ff17 	bl	8002ed4 <malloc>
 80010a6:	4603      	mov	r3, r0
 80010a8:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80010aa:	2300      	movs	r3, #0
 80010ac:	80fb      	strh	r3, [r7, #6]
 80010ae:	e008      	b.n	80010c2 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	893a      	ldrh	r2, [r7, #8]
 80010ba:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	3301      	adds	r3, #1
 80010c0:	80fb      	strh	r3, [r7, #6]
 80010c2:	88fa      	ldrh	r2, [r7, #6]
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3f2      	bcc.n	80010b0 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010d0:	480f      	ldr	r0, [pc, #60]	@ (8001110 <ST7735_FillRectangleFast+0x104>)
 80010d2:	f000 fe49 	bl	8001d68 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80010d6:	883b      	ldrh	r3, [r7, #0]
 80010d8:	80bb      	strh	r3, [r7, #4]
 80010da:	e00b      	b.n	80010f4 <ST7735_FillRectangleFast+0xe8>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010e6:	68f9      	ldr	r1, [r7, #12]
 80010e8:	480a      	ldr	r0, [pc, #40]	@ (8001114 <ST7735_FillRectangleFast+0x108>)
 80010ea:	f001 fc9b 	bl	8002a24 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 80010ee:	88bb      	ldrh	r3, [r7, #4]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	80bb      	strh	r3, [r7, #4]
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <ST7735_FillRectangleFast+0xd0>

    free(line);
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f001 fef2 	bl	8002ee4 <free>
    ST7735_Unselect();
 8001100:	f7ff fe58 	bl	8000db4 <ST7735_Unselect>
 8001104:	e000      	b.n	8001108 <ST7735_FillRectangleFast+0xfc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001106:	bf00      	nop
}
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop
 8001110:	40010c00 	.word	0x40010c00
 8001114:	20000154 	.word	0x20000154

08001118 <ST7735_FillScreenFast>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_FillScreenFast(uint16_t color) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af02      	add	r7, sp, #8
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2380      	movs	r3, #128	@ 0x80
 8001128:	2280      	movs	r2, #128	@ 0x80
 800112a:	2100      	movs	r1, #0
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff ff6d 	bl	800100c <ST7735_FillRectangleFast>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800113a:	b590      	push	{r4, r7, lr}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	4604      	mov	r4, r0
 8001142:	4608      	mov	r0, r1
 8001144:	4611      	mov	r1, r2
 8001146:	461a      	mov	r2, r3
 8001148:	4623      	mov	r3, r4
 800114a:	80fb      	strh	r3, [r7, #6]
 800114c:	4603      	mov	r3, r0
 800114e:	80bb      	strh	r3, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	2b7f      	cmp	r3, #127	@ 0x7f
 800115c:	d831      	bhi.n	80011c2 <ST7735_DrawImage+0x88>
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	2b7f      	cmp	r3, #127	@ 0x7f
 8001162:	d82e      	bhi.n	80011c2 <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8001164:	88fa      	ldrh	r2, [r7, #6]
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	4413      	add	r3, r2
 800116a:	2b80      	cmp	r3, #128	@ 0x80
 800116c:	dc2b      	bgt.n	80011c6 <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800116e:	88ba      	ldrh	r2, [r7, #4]
 8001170:	883b      	ldrh	r3, [r7, #0]
 8001172:	4413      	add	r3, r2
 8001174:	2b80      	cmp	r3, #128	@ 0x80
 8001176:	dc28      	bgt.n	80011ca <ST7735_DrawImage+0x90>

    ST7735_Select();
 8001178:	f7ff fe10 	bl	8000d9c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	b2d8      	uxtb	r0, r3
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	b2d9      	uxtb	r1, r3
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4413      	add	r3, r2
 800118e:	b2db      	uxtb	r3, r3
 8001190:	3b01      	subs	r3, #1
 8001192:	b2dc      	uxtb	r4, r3
 8001194:	88bb      	ldrh	r3, [r7, #4]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	883b      	ldrh	r3, [r7, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3b01      	subs	r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4622      	mov	r2, r4
 80011a6:	f7ff fea6 	bl	8000ef6 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	883a      	ldrh	r2, [r7, #0]
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	69b8      	ldr	r0, [r7, #24]
 80011b8:	f7ff fe38 	bl	8000e2c <ST7735_WriteData>
    ST7735_Unselect();
 80011bc:	f7ff fdfa 	bl	8000db4 <ST7735_Unselect>
 80011c0:	e004      	b.n	80011cc <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80011c2:	bf00      	nop
 80011c4:	e002      	b.n	80011cc <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 80011c6:	bf00      	nop
 80011c8:	e000      	b.n	80011cc <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 80011ca:	bf00      	nop
}
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}
	...

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <HAL_MspInit+0x5c>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a14      	ldr	r2, [pc, #80]	@ (8001230 <HAL_MspInit+0x5c>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6193      	str	r3, [r2, #24]
 80011e6:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <HAL_MspInit+0x5c>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <HAL_MspInit+0x5c>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001230 <HAL_MspInit+0x5c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011fc:	61d3      	str	r3, [r2, #28]
 80011fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <HAL_MspInit+0x5c>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_MspInit+0x60>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <HAL_MspInit+0x60>)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000

08001238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a29      	ldr	r2, [pc, #164]	@ (80012f8 <HAL_SPI_MspInit+0xc0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d14a      	bne.n	80012ee <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001258:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <HAL_SPI_MspInit+0xc4>)
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	4a27      	ldr	r2, [pc, #156]	@ (80012fc <HAL_SPI_MspInit+0xc4>)
 800125e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001262:	61d3      	str	r3, [r2, #28]
 8001264:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <HAL_SPI_MspInit+0xc4>)
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <HAL_SPI_MspInit+0xc4>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <HAL_SPI_MspInit+0xc4>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <HAL_SPI_MspInit+0xc4>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001288:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800128c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4818      	ldr	r0, [pc, #96]	@ (8001300 <HAL_SPI_MspInit+0xc8>)
 800129e:	f000 fbdf 	bl	8001a60 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80012a2:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <HAL_SPI_MspInit+0xcc>)
 80012a4:	4a18      	ldr	r2, [pc, #96]	@ (8001308 <HAL_SPI_MspInit+0xd0>)
 80012a6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a8:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <HAL_SPI_MspInit+0xcc>)
 80012aa:	2210      	movs	r2, #16
 80012ac:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_SPI_MspInit+0xcc>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <HAL_SPI_MspInit+0xcc>)
 80012b6:	2280      	movs	r2, #128	@ 0x80
 80012b8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_SPI_MspInit+0xcc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c0:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <HAL_SPI_MspInit+0xcc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_SPI_MspInit+0xcc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <HAL_SPI_MspInit+0xcc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80012d2:	480c      	ldr	r0, [pc, #48]	@ (8001304 <HAL_SPI_MspInit+0xcc>)
 80012d4:	f000 fa64 	bl	80017a0 <HAL_DMA_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 80012de:	f7ff fd57 	bl	8000d90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a07      	ldr	r2, [pc, #28]	@ (8001304 <HAL_SPI_MspInit+0xcc>)
 80012e6:	649a      	str	r2, [r3, #72]	@ 0x48
 80012e8:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <HAL_SPI_MspInit+0xcc>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40003800 	.word	0x40003800
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010c00 	.word	0x40010c00
 8001304:	200001ac 	.word	0x200001ac
 8001308:	40020058 	.word	0x40020058

0800130c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a09      	ldr	r2, [pc, #36]	@ (8001340 <HAL_PCD_MspInit+0x34>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10b      	bne.n	8001336 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_PCD_MspInit+0x38>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <HAL_PCD_MspInit+0x38>)
 8001324:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_PCD_MspInit+0x38>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40005c00 	.word	0x40005c00
 8001344:	40021000 	.word	0x40021000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <NMI_Handler+0x4>

08001350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <MemManage_Handler+0x4>

08001360 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <UsageFault_Handler+0x4>

08001370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f8b4 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <DMA1_Channel5_IRQHandler+0x10>)
 80013a6:	f000 fa55 	bl	8001854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200001ac 	.word	0x200001ac

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f001 fe4c 	bl	8003080 <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20005000 	.word	0x20005000
 8001414:	00000400 	.word	0x00000400
 8001418:	200007c4 	.word	0x200007c4
 800141c:	20000918 	.word	0x20000918

08001420 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800142c:	f7ff fff8 	bl	8001420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001430:	480b      	ldr	r0, [pc, #44]	@ (8001460 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001432:	490c      	ldr	r1, [pc, #48]	@ (8001464 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001434:	4a0c      	ldr	r2, [pc, #48]	@ (8001468 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a09      	ldr	r2, [pc, #36]	@ (800146c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001448:	4c09      	ldr	r4, [pc, #36]	@ (8001470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001456:	f001 fe19 	bl	800308c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7ff fa8f 	bl	800097c <main>
  bx lr
 800145e:	4770      	bx	lr
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8001468:	0800352c 	.word	0x0800352c
  ldr r2, =_sbss
 800146c:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8001470:	20000914 	.word	0x20000914

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <HAL_Init+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <HAL_Init+0x28>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f947 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	200f      	movs	r0, #15
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fe9e 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f95f 	bl	8001786 <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014e0:	f000 f927 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	@ (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200000dc 	.word	0x200000dc
 80014fc:	200000e4 	.word	0x200000e4
 8001500:	200000e0 	.word	0x200000e0

08001504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <HAL_IncTick+0x1c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_IncTick+0x20>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a03      	ldr	r2, [pc, #12]	@ (8001524 <HAL_IncTick+0x20>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	200000e4 	.word	0x200000e4
 8001524:	200007c8 	.word	0x200007c8

08001528 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b02      	ldr	r3, [pc, #8]	@ (8001538 <HAL_GetTick+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	200007c8 	.word	0x200007c8

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff fff0 	bl	8001528 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffe0 	bl	8001528 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000e4 	.word	0x200000e4

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4906      	ldr	r1, [pc, #24]	@ (800161c <__NVIC_EnableIRQ+0x34>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	@ (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	@ (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	@ 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
         );
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	@ 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016fc:	f7ff ff90 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff2d 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff42 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff90 	bl	8001674 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5f 	bl	8001620 <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff35 	bl	80015e8 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa2 	bl	80016d8 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e043      	b.n	800183e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <HAL_DMA_Init+0xa8>)
 80017be:	4413      	add	r3, r2
 80017c0:	4a22      	ldr	r2, [pc, #136]	@ (800184c <HAL_DMA_Init+0xac>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	009a      	lsls	r2, r3, #2
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001850 <HAL_DMA_Init+0xb0>)
 80017d2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80017ea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80017ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001804:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001810:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	bffdfff8 	.word	0xbffdfff8
 800184c:	cccccccd 	.word	0xcccccccd
 8001850:	40020000 	.word	0x40020000

08001854 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	2204      	movs	r2, #4
 8001872:	409a      	lsls	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d04f      	beq.n	800191c <HAL_DMA_IRQHandler+0xc8>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d04a      	beq.n	800191c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	2b00      	cmp	r3, #0
 8001892:	d107      	bne.n	80018a4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0204 	bic.w	r2, r2, #4
 80018a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a66      	ldr	r2, [pc, #408]	@ (8001a44 <HAL_DMA_IRQHandler+0x1f0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d029      	beq.n	8001902 <HAL_DMA_IRQHandler+0xae>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a65      	ldr	r2, [pc, #404]	@ (8001a48 <HAL_DMA_IRQHandler+0x1f4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d022      	beq.n	80018fe <HAL_DMA_IRQHandler+0xaa>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a63      	ldr	r2, [pc, #396]	@ (8001a4c <HAL_DMA_IRQHandler+0x1f8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01a      	beq.n	80018f8 <HAL_DMA_IRQHandler+0xa4>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a62      	ldr	r2, [pc, #392]	@ (8001a50 <HAL_DMA_IRQHandler+0x1fc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d012      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x9e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a60      	ldr	r2, [pc, #384]	@ (8001a54 <HAL_DMA_IRQHandler+0x200>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00a      	beq.n	80018ec <HAL_DMA_IRQHandler+0x98>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a5f      	ldr	r2, [pc, #380]	@ (8001a58 <HAL_DMA_IRQHandler+0x204>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d102      	bne.n	80018e6 <HAL_DMA_IRQHandler+0x92>
 80018e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018e4:	e00e      	b.n	8001904 <HAL_DMA_IRQHandler+0xb0>
 80018e6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018ea:	e00b      	b.n	8001904 <HAL_DMA_IRQHandler+0xb0>
 80018ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018f0:	e008      	b.n	8001904 <HAL_DMA_IRQHandler+0xb0>
 80018f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018f6:	e005      	b.n	8001904 <HAL_DMA_IRQHandler+0xb0>
 80018f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018fc:	e002      	b.n	8001904 <HAL_DMA_IRQHandler+0xb0>
 80018fe:	2340      	movs	r3, #64	@ 0x40
 8001900:	e000      	b.n	8001904 <HAL_DMA_IRQHandler+0xb0>
 8001902:	2304      	movs	r3, #4
 8001904:	4a55      	ldr	r2, [pc, #340]	@ (8001a5c <HAL_DMA_IRQHandler+0x208>)
 8001906:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8094 	beq.w	8001a3a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800191a:	e08e      	b.n	8001a3a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	2202      	movs	r2, #2
 8001922:	409a      	lsls	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d056      	beq.n	80019da <HAL_DMA_IRQHandler+0x186>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d051      	beq.n	80019da <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10b      	bne.n	800195c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 020a 	bic.w	r2, r2, #10
 8001952:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a38      	ldr	r2, [pc, #224]	@ (8001a44 <HAL_DMA_IRQHandler+0x1f0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d029      	beq.n	80019ba <HAL_DMA_IRQHandler+0x166>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a37      	ldr	r2, [pc, #220]	@ (8001a48 <HAL_DMA_IRQHandler+0x1f4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d022      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x162>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a35      	ldr	r2, [pc, #212]	@ (8001a4c <HAL_DMA_IRQHandler+0x1f8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01a      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x15c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a34      	ldr	r2, [pc, #208]	@ (8001a50 <HAL_DMA_IRQHandler+0x1fc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d012      	beq.n	80019aa <HAL_DMA_IRQHandler+0x156>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a32      	ldr	r2, [pc, #200]	@ (8001a54 <HAL_DMA_IRQHandler+0x200>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00a      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x150>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a31      	ldr	r2, [pc, #196]	@ (8001a58 <HAL_DMA_IRQHandler+0x204>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d102      	bne.n	800199e <HAL_DMA_IRQHandler+0x14a>
 8001998:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800199c:	e00e      	b.n	80019bc <HAL_DMA_IRQHandler+0x168>
 800199e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019a2:	e00b      	b.n	80019bc <HAL_DMA_IRQHandler+0x168>
 80019a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019a8:	e008      	b.n	80019bc <HAL_DMA_IRQHandler+0x168>
 80019aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ae:	e005      	b.n	80019bc <HAL_DMA_IRQHandler+0x168>
 80019b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019b4:	e002      	b.n	80019bc <HAL_DMA_IRQHandler+0x168>
 80019b6:	2320      	movs	r3, #32
 80019b8:	e000      	b.n	80019bc <HAL_DMA_IRQHandler+0x168>
 80019ba:	2302      	movs	r3, #2
 80019bc:	4a27      	ldr	r2, [pc, #156]	@ (8001a5c <HAL_DMA_IRQHandler+0x208>)
 80019be:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d034      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019d8:	e02f      	b.n	8001a3a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	2208      	movs	r2, #8
 80019e0:	409a      	lsls	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d028      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x1e8>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d023      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020e 	bic.w	r2, r2, #14
 8001a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d004      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
    }
  }
  return;
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
}
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40020008 	.word	0x40020008
 8001a48:	4002001c 	.word	0x4002001c
 8001a4c:	40020030 	.word	0x40020030
 8001a50:	40020044 	.word	0x40020044
 8001a54:	40020058 	.word	0x40020058
 8001a58:	4002006c 	.word	0x4002006c
 8001a5c:	40020000 	.word	0x40020000

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b08b      	sub	sp, #44	@ 0x2c
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a72:	e169      	b.n	8001d48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a74:	2201      	movs	r2, #1
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 8158 	bne.w	8001d42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4a9a      	ldr	r2, [pc, #616]	@ (8001d00 <HAL_GPIO_Init+0x2a0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d05e      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001a9c:	4a98      	ldr	r2, [pc, #608]	@ (8001d00 <HAL_GPIO_Init+0x2a0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d875      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aa2:	4a98      	ldr	r2, [pc, #608]	@ (8001d04 <HAL_GPIO_Init+0x2a4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d058      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001aa8:	4a96      	ldr	r2, [pc, #600]	@ (8001d04 <HAL_GPIO_Init+0x2a4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d86f      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aae:	4a96      	ldr	r2, [pc, #600]	@ (8001d08 <HAL_GPIO_Init+0x2a8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d052      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001ab4:	4a94      	ldr	r2, [pc, #592]	@ (8001d08 <HAL_GPIO_Init+0x2a8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d869      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aba:	4a94      	ldr	r2, [pc, #592]	@ (8001d0c <HAL_GPIO_Init+0x2ac>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d04c      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001ac0:	4a92      	ldr	r2, [pc, #584]	@ (8001d0c <HAL_GPIO_Init+0x2ac>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d863      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ac6:	4a92      	ldr	r2, [pc, #584]	@ (8001d10 <HAL_GPIO_Init+0x2b0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d046      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001acc:	4a90      	ldr	r2, [pc, #576]	@ (8001d10 <HAL_GPIO_Init+0x2b0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d85d      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ad2:	2b12      	cmp	r3, #18
 8001ad4:	d82a      	bhi.n	8001b2c <HAL_GPIO_Init+0xcc>
 8001ad6:	2b12      	cmp	r3, #18
 8001ad8:	d859      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ada:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae0 <HAL_GPIO_Init+0x80>)
 8001adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae0:	08001b5b 	.word	0x08001b5b
 8001ae4:	08001b35 	.word	0x08001b35
 8001ae8:	08001b47 	.word	0x08001b47
 8001aec:	08001b89 	.word	0x08001b89
 8001af0:	08001b8f 	.word	0x08001b8f
 8001af4:	08001b8f 	.word	0x08001b8f
 8001af8:	08001b8f 	.word	0x08001b8f
 8001afc:	08001b8f 	.word	0x08001b8f
 8001b00:	08001b8f 	.word	0x08001b8f
 8001b04:	08001b8f 	.word	0x08001b8f
 8001b08:	08001b8f 	.word	0x08001b8f
 8001b0c:	08001b8f 	.word	0x08001b8f
 8001b10:	08001b8f 	.word	0x08001b8f
 8001b14:	08001b8f 	.word	0x08001b8f
 8001b18:	08001b8f 	.word	0x08001b8f
 8001b1c:	08001b8f 	.word	0x08001b8f
 8001b20:	08001b8f 	.word	0x08001b8f
 8001b24:	08001b3d 	.word	0x08001b3d
 8001b28:	08001b51 	.word	0x08001b51
 8001b2c:	4a79      	ldr	r2, [pc, #484]	@ (8001d14 <HAL_GPIO_Init+0x2b4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b32:	e02c      	b.n	8001b8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	623b      	str	r3, [r7, #32]
          break;
 8001b3a:	e029      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	3304      	adds	r3, #4
 8001b42:	623b      	str	r3, [r7, #32]
          break;
 8001b44:	e024      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e01f      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	330c      	adds	r3, #12
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e01a      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b62:	2304      	movs	r3, #4
 8001b64:	623b      	str	r3, [r7, #32]
          break;
 8001b66:	e013      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b70:	2308      	movs	r3, #8
 8001b72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	611a      	str	r2, [r3, #16]
          break;
 8001b7a:	e009      	b.n	8001b90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	615a      	str	r2, [r3, #20]
          break;
 8001b86:	e003      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
          break;
 8001b8c:	e000      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          break;
 8001b8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2bff      	cmp	r3, #255	@ 0xff
 8001b94:	d801      	bhi.n	8001b9a <HAL_GPIO_Init+0x13a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	e001      	b.n	8001b9e <HAL_GPIO_Init+0x13e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2bff      	cmp	r3, #255	@ 0xff
 8001ba4:	d802      	bhi.n	8001bac <HAL_GPIO_Init+0x14c>
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	e002      	b.n	8001bb2 <HAL_GPIO_Init+0x152>
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	3b08      	subs	r3, #8
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	210f      	movs	r1, #15
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	6a39      	ldr	r1, [r7, #32]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80b1 	beq.w	8001d42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001be0:	4b4d      	ldr	r3, [pc, #308]	@ (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a4c      	ldr	r2, [pc, #304]	@ (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b4a      	ldr	r3, [pc, #296]	@ (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf8:	4a48      	ldr	r2, [pc, #288]	@ (8001d1c <HAL_GPIO_Init+0x2bc>)
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a40      	ldr	r2, [pc, #256]	@ (8001d20 <HAL_GPIO_Init+0x2c0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d013      	beq.n	8001c4c <HAL_GPIO_Init+0x1ec>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a3f      	ldr	r2, [pc, #252]	@ (8001d24 <HAL_GPIO_Init+0x2c4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00d      	beq.n	8001c48 <HAL_GPIO_Init+0x1e8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d28 <HAL_GPIO_Init+0x2c8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d007      	beq.n	8001c44 <HAL_GPIO_Init+0x1e4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a3d      	ldr	r2, [pc, #244]	@ (8001d2c <HAL_GPIO_Init+0x2cc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_GPIO_Init+0x1e0>
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e006      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c40:	2304      	movs	r3, #4
 8001c42:	e004      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e002      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c50:	f002 0203 	and.w	r2, r2, #3
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	4093      	lsls	r3, r2
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c5e:	492f      	ldr	r1, [pc, #188]	@ (8001d1c <HAL_GPIO_Init+0x2bc>)
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c78:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	492c      	ldr	r1, [pc, #176]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c86:	4b2a      	ldr	r3, [pc, #168]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	4928      	ldr	r1, [pc, #160]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ca0:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4922      	ldr	r1, [pc, #136]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	491e      	ldr	r1, [pc, #120]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4918      	ldr	r1, [pc, #96]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cd6:	4b16      	ldr	r3, [pc, #88]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	4914      	ldr	r1, [pc, #80]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d021      	beq.n	8001d34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	490e      	ldr	r1, [pc, #56]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
 8001cfc:	e021      	b.n	8001d42 <HAL_GPIO_Init+0x2e2>
 8001cfe:	bf00      	nop
 8001d00:	10320000 	.word	0x10320000
 8001d04:	10310000 	.word	0x10310000
 8001d08:	10220000 	.word	0x10220000
 8001d0c:	10210000 	.word	0x10210000
 8001d10:	10120000 	.word	0x10120000
 8001d14:	10110000 	.word	0x10110000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40010800 	.word	0x40010800
 8001d24:	40010c00 	.word	0x40010c00
 8001d28:	40011000 	.word	0x40011000
 8001d2c:	40011400 	.word	0x40011400
 8001d30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	4909      	ldr	r1, [pc, #36]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	3301      	adds	r3, #1
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f47f ae8e 	bne.w	8001a74 <HAL_GPIO_Init+0x14>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	372c      	adds	r7, #44	@ 0x2c
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40010400 	.word	0x40010400

08001d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d78:	787b      	ldrb	r3, [r7, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d84:	e003      	b.n	8001d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	611a      	str	r2, [r3, #16]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0e8      	b.n	8001f7c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff faa4 	bl	800130c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 f82e 	bl	8002e38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3304      	adds	r3, #4
 8001de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de6:	f001 f81a 	bl	8002e1e <USB_CoreInit>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0bf      	b.n	8001f7c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 f832 	bl	8002e6c <USB_SetCurrentMode>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0b0      	b.n	8001f7c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	e03e      	b.n	8001e9e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3311      	adds	r3, #17
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	3310      	adds	r3, #16
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	3313      	adds	r3, #19
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3320      	adds	r3, #32
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3324      	adds	r3, #36	@ 0x24
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	791b      	ldrb	r3, [r3, #4]
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3bb      	bcc.n	8001e20 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	e044      	b.n	8001f38 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	3301      	adds	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	791b      	ldrb	r3, [r3, #4]
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d3b5      	bcc.n	8001eae <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f4c:	f000 ff9a 	bl	8002e84 <USB_DevInit>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00c      	b.n	8001f7c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 ffa2 	bl	8002ebe <USB_DevDisconnect>

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e272      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8087 	beq.w	80020b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa4:	4b92      	ldr	r3, [pc, #584]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d00c      	beq.n	8001fca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb0:	4b8f      	ldr	r3, [pc, #572]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d112      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5e>
 8001fbc:	4b8c      	ldr	r3, [pc, #560]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fca:	4b89      	ldr	r3, [pc, #548]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d06c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x12c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d168      	bne.n	80020b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e24c      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x76>
 8001fec:	4b80      	ldr	r3, [pc, #512]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a7f      	ldr	r2, [pc, #508]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e02e      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x98>
 8002002:	4b7b      	ldr	r3, [pc, #492]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7a      	ldr	r2, [pc, #488]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b78      	ldr	r3, [pc, #480]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a77      	ldr	r2, [pc, #476]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e01d      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0xbc>
 8002026:	4b72      	ldr	r3, [pc, #456]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a71      	ldr	r2, [pc, #452]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b6f      	ldr	r3, [pc, #444]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a6e      	ldr	r2, [pc, #440]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 8002040:	4b6b      	ldr	r3, [pc, #428]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6a      	ldr	r2, [pc, #424]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b68      	ldr	r3, [pc, #416]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a67      	ldr	r2, [pc, #412]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002052:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002056:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fa62 	bl	8001528 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff fa5e 	bl	8001528 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	@ 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e200      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b5d      	ldr	r3, [pc, #372]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0xe4>
 8002086:	e014      	b.n	80020b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7ff fa4e 	bl	8001528 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff fa4a 	bl	8001528 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	@ 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e1ec      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	4b53      	ldr	r3, [pc, #332]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x10c>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d063      	beq.n	8002186 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020be:	4b4c      	ldr	r3, [pc, #304]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ca:	4b49      	ldr	r3, [pc, #292]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d11c      	bne.n	8002110 <HAL_RCC_OscConfig+0x18c>
 80020d6:	4b46      	ldr	r3, [pc, #280]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d116      	bne.n	8002110 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	4b43      	ldr	r3, [pc, #268]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x176>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e1c0      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b3d      	ldr	r3, [pc, #244]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4939      	ldr	r1, [pc, #228]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	e03a      	b.n	8002186 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002118:	4b36      	ldr	r3, [pc, #216]	@ (80021f4 <HAL_RCC_OscConfig+0x270>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fa03 	bl	8001528 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002126:	f7ff f9ff 	bl	8001528 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e1a1      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	4b2d      	ldr	r3, [pc, #180]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	4b2a      	ldr	r3, [pc, #168]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4927      	ldr	r1, [pc, #156]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
 8002158:	e015      	b.n	8002186 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215a:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <HAL_RCC_OscConfig+0x270>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff f9e2 	bl	8001528 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002168:	f7ff f9de 	bl	8001528 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e180      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d03a      	beq.n	8002208 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d019      	beq.n	80021ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219a:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <HAL_RCC_OscConfig+0x274>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7ff f9c2 	bl	8001528 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff f9be 	bl	8001528 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e160      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	4b0d      	ldr	r3, [pc, #52]	@ (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f000 fad4 	bl	8002774 <RCC_Delay>
 80021cc:	e01c      	b.n	8002208 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_RCC_OscConfig+0x274>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7ff f9a8 	bl	8001528 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021da:	e00f      	b.n	80021fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff f9a4 	bl	8001528 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d908      	bls.n	80021fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e146      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	42420000 	.word	0x42420000
 80021f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b92      	ldr	r3, [pc, #584]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e9      	bne.n	80021dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a6 	beq.w	8002362 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b8b      	ldr	r3, [pc, #556]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10d      	bne.n	8002242 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	4b88      	ldr	r3, [pc, #544]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4a87      	ldr	r2, [pc, #540]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]
 8002232:	4b85      	ldr	r3, [pc, #532]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223e:	2301      	movs	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002242:	4b82      	ldr	r3, [pc, #520]	@ (800244c <HAL_RCC_OscConfig+0x4c8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d118      	bne.n	8002280 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224e:	4b7f      	ldr	r3, [pc, #508]	@ (800244c <HAL_RCC_OscConfig+0x4c8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7e      	ldr	r2, [pc, #504]	@ (800244c <HAL_RCC_OscConfig+0x4c8>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225a:	f7ff f965 	bl	8001528 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002262:	f7ff f961 	bl	8001528 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b64      	cmp	r3, #100	@ 0x64
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e103      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	4b75      	ldr	r3, [pc, #468]	@ (800244c <HAL_RCC_OscConfig+0x4c8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x312>
 8002288:	4b6f      	ldr	r3, [pc, #444]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a6e      	ldr	r2, [pc, #440]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	e02d      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x334>
 800229e:	4b6a      	ldr	r3, [pc, #424]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a69      	ldr	r2, [pc, #420]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6213      	str	r3, [r2, #32]
 80022aa:	4b67      	ldr	r3, [pc, #412]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a66      	ldr	r2, [pc, #408]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6213      	str	r3, [r2, #32]
 80022b6:	e01c      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d10c      	bne.n	80022da <HAL_RCC_OscConfig+0x356>
 80022c0:	4b61      	ldr	r3, [pc, #388]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4a60      	ldr	r2, [pc, #384]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	6213      	str	r3, [r2, #32]
 80022cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	e00b      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 80022da:	4b5b      	ldr	r3, [pc, #364]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a5a      	ldr	r2, [pc, #360]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6213      	str	r3, [r2, #32]
 80022e6:	4b58      	ldr	r3, [pc, #352]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a57      	ldr	r2, [pc, #348]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	f023 0304 	bic.w	r3, r3, #4
 80022f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d015      	beq.n	8002326 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7ff f915 	bl	8001528 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7ff f911 	bl	8001528 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0b1      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	4b4b      	ldr	r3, [pc, #300]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ee      	beq.n	8002302 <HAL_RCC_OscConfig+0x37e>
 8002324:	e014      	b.n	8002350 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7ff f8ff 	bl	8001528 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7ff f8fb 	bl	8001528 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e09b      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	4b40      	ldr	r3, [pc, #256]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1ee      	bne.n	800232e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002350:	7dfb      	ldrb	r3, [r7, #23]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d105      	bne.n	8002362 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002356:	4b3c      	ldr	r3, [pc, #240]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a3b      	ldr	r2, [pc, #236]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002360:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8087 	beq.w	800247a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	4b36      	ldr	r3, [pc, #216]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d061      	beq.n	800243c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d146      	bne.n	800240e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	4b33      	ldr	r3, [pc, #204]	@ (8002450 <HAL_RCC_OscConfig+0x4cc>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7ff f8cf 	bl	8001528 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238e:	f7ff f8cb 	bl	8001528 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e06d      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a0:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b4:	d108      	bne.n	80023c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023b6:	4b24      	ldr	r3, [pc, #144]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4921      	ldr	r1, [pc, #132]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a19      	ldr	r1, [r3, #32]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	430b      	orrs	r3, r1
 80023da:	491b      	ldr	r1, [pc, #108]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <HAL_RCC_OscConfig+0x4cc>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff f89f 	bl	8001528 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ee:	f7ff f89b 	bl	8001528 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e03d      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x46a>
 800240c:	e035      	b.n	800247a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <HAL_RCC_OscConfig+0x4cc>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff f888 	bl	8001528 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff f884 	bl	8001528 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e026      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x498>
 800243a:	e01e      	b.n	800247a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d107      	bne.n	8002454 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e019      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
 8002448:	40021000 	.word	0x40021000
 800244c:	40007000 	.word	0x40007000
 8002450:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002454:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <HAL_RCC_OscConfig+0x500>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	429a      	cmp	r2, r3
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0d0      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800249c:	4b6a      	ldr	r3, [pc, #424]	@ (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d910      	bls.n	80024cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b67      	ldr	r3, [pc, #412]	@ (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	4965      	ldr	r1, [pc, #404]	@ (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b63      	ldr	r3, [pc, #396]	@ (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0b8      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e4:	4b59      	ldr	r3, [pc, #356]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a58      	ldr	r2, [pc, #352]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024fc:	4b53      	ldr	r3, [pc, #332]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a52      	ldr	r2, [pc, #328]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002506:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b50      	ldr	r3, [pc, #320]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	494d      	ldr	r1, [pc, #308]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d040      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	4b47      	ldr	r3, [pc, #284]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d115      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e07f      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002546:	4b41      	ldr	r3, [pc, #260]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e073      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002556:	4b3d      	ldr	r3, [pc, #244]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e06b      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002566:	4b39      	ldr	r3, [pc, #228]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f023 0203 	bic.w	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4936      	ldr	r1, [pc, #216]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002578:	f7fe ffd6 	bl	8001528 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	e00a      	b.n	8002596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002580:	f7fe ffd2 	bl	8001528 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e053      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002596:	4b2d      	ldr	r3, [pc, #180]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 020c 	and.w	r2, r3, #12
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d1eb      	bne.n	8002580 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a8:	4b27      	ldr	r3, [pc, #156]	@ (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d210      	bcs.n	80025d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	4922      	ldr	r1, [pc, #136]	@ (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e032      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4916      	ldr	r1, [pc, #88]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002602:	4b12      	ldr	r3, [pc, #72]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	490e      	ldr	r1, [pc, #56]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002616:	f000 f859 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 800261a:	4602      	mov	r2, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	490a      	ldr	r1, [pc, #40]	@ (8002650 <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a09      	ldr	r2, [pc, #36]	@ (8002654 <HAL_RCC_ClockConfig+0x1cc>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002632:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <HAL_RCC_ClockConfig+0x1d0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe ff34 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40022000 	.word	0x40022000
 800264c:	40021000 	.word	0x40021000
 8002650:	08003500 	.word	0x08003500
 8002654:	200000dc 	.word	0x200000dc
 8002658:	200000e0 	.word	0x200000e0

0800265c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	@ 0x28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002668:	f107 0318 	add.w	r3, r7, #24
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800267a:	2303      	movs	r3, #3
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8002682:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002686:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002688:	4b0e      	ldr	r3, [pc, #56]	@ (80026c4 <HAL_RCC_MCOConfig+0x68>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4a0d      	ldr	r2, [pc, #52]	@ (80026c4 <HAL_RCC_MCOConfig+0x68>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6193      	str	r3, [r2, #24]
 8002694:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_RCC_MCOConfig+0x68>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80026a0:	f107 0318 	add.w	r3, r7, #24
 80026a4:	4619      	mov	r1, r3
 80026a6:	4808      	ldr	r0, [pc, #32]	@ (80026c8 <HAL_RCC_MCOConfig+0x6c>)
 80026a8:	f7ff f9da 	bl	8001a60 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80026ac:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_RCC_MCOConfig+0x68>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80026b4:	4903      	ldr	r1, [pc, #12]	@ (80026c4 <HAL_RCC_MCOConfig+0x68>)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
}
 80026bc:	bf00      	nop
 80026be:	3728      	adds	r7, #40	@ 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40010800 	.word	0x40010800

080026cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x94>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x30>
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x36>
 80026fa:	e027      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026fc:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fe:	613b      	str	r3, [r7, #16]
      break;
 8002700:	e027      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	0c9b      	lsrs	r3, r3, #18
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	4a17      	ldr	r2, [pc, #92]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x9c>)
 800270c:	5cd3      	ldrb	r3, [r2, r3]
 800270e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d010      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800271a:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x94>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0c5b      	lsrs	r3, r3, #17
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	4a11      	ldr	r2, [pc, #68]	@ (800276c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002726:	5cd3      	ldrb	r3, [r2, r3]
 8002728:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a0d      	ldr	r2, [pc, #52]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x98>)
 800272e:	fb03 f202 	mul.w	r2, r3, r2
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e004      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a0c      	ldr	r2, [pc, #48]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	613b      	str	r3, [r7, #16]
      break;
 800274a:	e002      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x98>)
 800274e:	613b      	str	r3, [r7, #16]
      break;
 8002750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002752:	693b      	ldr	r3, [r7, #16]
}
 8002754:	4618      	mov	r0, r3
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	007a1200 	.word	0x007a1200
 8002768:	08003510 	.word	0x08003510
 800276c:	08003520 	.word	0x08003520
 8002770:	003d0900 	.word	0x003d0900

08002774 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800277c:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <RCC_Delay+0x34>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <RCC_Delay+0x38>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0a5b      	lsrs	r3, r3, #9
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002790:	bf00      	nop
  }
  while (Delay --);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1e5a      	subs	r2, r3, #1
 8002796:	60fa      	str	r2, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f9      	bne.n	8002790 <RCC_Delay+0x1c>
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	200000dc 	.word	0x200000dc
 80027ac:	10624dd3 	.word	0x10624dd3

080027b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d07d      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10d      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	61d3      	str	r3, [r2, #28]
 80027e8:	4b49      	ldr	r3, [pc, #292]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f4:	2301      	movs	r3, #1
 80027f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	4b46      	ldr	r3, [pc, #280]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d118      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002804:	4b43      	ldr	r3, [pc, #268]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a42      	ldr	r2, [pc, #264]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800280e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002810:	f7fe fe8a 	bl	8001528 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	e008      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002818:	f7fe fe86 	bl	8001528 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	@ 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e06d      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282a:	4b3a      	ldr	r3, [pc, #232]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002836:	4b36      	ldr	r3, [pc, #216]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800283e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d02e      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d027      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002854:	4b2e      	ldr	r3, [pc, #184]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800285c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800285e:	4b2e      	ldr	r3, [pc, #184]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002864:	4b2c      	ldr	r3, [pc, #176]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800286a:	4a29      	ldr	r2, [pc, #164]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d014      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fe55 	bl	8001528 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fe fe51 	bl	8001528 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e036      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	4b1d      	ldr	r3, [pc, #116]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ee      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4917      	ldr	r1, [pc, #92]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028bc:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4a13      	ldr	r2, [pc, #76]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	490b      	ldr	r1, [pc, #44]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f2:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	4904      	ldr	r1, [pc, #16]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	40007000 	.word	0x40007000
 8002918:	42420440 	.word	0x42420440

0800291c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e076      	b.n	8002a1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	2b00      	cmp	r3, #0
 8002934:	d108      	bne.n	8002948 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800293e:	d009      	beq.n	8002954 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
 8002946:	e005      	b.n	8002954 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe fc62 	bl	8001238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800298a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d8:	ea42 0103 	orr.w	r1, r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	0c1a      	lsrs	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f002 0204 	and.w	r2, r2, #4
 80029fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a34:	f7fe fd78 	bl	8001528 <HAL_GetTick>
 8002a38:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d001      	beq.n	8002a4e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e12a      	b.n	8002ca4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_SPI_Transmit+0x36>
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e122      	b.n	8002ca4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_SPI_Transmit+0x48>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e11b      	b.n	8002ca4 <HAL_SPI_Transmit+0x280>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2203      	movs	r2, #3
 8002a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aba:	d10f      	bne.n	8002adc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002aca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ada:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae6:	2b40      	cmp	r3, #64	@ 0x40
 8002ae8:	d007      	beq.n	8002afa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b02:	d152      	bne.n	8002baa <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_SPI_Transmit+0xee>
 8002b0c:	8b7b      	ldrh	r3, [r7, #26]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d145      	bne.n	8002b9e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	881a      	ldrh	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	1c9a      	adds	r2, r3, #2
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b36:	e032      	b.n	8002b9e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d112      	bne.n	8002b6c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	881a      	ldrh	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	1c9a      	adds	r2, r3, #2
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b6a:	e018      	b.n	8002b9e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b6c:	f7fe fcdc 	bl	8001528 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d803      	bhi.n	8002b84 <HAL_SPI_Transmit+0x160>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b82:	d102      	bne.n	8002b8a <HAL_SPI_Transmit+0x166>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e082      	b.n	8002ca4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1c7      	bne.n	8002b38 <HAL_SPI_Transmit+0x114>
 8002ba8:	e053      	b.n	8002c52 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_SPI_Transmit+0x194>
 8002bb2:	8b7b      	ldrh	r3, [r7, #26]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d147      	bne.n	8002c48 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	7812      	ldrb	r2, [r2, #0]
 8002bc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bde:	e033      	b.n	8002c48 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d113      	bne.n	8002c16 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	330c      	adds	r3, #12
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c14:	e018      	b.n	8002c48 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c16:	f7fe fc87 	bl	8001528 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d803      	bhi.n	8002c2e <HAL_SPI_Transmit+0x20a>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c2c:	d102      	bne.n	8002c34 <HAL_SPI_Transmit+0x210>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e02d      	b.n	8002ca4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1c6      	bne.n	8002be0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	6839      	ldr	r1, [r7, #0]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f8b0 	bl	8002dbc <SPI_EndRxTxTransaction>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cbc:	f7fe fc34 	bl	8001528 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ccc:	f7fe fc2c 	bl	8001528 <HAL_GetTick>
 8002cd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cd2:	4b39      	ldr	r3, [pc, #228]	@ (8002db8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	015b      	lsls	r3, r3, #5
 8002cd8:	0d1b      	lsrs	r3, r3, #20
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ce2:	e054      	b.n	8002d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cea:	d050      	beq.n	8002d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cec:	f7fe fc1c 	bl	8001528 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d902      	bls.n	8002d02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d13d      	bne.n	8002d7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d1a:	d111      	bne.n	8002d40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d24:	d004      	beq.n	8002d30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2e:	d107      	bne.n	8002d40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d48:	d10f      	bne.n	8002d6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e017      	b.n	8002dae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4013      	ands	r3, r2
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d19b      	bne.n	8002ce4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200000dc 	.word	0x200000dc

08002dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f7ff ff6a 	bl	8002cac <SPI_WaitFlagStateUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	f043 0220 	orr.w	r2, r3, #32
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e013      	b.n	8002e16 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2180      	movs	r1, #128	@ 0x80
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff ff57 	bl	8002cac <SPI_WaitFlagStateUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e000      	b.n	8002e16 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	4638      	mov	r0, r7
 8002e28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e40:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002e44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	4013      	ands	r3, r2
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	4638      	mov	r0, r7
 8002e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
	...

08002ed4 <malloc>:
 8002ed4:	4b02      	ldr	r3, [pc, #8]	@ (8002ee0 <malloc+0xc>)
 8002ed6:	4601      	mov	r1, r0
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	f000 b82d 	b.w	8002f38 <_malloc_r>
 8002ede:	bf00      	nop
 8002ee0:	200000e8 	.word	0x200000e8

08002ee4 <free>:
 8002ee4:	4b02      	ldr	r3, [pc, #8]	@ (8002ef0 <free+0xc>)
 8002ee6:	4601      	mov	r1, r0
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	f000 b8f5 	b.w	80030d8 <_free_r>
 8002eee:	bf00      	nop
 8002ef0:	200000e8 	.word	0x200000e8

08002ef4 <sbrk_aligned>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8002f34 <sbrk_aligned+0x40>)
 8002ef8:	460c      	mov	r4, r1
 8002efa:	6831      	ldr	r1, [r6, #0]
 8002efc:	4605      	mov	r5, r0
 8002efe:	b911      	cbnz	r1, 8002f06 <sbrk_aligned+0x12>
 8002f00:	f000 f8ae 	bl	8003060 <_sbrk_r>
 8002f04:	6030      	str	r0, [r6, #0]
 8002f06:	4621      	mov	r1, r4
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f000 f8a9 	bl	8003060 <_sbrk_r>
 8002f0e:	1c43      	adds	r3, r0, #1
 8002f10:	d103      	bne.n	8002f1a <sbrk_aligned+0x26>
 8002f12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002f16:	4620      	mov	r0, r4
 8002f18:	bd70      	pop	{r4, r5, r6, pc}
 8002f1a:	1cc4      	adds	r4, r0, #3
 8002f1c:	f024 0403 	bic.w	r4, r4, #3
 8002f20:	42a0      	cmp	r0, r4
 8002f22:	d0f8      	beq.n	8002f16 <sbrk_aligned+0x22>
 8002f24:	1a21      	subs	r1, r4, r0
 8002f26:	4628      	mov	r0, r5
 8002f28:	f000 f89a 	bl	8003060 <_sbrk_r>
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d1f2      	bne.n	8002f16 <sbrk_aligned+0x22>
 8002f30:	e7ef      	b.n	8002f12 <sbrk_aligned+0x1e>
 8002f32:	bf00      	nop
 8002f34:	200007cc 	.word	0x200007cc

08002f38 <_malloc_r>:
 8002f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f3c:	1ccd      	adds	r5, r1, #3
 8002f3e:	f025 0503 	bic.w	r5, r5, #3
 8002f42:	3508      	adds	r5, #8
 8002f44:	2d0c      	cmp	r5, #12
 8002f46:	bf38      	it	cc
 8002f48:	250c      	movcc	r5, #12
 8002f4a:	2d00      	cmp	r5, #0
 8002f4c:	4606      	mov	r6, r0
 8002f4e:	db01      	blt.n	8002f54 <_malloc_r+0x1c>
 8002f50:	42a9      	cmp	r1, r5
 8002f52:	d904      	bls.n	8002f5e <_malloc_r+0x26>
 8002f54:	230c      	movs	r3, #12
 8002f56:	6033      	str	r3, [r6, #0]
 8002f58:	2000      	movs	r0, #0
 8002f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003034 <_malloc_r+0xfc>
 8002f62:	f000 f869 	bl	8003038 <__malloc_lock>
 8002f66:	f8d8 3000 	ldr.w	r3, [r8]
 8002f6a:	461c      	mov	r4, r3
 8002f6c:	bb44      	cbnz	r4, 8002fc0 <_malloc_r+0x88>
 8002f6e:	4629      	mov	r1, r5
 8002f70:	4630      	mov	r0, r6
 8002f72:	f7ff ffbf 	bl	8002ef4 <sbrk_aligned>
 8002f76:	1c43      	adds	r3, r0, #1
 8002f78:	4604      	mov	r4, r0
 8002f7a:	d158      	bne.n	800302e <_malloc_r+0xf6>
 8002f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8002f80:	4627      	mov	r7, r4
 8002f82:	2f00      	cmp	r7, #0
 8002f84:	d143      	bne.n	800300e <_malloc_r+0xd6>
 8002f86:	2c00      	cmp	r4, #0
 8002f88:	d04b      	beq.n	8003022 <_malloc_r+0xea>
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	4639      	mov	r1, r7
 8002f8e:	4630      	mov	r0, r6
 8002f90:	eb04 0903 	add.w	r9, r4, r3
 8002f94:	f000 f864 	bl	8003060 <_sbrk_r>
 8002f98:	4581      	cmp	r9, r0
 8002f9a:	d142      	bne.n	8003022 <_malloc_r+0xea>
 8002f9c:	6821      	ldr	r1, [r4, #0]
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	1a6d      	subs	r5, r5, r1
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	f7ff ffa6 	bl	8002ef4 <sbrk_aligned>
 8002fa8:	3001      	adds	r0, #1
 8002faa:	d03a      	beq.n	8003022 <_malloc_r+0xea>
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	442b      	add	r3, r5
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	bb62      	cbnz	r2, 8003014 <_malloc_r+0xdc>
 8002fba:	f8c8 7000 	str.w	r7, [r8]
 8002fbe:	e00f      	b.n	8002fe0 <_malloc_r+0xa8>
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	1b52      	subs	r2, r2, r5
 8002fc4:	d420      	bmi.n	8003008 <_malloc_r+0xd0>
 8002fc6:	2a0b      	cmp	r2, #11
 8002fc8:	d917      	bls.n	8002ffa <_malloc_r+0xc2>
 8002fca:	1961      	adds	r1, r4, r5
 8002fcc:	42a3      	cmp	r3, r4
 8002fce:	6025      	str	r5, [r4, #0]
 8002fd0:	bf18      	it	ne
 8002fd2:	6059      	strne	r1, [r3, #4]
 8002fd4:	6863      	ldr	r3, [r4, #4]
 8002fd6:	bf08      	it	eq
 8002fd8:	f8c8 1000 	streq.w	r1, [r8]
 8002fdc:	5162      	str	r2, [r4, r5]
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	f000 f82f 	bl	8003044 <__malloc_unlock>
 8002fe6:	f104 000b 	add.w	r0, r4, #11
 8002fea:	1d23      	adds	r3, r4, #4
 8002fec:	f020 0007 	bic.w	r0, r0, #7
 8002ff0:	1ac2      	subs	r2, r0, r3
 8002ff2:	bf1c      	itt	ne
 8002ff4:	1a1b      	subne	r3, r3, r0
 8002ff6:	50a3      	strne	r3, [r4, r2]
 8002ff8:	e7af      	b.n	8002f5a <_malloc_r+0x22>
 8002ffa:	6862      	ldr	r2, [r4, #4]
 8002ffc:	42a3      	cmp	r3, r4
 8002ffe:	bf0c      	ite	eq
 8003000:	f8c8 2000 	streq.w	r2, [r8]
 8003004:	605a      	strne	r2, [r3, #4]
 8003006:	e7eb      	b.n	8002fe0 <_malloc_r+0xa8>
 8003008:	4623      	mov	r3, r4
 800300a:	6864      	ldr	r4, [r4, #4]
 800300c:	e7ae      	b.n	8002f6c <_malloc_r+0x34>
 800300e:	463c      	mov	r4, r7
 8003010:	687f      	ldr	r7, [r7, #4]
 8003012:	e7b6      	b.n	8002f82 <_malloc_r+0x4a>
 8003014:	461a      	mov	r2, r3
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	42a3      	cmp	r3, r4
 800301a:	d1fb      	bne.n	8003014 <_malloc_r+0xdc>
 800301c:	2300      	movs	r3, #0
 800301e:	6053      	str	r3, [r2, #4]
 8003020:	e7de      	b.n	8002fe0 <_malloc_r+0xa8>
 8003022:	230c      	movs	r3, #12
 8003024:	4630      	mov	r0, r6
 8003026:	6033      	str	r3, [r6, #0]
 8003028:	f000 f80c 	bl	8003044 <__malloc_unlock>
 800302c:	e794      	b.n	8002f58 <_malloc_r+0x20>
 800302e:	6005      	str	r5, [r0, #0]
 8003030:	e7d6      	b.n	8002fe0 <_malloc_r+0xa8>
 8003032:	bf00      	nop
 8003034:	200007d0 	.word	0x200007d0

08003038 <__malloc_lock>:
 8003038:	4801      	ldr	r0, [pc, #4]	@ (8003040 <__malloc_lock+0x8>)
 800303a:	f000 b84b 	b.w	80030d4 <__retarget_lock_acquire_recursive>
 800303e:	bf00      	nop
 8003040:	20000910 	.word	0x20000910

08003044 <__malloc_unlock>:
 8003044:	4801      	ldr	r0, [pc, #4]	@ (800304c <__malloc_unlock+0x8>)
 8003046:	f000 b846 	b.w	80030d6 <__retarget_lock_release_recursive>
 800304a:	bf00      	nop
 800304c:	20000910 	.word	0x20000910

08003050 <memset>:
 8003050:	4603      	mov	r3, r0
 8003052:	4402      	add	r2, r0
 8003054:	4293      	cmp	r3, r2
 8003056:	d100      	bne.n	800305a <memset+0xa>
 8003058:	4770      	bx	lr
 800305a:	f803 1b01 	strb.w	r1, [r3], #1
 800305e:	e7f9      	b.n	8003054 <memset+0x4>

08003060 <_sbrk_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	2300      	movs	r3, #0
 8003064:	4d05      	ldr	r5, [pc, #20]	@ (800307c <_sbrk_r+0x1c>)
 8003066:	4604      	mov	r4, r0
 8003068:	4608      	mov	r0, r1
 800306a:	602b      	str	r3, [r5, #0]
 800306c:	f7fe f9a2 	bl	80013b4 <_sbrk>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	d102      	bne.n	800307a <_sbrk_r+0x1a>
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	b103      	cbz	r3, 800307a <_sbrk_r+0x1a>
 8003078:	6023      	str	r3, [r4, #0]
 800307a:	bd38      	pop	{r3, r4, r5, pc}
 800307c:	2000090c 	.word	0x2000090c

08003080 <__errno>:
 8003080:	4b01      	ldr	r3, [pc, #4]	@ (8003088 <__errno+0x8>)
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	200000e8 	.word	0x200000e8

0800308c <__libc_init_array>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	2600      	movs	r6, #0
 8003090:	4d0c      	ldr	r5, [pc, #48]	@ (80030c4 <__libc_init_array+0x38>)
 8003092:	4c0d      	ldr	r4, [pc, #52]	@ (80030c8 <__libc_init_array+0x3c>)
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	42a6      	cmp	r6, r4
 800309a:	d109      	bne.n	80030b0 <__libc_init_array+0x24>
 800309c:	f000 f864 	bl	8003168 <_init>
 80030a0:	2600      	movs	r6, #0
 80030a2:	4d0a      	ldr	r5, [pc, #40]	@ (80030cc <__libc_init_array+0x40>)
 80030a4:	4c0a      	ldr	r4, [pc, #40]	@ (80030d0 <__libc_init_array+0x44>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	42a6      	cmp	r6, r4
 80030ac:	d105      	bne.n	80030ba <__libc_init_array+0x2e>
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b4:	4798      	blx	r3
 80030b6:	3601      	adds	r6, #1
 80030b8:	e7ee      	b.n	8003098 <__libc_init_array+0xc>
 80030ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80030be:	4798      	blx	r3
 80030c0:	3601      	adds	r6, #1
 80030c2:	e7f2      	b.n	80030aa <__libc_init_array+0x1e>
 80030c4:	08003524 	.word	0x08003524
 80030c8:	08003524 	.word	0x08003524
 80030cc:	08003524 	.word	0x08003524
 80030d0:	08003528 	.word	0x08003528

080030d4 <__retarget_lock_acquire_recursive>:
 80030d4:	4770      	bx	lr

080030d6 <__retarget_lock_release_recursive>:
 80030d6:	4770      	bx	lr

080030d8 <_free_r>:
 80030d8:	b538      	push	{r3, r4, r5, lr}
 80030da:	4605      	mov	r5, r0
 80030dc:	2900      	cmp	r1, #0
 80030de:	d040      	beq.n	8003162 <_free_r+0x8a>
 80030e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030e4:	1f0c      	subs	r4, r1, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bfb8      	it	lt
 80030ea:	18e4      	addlt	r4, r4, r3
 80030ec:	f7ff ffa4 	bl	8003038 <__malloc_lock>
 80030f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003164 <_free_r+0x8c>)
 80030f2:	6813      	ldr	r3, [r2, #0]
 80030f4:	b933      	cbnz	r3, 8003104 <_free_r+0x2c>
 80030f6:	6063      	str	r3, [r4, #4]
 80030f8:	6014      	str	r4, [r2, #0]
 80030fa:	4628      	mov	r0, r5
 80030fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003100:	f7ff bfa0 	b.w	8003044 <__malloc_unlock>
 8003104:	42a3      	cmp	r3, r4
 8003106:	d908      	bls.n	800311a <_free_r+0x42>
 8003108:	6820      	ldr	r0, [r4, #0]
 800310a:	1821      	adds	r1, r4, r0
 800310c:	428b      	cmp	r3, r1
 800310e:	bf01      	itttt	eq
 8003110:	6819      	ldreq	r1, [r3, #0]
 8003112:	685b      	ldreq	r3, [r3, #4]
 8003114:	1809      	addeq	r1, r1, r0
 8003116:	6021      	streq	r1, [r4, #0]
 8003118:	e7ed      	b.n	80030f6 <_free_r+0x1e>
 800311a:	461a      	mov	r2, r3
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	b10b      	cbz	r3, 8003124 <_free_r+0x4c>
 8003120:	42a3      	cmp	r3, r4
 8003122:	d9fa      	bls.n	800311a <_free_r+0x42>
 8003124:	6811      	ldr	r1, [r2, #0]
 8003126:	1850      	adds	r0, r2, r1
 8003128:	42a0      	cmp	r0, r4
 800312a:	d10b      	bne.n	8003144 <_free_r+0x6c>
 800312c:	6820      	ldr	r0, [r4, #0]
 800312e:	4401      	add	r1, r0
 8003130:	1850      	adds	r0, r2, r1
 8003132:	4283      	cmp	r3, r0
 8003134:	6011      	str	r1, [r2, #0]
 8003136:	d1e0      	bne.n	80030fa <_free_r+0x22>
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4408      	add	r0, r1
 800313e:	6010      	str	r0, [r2, #0]
 8003140:	6053      	str	r3, [r2, #4]
 8003142:	e7da      	b.n	80030fa <_free_r+0x22>
 8003144:	d902      	bls.n	800314c <_free_r+0x74>
 8003146:	230c      	movs	r3, #12
 8003148:	602b      	str	r3, [r5, #0]
 800314a:	e7d6      	b.n	80030fa <_free_r+0x22>
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	1821      	adds	r1, r4, r0
 8003150:	428b      	cmp	r3, r1
 8003152:	bf01      	itttt	eq
 8003154:	6819      	ldreq	r1, [r3, #0]
 8003156:	685b      	ldreq	r3, [r3, #4]
 8003158:	1809      	addeq	r1, r1, r0
 800315a:	6021      	streq	r1, [r4, #0]
 800315c:	6063      	str	r3, [r4, #4]
 800315e:	6054      	str	r4, [r2, #4]
 8003160:	e7cb      	b.n	80030fa <_free_r+0x22>
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	200007d0 	.word	0x200007d0

08003168 <_init>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr

08003174 <_fini>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr
